//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <SystemMigrationNetworking/SMNAction.h>

@class NSDate, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_source>, NSObject<SMYaaActionDelegate>, NSSet, NSString;

@interface SMNYaaAction : SMNAction
{
    BOOL _receivedEOAMarker;
    int _compressionAlgorithm;
    NSString *_errorPath;
    NSString *_lastPathReceived;
    NSObject<SMYaaActionDelegate> *_callbackDelegate;
    CDUnknownBlockType _usernameConversionBlock;
    CDUnknownBlockType _groupnameConversionBlock;
    unsigned long long _compressionBlockSize;
    NSString *_sourcePath;
    NSString *_requestedFilename;
    NSString *_destinationPath;
    NSString *_restartPoint;
    NSSet *_excludedPathsSet;
    NSDate *_lastLoggedThroughputDate;
    unsigned long long _intraFileBytesCompletedOverlappingFromLastInterval;
    unsigned long long _totalBytesCompletedThisInterval;
    NSObject<OS_dispatch_queue> *_atomicQueue;
    NSObject<OS_dispatch_source> *_watchdogSource;
    NSObject<OS_dispatch_queue> *_resumeQueue;
    void *_compressionStream;
}

+ (id)actionWithPayload:(id)arg1;
+ (BOOL)shouldCloseInboundStreamWhenDone;
+ (BOOL)shouldCloseOutboundStreamWhenDone;
+ (BOOL)streamsResults;
+ (int)actionID;
@property void *compressionStream; // @synthesize compressionStream=_compressionStream;
@property(retain) NSObject<OS_dispatch_queue> *resumeQueue; // @synthesize resumeQueue=_resumeQueue;
@property(retain) NSObject<OS_dispatch_source> *watchdogSource; // @synthesize watchdogSource=_watchdogSource;
@property(retain) NSObject<OS_dispatch_queue> *atomicQueue; // @synthesize atomicQueue=_atomicQueue;
@property unsigned long long totalBytesCompletedThisInterval; // @synthesize totalBytesCompletedThisInterval=_totalBytesCompletedThisInterval;
@property unsigned long long intraFileBytesCompletedOverlappingFromLastInterval; // @synthesize intraFileBytesCompletedOverlappingFromLastInterval=_intraFileBytesCompletedOverlappingFromLastInterval;
@property(retain) NSDate *lastLoggedThroughputDate; // @synthesize lastLoggedThroughputDate=_lastLoggedThroughputDate;
@property(retain) NSSet *excludedPathsSet; // @synthesize excludedPathsSet=_excludedPathsSet;
@property(retain) NSString *restartPoint; // @synthesize restartPoint=_restartPoint;
@property(retain) NSString *destinationPath; // @synthesize destinationPath=_destinationPath;
@property(retain) NSString *requestedFilename; // @synthesize requestedFilename=_requestedFilename;
@property(retain) NSString *sourcePath; // @synthesize sourcePath=_sourcePath;
@property BOOL receivedEOAMarker; // @synthesize receivedEOAMarker=_receivedEOAMarker;
@property unsigned long long compressionBlockSize; // @synthesize compressionBlockSize=_compressionBlockSize;
@property int compressionAlgorithm; // @synthesize compressionAlgorithm=_compressionAlgorithm;
@property(copy) CDUnknownBlockType groupnameConversionBlock; // @synthesize groupnameConversionBlock=_groupnameConversionBlock;
@property(copy) CDUnknownBlockType usernameConversionBlock; // @synthesize usernameConversionBlock=_usernameConversionBlock;
@property __weak NSObject<SMYaaActionDelegate> *callbackDelegate; // @synthesize callbackDelegate=_callbackDelegate;
@property(retain) NSString *lastPathReceived; // @synthesize lastPathReceived=_lastPathReceived;
@property(retain) NSString *errorPath; // @synthesize errorPath=_errorPath;
- (void).cxx_destruct;
- (void)receivedEOA;
- (void)extractEntryProgressCallback:(const CDStruct_743dcad3 *)arg1;
- (void)extractEntryBeginCallback:(const CDStruct_743dcad3 *)arg1 overrides:(CDStruct_1210889d *)arg2;
- (void)processACL:(CDStruct_f9f9ee5f *)arg1;
- (BOOL)_writeCompletelyToFd:(int)arg1 buffer:(const void *)arg2 length:(unsigned long long)arg3;
- (BOOL)_readCompletelyFromFd:(int)arg1 buffer:(void *)arg2 length:(unsigned long long)arg3;
- (BOOL)sendResultOnFd:(int)arg1;
- (void)abortSendingStream;
- (BOOL)receiveResultOnFd:(int)arg1 errorIsFatal:(char *)arg2;
- (BOOL)isEqual:(id)arg1;
- (BOOL)shouldSkip:(const char *)arg1 ofType:(int)arg2;
- (id)selectiveDescription;
- (id)description;
- (id)requestPayload;
- (id)initWithSource:(id)arg1 andDestination:(id)arg2 andRestartPoint:(id)arg3 andExcludedPaths:(id)arg4 andOptions:(id)arg5;

@end

