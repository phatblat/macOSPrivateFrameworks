//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

@class BU_ButtonController, BU_DPRemoteDesktopPicture, BU_TBUStarfieldShadowLayer, BU_TNotificationCenterObserverGlue, BU_TRunAfterHelper, BU_TValidatingDateFormatter, CABackdropLayer, CALayer, NSArray, NSDate, NSDateComponents, NSObject, NSObject<OS_dispatch_queue>, NSTimer, NSValue;

#pragma mark Named Structures

struct BUTimelinePrivate {
    struct TNSRef<NSObject<BUStarfieldTimelineDataSource>, void> _field1;
    struct TNSRef<NSObject<BUStarfieldTimelineDelegate>, void> _field2;
    struct TNSRef<BU_TMTimeline, void> _field3;
    id _field4;
    id _field5;
};

struct CGColor;

struct CGColorSpace;

struct CGImage;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct IPrefsObserver {
    CDUnknownFunctionPointerType *_field1;
    struct TNSRef<BU_TPrefsObserverBridge, void> _field2;
};

struct OpaqueNodeRef;

struct TBackupController {
    vector_c7a9c3f3 _field1;
    struct TNSRef<BU_TBackupWindow, void> _field2;
    struct TNSRef<BU_TBackupView, void> _field3;
    struct TNSRef<NSMutableDictionary, void> _field4;
};

struct TBackupLayerList {
    struct TNSRef<BU_TBackupLayer, void> *_field1;
    struct TNSRef<BU_TBackupLayer, void> *_field2;
    struct __compressed_pair<TNSRef<BU_TBackupLayer, void>*, std::__1::allocator<TNSRef<BU_TBackupLayer, void>>> {
        struct TNSRef<BU_TBackupLayer, void> *_field1;
    } _field3;
};

struct TDate {
    double _field1;
};

struct TEase {
    double _field1;
    double _field2;
};

struct TFCGImage {
    struct TRef<CGImage *, TRetainReleasePolicy<CGImageRef>> _field1;
};

struct TFENode {
    struct OpaqueNodeRef *_field1;
};

struct TNSRef<BU_ButtonController, void> {
    BU_ButtonController *fRef;
};

struct TNSRef<BU_DPRemoteDesktopPicture, void> {
    BU_DPRemoteDesktopPicture *fRef;
};

struct TNSRef<BU_TBUStarfieldShadowLayer, void> {
    BU_TBUStarfieldShadowLayer *fRef;
};

struct TNSRef<BU_TBackupLayer, void>;

struct TNSRef<BU_TBackupView, void> {
    id _field1;
};

struct TNSRef<BU_TBackupWindow, void> {
    id _field1;
};

struct TNSRef<BU_TMTimeline, void> {
    id _field1;
};

struct TNSRef<BU_TNotificationCenterObserverGlue, void> {
    BU_TNotificationCenterObserverGlue *fRef;
};

struct TNSRef<BU_TPrefsObserverBridge, void> {
    id _field1;
};

struct TNSRef<BU_TRunAfterHelper, void> {
    BU_TRunAfterHelper *fRef;
};

struct TNSRef<BU_TValidatingDateFormatter, void> {
    BU_TValidatingDateFormatter *fRef;
};

struct TNSRef<CABackdropLayer, void> {
    CABackdropLayer *fRef;
};

struct TNSRef<CALayer, void> {
    CALayer *fRef;
};

struct TNSRef<NSArray, void> {
    NSArray *fRef;
};

struct TNSRef<NSDate, void> {
    NSDate *fRef;
};

struct TNSRef<NSDateComponents, void> {
    NSDateComponents *fRef;
};

struct TNSRef<NSMutableDictionary, void> {
    id _field1;
};

struct TNSRef<NSObject<BUStarfieldTimelineDataSource>, void> {
    id _field1;
};

struct TNSRef<NSObject<BUStarfieldTimelineDelegate>, void> {
    id _field1;
};

struct TNSRef<NSTimer, void> {
    NSTimer *fRef;
};

struct TNSRef<NSValue, void> {
    NSValue *fRef;
};

struct TNSWeakPtr<BU_TRunAfterHelper, void> {
    struct TNSRef<NSValue, void> fWeakObject;
};

struct TNotificationCenterObserver {
    NSObject *fObservedObject;
    struct TString fNotificationName;
    struct TNSRef<BU_TNotificationCenterObserverGlue, void> fFunctorGlue;
    _Bool fIsDistributedObserving;
};

struct TRef<CGColor *, TRetainReleasePolicy<CGColorRef>> {
    struct CGColor *_field1;
};

struct TRef<CGColorSpace *, TRetainReleasePolicy<CGColorSpaceRef>> {
    struct CGColorSpace *_field1;
};

struct TRef<CGImage *, TRetainReleasePolicy<CGImageRef>> {
    struct CGImage *fRef;
};

struct TRef<NSObject<OS_dispatch_queue>*, TRetainReleasePolicy<dispatch_queue_t>> {
    NSObject<OS_dispatch_queue> *fRef;
};

struct TRef<__CFDictionary *, TRetainReleasePolicy<CFMutableDictionaryRef>> {
    struct __CFDictionary *_field1;
};

struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> {
    struct __CFString *fRef;
};

struct TSnapshot;

struct TSpinLock {
    int fSpinLock;
};

struct TString {
    struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> fString;
};

struct TTimeMachineTarget;

struct TTimelineControl {
    CDUnknownFunctionPointerType *_field1;
    struct weak_ptr<TTimelineControl> _field2;
    _Bool _field3;
    _Bool _field4;
    id _field5;
    _Bool _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    double _field11;
    struct TEase _field12;
    double _field13;
    vector_c7a9c3f3 _field14;
    struct TRef<__CFDictionary *, TRetainReleasePolicy<CFMutableDictionaryRef>> _field15;
    int _field16;
    int _field17;
    struct TTimelineItem *_field18;
    struct TTimelineItem *_field19;
    struct vector<TTimelineItem *, std::__1::allocator<TTimelineItem *>> _field20;
    struct TRef<CGColor *, TRetainReleasePolicy<CGColorRef>> _field21;
    struct TRef<CGColor *, TRetainReleasePolicy<CGColorRef>> _field22;
    struct TRef<CGColor *, TRetainReleasePolicy<CGColorRef>> _field23;
    double _field24;
    double _field25;
    double _field26;
    double _field27;
    double _field28;
    struct TRef<CGColorSpace *, TRetainReleasePolicy<CGColorSpaceRef>> _field29;
    _Bool _field30;
    _Bool _field31;
    _Bool _field32;
    struct TNSRef<NSTimer, void> _field33;
    struct TNSRef<NSTimer, void> _field34;
    struct TNSRef<NSTimer, void> _field35;
    id _field36;
};

struct TTimelineItem;

struct __hash_node_base<std::__1::__hash_node<NSObject *, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<NSObject *, void *>*> *__next_;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct callable_holder_base<void>;

struct function<NSComparisonResult (__kindof NSView *, __kindof NSView *)> {
    struct type __buf_;
    struct __base<NSComparisonResult (__kindof NSView *, __kindof NSView *)> *__f_;
};

struct function<void ()> {
    struct type __buf_;
    struct __base<void ()> *__f_;
};

struct function<void (BU_DPRemoteDesktopPicture *)> {
    struct type _field1;
    struct __base<void (BU_DPRemoteDesktopPicture *)> *_field2;
};

struct function<void (NSAnimation *, float)> {
    struct type __buf_;
    struct __base<void (NSAnimation *, float)> *__f_;
};

struct function<void (NSDictionary<NSString *, NSObject *>*)> {
    struct type __buf_;
    struct __base<void (NSDictionary<NSString *, NSObject *>*)> *__f_;
};

struct function<void (NSNotification *)> {
    struct type __buf_;
    struct __base<void (NSNotification *)> *__f_;
};

struct set<TString, std::__1::less<TString>, std::__1::allocator<TString>> {
    struct __tree<TString, std::__1::less<TString>, std::__1::allocator<TString>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<TString, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<TString>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<UDefaults::RegistryID, std::__1::less<UDefaults::RegistryID>, std::__1::allocator<UDefaults::RegistryID>> {
    struct __tree<UDefaults::RegistryID, std::__1::less<UDefaults::RegistryID>, std::__1::allocator<UDefaults::RegistryID>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<UDefaults::RegistryID, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<UDefaults::RegistryID>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<double, std::__1::less<double>, std::__1::allocator<double>> {
    struct __tree<double, std::__1::less<double>, std::__1::allocator<double>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<double, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<double>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct shared_ptr<TSnapshot> {
    struct TSnapshot *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<TTimeMachineTarget> {
    struct TTimeMachineTarget *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<TTimelineControl> {
    struct TTimelineControl *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct type {
    unsigned char __lx[32];
};

struct unique_function<void ()> {
    struct unique_ptr<fstd::finder_callable_details::callable_holder_base<void>, std::__1::default_delete<fstd::finder_callable_details::callable_holder_base<void>>> fLambdaHolder;
};

struct unique_ptr<fstd::finder_callable_details::callable_holder_base<void>, std::__1::default_delete<fstd::finder_callable_details::callable_holder_base<void>>> {
    struct __compressed_pair<fstd::finder_callable_details::callable_holder_base<void>*, std::__1::default_delete<fstd::finder_callable_details::callable_holder_base<void>>> {
        struct callable_holder_base<void> *__value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<NSObject *, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_set<NSObject *, std::__1::hash<NSObject *>, std::__1::equal_to<NSObject *>, std::__1::allocator<NSObject *>> {
    struct __hash_table<NSObject *, std::__1::hash<NSObject *>, std::__1::equal_to<NSObject *>, std::__1::allocator<NSObject *>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>, std::__1::allocator<std::__1::__hash_node<NSObject *, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<NSObject *, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<NSObject *>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<NSObject *>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<CGRect, std::__1::allocator<CGRect>> {
    struct CGRect *__begin_;
    struct CGRect *__end_;
    struct __compressed_pair<CGRect *, std::__1::allocator<CGRect>> {
        struct CGRect *__value_;
    } __end_cap_;
};

struct vector<TNSRef<CALayer, void>, std::__1::allocator<TNSRef<CALayer, void>>> {
    struct TNSRef<CALayer, void> *__begin_;
    struct TNSRef<CALayer, void> *__end_;
    struct __compressed_pair<TNSRef<CALayer, void>*, std::__1::allocator<TNSRef<CALayer, void>>> {
        struct TNSRef<CALayer, void> *__value_;
    } __end_cap_;
};

struct vector<TNotificationCenterObserver, std::__1::allocator<TNotificationCenterObserver>> {
    struct TNotificationCenterObserver *__begin_;
    struct TNotificationCenterObserver *__end_;
    struct __compressed_pair<TNotificationCenterObserver *, std::__1::allocator<TNotificationCenterObserver>> {
        struct TNotificationCenterObserver *__value_;
    } __end_cap_;
};

struct vector<TTimelineItem *, std::__1::allocator<TTimelineItem *>> {
    struct TTimelineItem **_field1;
    struct TTimelineItem **_field2;
    struct __compressed_pair<TTimelineItem **, std::__1::allocator<TTimelineItem *>> {
        struct TTimelineItem **_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<TTimeMachineTarget>, std::__1::allocator<std::__1::shared_ptr<TTimeMachineTarget>>> {
    shared_ptr_253687d6 *_field1;
    shared_ptr_253687d6 *_field2;
    struct __compressed_pair<std::__1::shared_ptr<TTimeMachineTarget>*, std::__1::allocator<std::__1::shared_ptr<TTimeMachineTarget>>> {
        shared_ptr_253687d6 *_field1;
    } _field3;
};

struct weak_ptr<TTimelineControl> {
    struct TTimelineControl *_field1;
    struct __shared_weak_count *_field2;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct TNSWeakPtr<BU_TRunAfterHelper, void> {
    struct TNSRef<NSValue, void> fWeakObject;
} TNSWeakPtr_6f98b07a;

typedef struct function<NSComparisonResult (__kindof NSView *, __kindof NSView *)> {
    struct type __buf_;
    struct __base<NSComparisonResult (__kindof NSView *, __kindof NSView *)> *__f_;
} function_0f3b3c36;

typedef struct function<void ()> {
    struct type __buf_;
    struct __base<void ()> *__f_;
} function_b1fce659;

typedef struct function<void (BU_DPRemoteDesktopPicture *)> {
    struct type _field1;
    struct __base<void (BU_DPRemoteDesktopPicture *)> *_field2;
} function_63706baa;

typedef struct function<void (NSAnimation *, float)> {
    struct type __buf_;
    struct __base<void (NSAnimation *, float)> *__f_;
} function_07c9e451;

typedef struct function<void (NSDictionary<NSString *, NSObject *>*)> {
    struct type __buf_;
    struct __base<void (NSDictionary<NSString *, NSObject *>*)> *__f_;
} function_e1076a84;

typedef struct function<void (NSNotification *)> {
    struct type __buf_;
    struct __base<void (NSNotification *)> *__f_;
} function_afb0e2a8;

typedef struct set<double, std::__1::less<double>, std::__1::allocator<double>> {
    struct __tree<double, std::__1::less<double>, std::__1::allocator<double>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<double, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<double>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
} set_8681f3ab;

typedef struct shared_ptr<TSnapshot> {
    struct TSnapshot *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_a94acee0;

typedef struct shared_ptr<TTimeMachineTarget> {
    struct TTimeMachineTarget *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_253687d6;

typedef struct unique_function<void ()> {
    struct unique_ptr<fstd::finder_callable_details::callable_holder_base<void>, std::__1::default_delete<fstd::finder_callable_details::callable_holder_base<void>>> fLambdaHolder;
} unique_function_63952f55;

typedef struct unordered_set<NSObject *, std::__1::hash<NSObject *>, std::__1::equal_to<NSObject *>, std::__1::allocator<NSObject *>> {
    struct __hash_table<NSObject *, std::__1::hash<NSObject *>, std::__1::equal_to<NSObject *>, std::__1::allocator<NSObject *>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>, std::__1::allocator<std::__1::__hash_node<NSObject *, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<NSObject *, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<NSObject *>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<NSObject *>> {
            float __value_;
        } __p3_;
    } __table_;
} unordered_set_24e1661d;

typedef struct vector<std::__1::shared_ptr<TTimeMachineTarget>, std::__1::allocator<std::__1::shared_ptr<TTimeMachineTarget>>> {
    shared_ptr_253687d6 *_field1;
    shared_ptr_253687d6 *_field2;
    struct __compressed_pair<std::__1::shared_ptr<TTimeMachineTarget>*, std::__1::allocator<std::__1::shared_ptr<TTimeMachineTarget>>> {
        shared_ptr_253687d6 *_field1;
    } _field3;
} vector_c7a9c3f3;

