//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <GameCenterUI/GKCollectionViewController.h>

#import "GKTurnBasedInviteViewControllerDelegate.h"
#import "GKTurnBasedMatchDetailViewControllerDelegate.h"

@class GKGame, GKMatchRequest, GKTurnBasedInviteViewController, GKTurnBasedMatchDetailViewController, GKTurnBasedMatchesDataSource, NSString;

@interface GKTurnBasedMatchesViewController : GKCollectionViewController <GKTurnBasedInviteViewControllerDelegate, GKTurnBasedMatchDetailViewControllerDelegate>
{
    BOOL _showExistingMatches;
    BOOL _showPlay;
    BOOL _showQuit;
    id <GKTurnBasedMatchesViewControllerDelegate> _delegateWeak;
    GKGame *_game;
    GKMatchRequest *_matchRequest;
    GKCollectionViewController *_masterViewController;
    GKTurnBasedMatchesDataSource *_matchesDataSource;
    long long _maxMatchesSeen;
    NSString *_matchIDWaitingForTurnEvent;
    GKTurnBasedInviteViewController *_inviteController;
    GKTurnBasedMatchDetailViewController *_detailViewController;
}

@property(retain) GKTurnBasedMatchDetailViewController *detailViewController; // @synthesize detailViewController=_detailViewController;
@property(retain) GKTurnBasedInviteViewController *inviteController; // @synthesize inviteController=_inviteController;
@property(retain) NSString *matchIDWaitingForTurnEvent; // @synthesize matchIDWaitingForTurnEvent=_matchIDWaitingForTurnEvent;
@property long long maxMatchesSeen; // @synthesize maxMatchesSeen=_maxMatchesSeen;
@property(retain) GKTurnBasedMatchesDataSource *matchesDataSource; // @synthesize matchesDataSource=_matchesDataSource;
@property(nonatomic) BOOL showQuit; // @synthesize showQuit=_showQuit;
@property(nonatomic) BOOL showPlay; // @synthesize showPlay=_showPlay;
@property(nonatomic) BOOL showExistingMatches; // @synthesize showExistingMatches=_showExistingMatches;
@property(nonatomic) __weak GKCollectionViewController *masterViewController; // @synthesize masterViewController=_masterViewController;
@property(retain, nonatomic) GKMatchRequest *matchRequest; // @synthesize matchRequest=_matchRequest;
@property(retain, nonatomic) GKGame *game; // @synthesize game=_game;
@property(nonatomic) __weak id <GKTurnBasedMatchesViewControllerDelegate> delegate; // @synthesize delegate=_delegateWeak;
- (void).cxx_destruct;
- (void)detailViewControllerHasBeenDismissed;
- (void)handleTurnBasedEvent:(id)arg1;
- (void)turnBasedMatchDetailViewControllerDidFinish:(id)arg1;
- (void)turnBasedMatchDetailViewControllerDidShowStore:(id)arg1;
- (void)turnBasedMatchDetailViewControllerDidRemoveMatch:(id)arg1;
- (void)turnBasedMatchesDataSource:(id)arg1 didQuitMatch:(id)arg2;
- (void)turnBasedMatchDetailViewControllerDidQuitMatch:(id)arg1;
- (void)turnBasedMatchDetailViewControllerDidChooseMatch:(id)arg1;
- (void)turnBasedMatchDetailViewControllerDidDeclineInvitation:(id)arg1;
- (void)turnBasedMatchDetailViewControllerDidAcceptInvitation:(id)arg1;
- (void)dismissDetailViewController;
- (void)showDetailForMatch:(id)arg1;
- (void)showMatch:(id)arg1;
- (void)acceptInviteForMatch:(id)arg1;
- (void)notifyGameWithMatch:(id)arg1 orError:(id)arg2;
- (void)launchGameAndShowMatch:(id)arg1;
- (void)detailPressedForMatch:(id)arg1;
- (void)gameButtonPressed;
- (void)doneButtonPressed;
- (void)turnBasedInviteViewController:(id)arg1 didFailWithError:(id)arg2;
- (void)turnBasedInviteViewController:(id)arg1 didCreateMatchID:(id)arg2;
- (void)turnBasedInviteViewControllerWasCancelled:(id)arg1;
- (void)showInviteControllerAnimated:(BOOL)arg1;
- (void)collectionView:(id)arg1 didSelectItemAtIndexPath:(id)arg2;
- (void)didEnterNoContentState;
- (void)loadDataWithCompletionHandlerAndError:(CDUnknownBlockType)arg1;
- (void)viewWillDisappear:(BOOL)arg1;
- (void)viewDidAppear:(BOOL)arg1;
- (void)viewWillAppear:(BOOL)arg1;
- (void)loadView;
- (void)configureHeader:(id)arg1 indexPath:(id)arg2;
- (void)configureViewFactories;
- (void)configureDataSource;
- (BOOL)isInGame;
- (void)dealloc;
- (id)initWithMatchRequest:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

