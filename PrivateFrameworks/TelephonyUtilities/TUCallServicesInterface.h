//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "TUAudioDeviceControllerActions.h"
#import "TUCallFilterControllerActions.h"
#import "TUCallServicesClientCapabilitiesActions.h"
#import "TUCallServicesProxyCallActions.h"
#import "TUCallServicesXPCClient.h"
#import "TURouteControllerActions.h"

@class NSArray, NSMapTable, NSObject<OS_dispatch_queue>, NSString, NSXPCConnection, TUCallCenter, TUCallNotificationManager, TUCallServicesClientCapabilities, TURouteController;

@interface TUCallServicesInterface : NSObject <TUCallServicesXPCClient, TUCallServicesProxyCallActions, TUCallServicesClientCapabilitiesActions, TUAudioDeviceControllerActions, TURouteControllerActions, TUCallFilterControllerActions>
{
    BOOL _hasRequestedInitialState;
    BOOL _hasServerLaunched;
    int _connectionRequestNotificationToken;
    id <TUCallServicesXPCServer> _server;
    TUCallServicesClientCapabilities *_callServicesClientCapabilities;
    TUCallCenter *_callCenter;
    TURouteController *_localRouteController;
    TURouteController *_pairedHostDeviceRouteController;
    NSObject<OS_dispatch_queue> *_queue;
    NSXPCConnection *_xpcConnection;
    NSArray *_currentCalls;
    NSMapTable *_uniqueProxyIdentifierToProxyCall;
    TUCallNotificationManager *_callNotificationManager;
    NSArray *_localProxyCalls;
}

@property(nonatomic) BOOL hasServerLaunched; // @synthesize hasServerLaunched=_hasServerLaunched;
@property(copy, nonatomic) NSArray *localProxyCalls; // @synthesize localProxyCalls=_localProxyCalls;
@property(readonly, nonatomic) TUCallNotificationManager *callNotificationManager; // @synthesize callNotificationManager=_callNotificationManager;
@property(readonly, nonatomic) NSMapTable *uniqueProxyIdentifierToProxyCall; // @synthesize uniqueProxyIdentifierToProxyCall=_uniqueProxyIdentifierToProxyCall;
@property(copy, nonatomic) NSArray *currentCalls; // @synthesize currentCalls=_currentCalls;
@property(nonatomic) BOOL hasRequestedInitialState; // @synthesize hasRequestedInitialState=_hasRequestedInitialState;
@property(retain, nonatomic) NSXPCConnection *xpcConnection; // @synthesize xpcConnection=_xpcConnection;
@property(readonly, nonatomic) int connectionRequestNotificationToken; // @synthesize connectionRequestNotificationToken=_connectionRequestNotificationToken;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(retain, nonatomic) TURouteController *pairedHostDeviceRouteController; // @synthesize pairedHostDeviceRouteController=_pairedHostDeviceRouteController;
@property(retain, nonatomic) TURouteController *localRouteController; // @synthesize localRouteController=_localRouteController;
@property(nonatomic) __weak TUCallCenter *callCenter; // @synthesize callCenter=_callCenter;
@property(readonly, nonatomic) TUCallServicesClientCapabilities *callServicesClientCapabilities; // @synthesize callServicesClientCapabilities=_callServicesClientCapabilities;
@property(nonatomic) __weak id <TUCallServicesXPCServer> server; // @synthesize server=_server;
- (void).cxx_destruct;
- (oneway void)handleNotificationName:(id)arg1 forCallWithUniqueProxyIdentifier:(id)arg2 userInfo:(id)arg3;
- (oneway void)resetCallProvisionalStates;
- (oneway void)_handleCurrentCallsChanged:(id)arg1 callsDisconnected:(id)arg2;
- (oneway void)handleMeterLevelChangedTo:(float)arg1 inDirection:(int)arg2 forCallsWithUniqueProxyIdentifiers:(id)arg3;
- (oneway void)handleCurrentCallsChanged:(id)arg1 callDisconnected:(id)arg2;
- (oneway void)handleFrequencyChangedTo:(id)arg1 inDirection:(int)arg2 forCallsWithUniqueProxyIdentifiers:(id)arg3;
- (oneway void)handlePairedHostDeviceRoutesByUniqueIdentifierUpdated:(id)arg1;
- (oneway void)handleLocalRoutesByUniqueIdentifierUpdated:(id)arg1;
- (oneway void)setClientCapabilities:(id)arg1;
- (BOOL)isUnknownAddress:(id)arg1 normalizedAddress:(id)arg2 forBundleIdentifier:(id)arg3;
- (unsigned long long)filterStatusForAddresses:(id)arg1 forBundleIdentifier:(id)arg2;
- (BOOL)shouldRestrictAddresses:(id)arg1 forBundleIdentifier:(id)arg2 performSynchronously:(BOOL)arg3;
- (BOOL)willRestrictAddresses:(id)arg1 forBundleIdentifier:(id)arg2;
- (id)policyForAddresses:(id)arg1 forBundleIdentifier:(id)arg2;
- (BOOL)containsRestrictedHandle:(id)arg1 forBundleIdentifier:(id)arg2 performSynchronously:(BOOL)arg3;
- (void)pickRouteWithUniqueIdentifier:(id)arg1 shouldWaitUntilAvailable:(BOOL)arg2 forRouteController:(id)arg3;
- (id)routesByUniqueIdentifierForRouteController:(id)arg1;
- (oneway void)setCurrentAudioOutputDeviceToDeviceWithUID:(id)arg1;
- (oneway void)setCurrentAudioInputDeviceToDeviceWithUID:(id)arg1;
- (oneway void)shouldSuppressInCallStatusBar:(BOOL)arg1;
- (oneway void)setDownlinkMuted:(BOOL)arg1 forCallWithUniqueProxyIdentifier:(id)arg2;
- (oneway void)setUplinkMuted:(BOOL)arg1 forCallWithUniqueProxyIdentifier:(id)arg2;
- (oneway void)sendMMIOrUSSDCodeWithRequest:(id)arg1;
- (oneway void)setRemoteVideoPresentationStateForCallWithUniqueProxyIdentifier:(id)arg1 presentationState:(int)arg2;
- (oneway void)setRemoteVideoPresentationSizeForCallWithUniqueProxyIdentifier:(id)arg1 size:(struct CGSize)arg2;
- (oneway void)enteredBackgroundForAllCalls;
- (oneway void)willEnterBackgroundForAllCalls;
- (oneway void)enteredForegroundForCallWithUniqueProxyIdentifier:(id)arg1;
- (oneway void)updateCallWithProxy:(id)arg1;
- (oneway void)sendHardPauseDigitsForCallWithUniqueProxyIdentifier:(id)arg1;
- (oneway void)pullHostedCallsFromPairedHostDevice;
- (oneway void)pushHostedCallsToDestination:(id)arg1;
- (oneway void)pullCallFromClientUsingHandoffActivityUserInfo:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (oneway void)pushRelayingCallsToHostWithSourceIdentifier:(id)arg1;
- (oneway void)pullRelayingCallsFromClient;
- (oneway void)setTTYType:(int)arg1 forCallWithUniqueProxyIdentifier:(id)arg2;
- (oneway void)disconnectAllCalls;
- (oneway void)disconnectCurrentCallAndActivateHeld;
- (oneway void)playDTMFToneForCallWithUniqueProxyIdentifier:(id)arg1 key:(unsigned char)arg2;
- (oneway void)swapCalls;
- (oneway void)ungroupCallWithUniqueProxyIdentifier:(id)arg1;
- (oneway void)groupCallWithUniqueProxyIdentifier:(id)arg1 withOtherCallWithUniqueProxyIdentifier:(id)arg2;
- (oneway void)disconnectCallWithUniqueProxyIdentifier:(id)arg1;
- (oneway void)unholdCallWithUniqueProxyIdentifier:(id)arg1;
- (oneway void)holdCallWithUniqueProxyIdentifier:(id)arg1;
- (oneway void)answerCallWithRequest:(id)arg1;
- (oneway void)reportLocalPreviewStoppedForCallWithUniqueProxyIdentifier:(id)arg1;
- (id)joinConversationWithRequest:(id)arg1;
- (id)dialWithRequest:(id)arg1 completion:(CDUnknownBlockType)arg2;
@property(readonly, nonatomic) id <TUCallContainerPrivate> callContainer;
- (void)handleServerDisconnect;
- (void)handleServerReconnect;
- (void)waitForInitialStateIfNecessary;
- (void)fetchCurrentCalls;
- (void)requestCurrentStateWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)requestCurrentStateWithCompletionHandler:(CDUnknownBlockType)arg1 handleInitialState:(CDUnknownBlockType)arg2;
- (void)tearDownXPCConnection;
- (void)registerCall:(id)arg1;
- (void)performBlockOnQueue:(CDUnknownBlockType)arg1 andWait:(BOOL)arg2;
- (void)performBlockOnQueue:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) void *queueContext;
- (id)_proxyCallWithUniqueProxyIdentifier:(id)arg1;
- (id)_proxyCallWithCall:(id)arg1;
- (void)_updateCurrentCalls:(id)arg1 withNotificationsUsingUpdatedCalls:(id)arg2;
- (void)_updateCurrentCallsWithoutNotifications:(id)arg1;
- (void)_updateCurrentCalls:(id)arg1;
- (void)_registerCall:(id)arg1;
- (void)_tearDownXPCConnection;
- (void)_setUpXPCConnection;
- (id)synchronousServerWithErrorHandler:(CDUnknownBlockType)arg1;
- (id)asynchronousServerWithErrorHandler:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) id <TUCallServicesXPCServer> asynchronousServer;
@property(readonly, nonatomic, getter=isServerLocal) BOOL serverLocal;
- (void)dealloc;
@property(readonly, copy) NSString *debugDescription;
- (id)initWithQueue:(id)arg1 callCenter:(id)arg2;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

