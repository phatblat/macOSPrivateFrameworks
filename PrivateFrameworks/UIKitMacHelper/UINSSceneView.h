//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSView.h"

@class NSArray, NSMutableArray, NSMutableSet, NSString, NSTrackingArea, UINSCursor, UINSInputView, UIWindow, USSLayerHost;

__attribute__((visibility("hidden")))
@interface UINSSceneView : NSView
{
    USSLayerHost *_sceneLayer;
    struct CGSize _lastSentSceneSize;
    double _lastSentScale;
    long long _lastSentGamut;
    struct NSEdgeInsets _lastSendSceneContentInsets;
    long long _sceneResizeSuppressionCount;
    UINSCursor *_currentCursor;
    NSTrackingArea *_cursorTrackingArea;
    BOOL _preventSceneResize;
    id _windowDidChangeScreenNotificationToken;
    id _windowDidUpdateNotificationToken;
    NSMutableSet *_dragRegisteredContextIDs;
    BOOL _shouldRasterize;
    BOOL _isSimAccessibilityEnabled;
    BOOL _shouldHostContent;
    unsigned int _contextId;
    UINSInputView *_inputView;
    NSString *_sceneIdentifier;
    double _scaleFactor;
    double _rasterizationScale;
    NSString *_scalingFilter;
    NSMutableArray *_dropSessions;
    CDUnknownBlockType _resizeBlock;
    struct CGSize _sceneSize;
}

+ (void)setNeedsUpdateDisplayTiming;
+ (void)updateDisplayTiming;
+ (BOOL)requiresConstraintBasedLayout;
+ (void)initialize;
@property(nonatomic) BOOL shouldHostContent; // @synthesize shouldHostContent=_shouldHostContent;
@property(copy, nonatomic) CDUnknownBlockType resizeBlock; // @synthesize resizeBlock=_resizeBlock;
@property(retain, nonatomic) NSMutableArray *dropSessions; // @synthesize dropSessions=_dropSessions;
@property(nonatomic) BOOL isSimAccessibilityEnabled; // @synthesize isSimAccessibilityEnabled=_isSimAccessibilityEnabled;
@property(nonatomic) struct CGSize sceneSize; // @synthesize sceneSize=_sceneSize;
@property(copy, nonatomic) NSString *scalingFilter; // @synthesize scalingFilter=_scalingFilter;
@property(nonatomic) double rasterizationScale; // @synthesize rasterizationScale=_rasterizationScale;
@property(nonatomic) BOOL shouldRasterize; // @synthesize shouldRasterize=_shouldRasterize;
@property(nonatomic) double scaleFactor; // @synthesize scaleFactor=_scaleFactor;
@property(copy, nonatomic) NSString *sceneIdentifier; // @synthesize sceneIdentifier=_sceneIdentifier;
@property(readonly, nonatomic) UINSInputView *inputView; // @synthesize inputView=_inputView;
@property(nonatomic) unsigned int contextId; // @synthesize contextId=_contextId;
- (void).cxx_destruct;
@property(readonly, nonatomic) UIWindow *keyUIWindow;
@property(readonly, nonatomic) NSArray *uiWindows;
- (BOOL)mouseDownCanMoveWindow;
- (void)viewDidMoveToWindow;
- (void)updateDragContextRegistrations;
- (void)viewWillMoveToWindow:(id)arg1;
- (struct CGRect)accessibilityFocusRingMaskBounds;
- (unsigned long long)focusRingType;
- (void)setCursor:(id)arg1;
- (struct CGRect)convertRectFromScene:(struct CGRect)arg1;
- (struct CGRect)convertRectToScene:(struct CGRect)arg1;
- (struct CGSize)convertSizeFromScene:(struct CGSize)arg1;
- (struct CGSize)convertSizeToScene:(struct CGSize)arg1;
- (struct CGPoint)convertPointFromScene:(struct CGPoint)arg1;
- (struct CGPoint)convertPointToScene:(struct CGPoint)arg1;
- (void)updateLayer;
- (void)layout;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_resizeUIKitScene;
- (void)viewDidChangeBackingProperties;
- (void)setLaunchedSceneSize:(struct CGSize)arg1;
- (void)cursorUpdate:(id)arg1;
- (void)setUINSCursor:(id)arg1;
- (unsigned int)contextIdAtPoint:(struct CGPoint)arg1;
@property(nonatomic, setter=_setHostedContextId:) unsigned int _hostedContextId;
- (void)resumeSceneResize;
- (void)suppressSceneResize;
@property(readonly, nonatomic) struct NSEdgeInsets sceneContentInsets;
- (void)_sharedInit;
- (BOOL)isFlipped;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (unsigned long long)_indexOfSessionWithID:(long long)arg1;
- (void)draggingEnded:(id)arg1;
- (void)concludeDragOperation:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (void)draggingExited:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (BOOL)wantsPeriodicDraggingUpdates;
- (unsigned long long)draggingEntered:(id)arg1;
- (id)externalDropSessionFor:(unsigned int)arg1;

@end

