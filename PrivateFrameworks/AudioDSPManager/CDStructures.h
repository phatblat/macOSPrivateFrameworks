//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

@class NSObject<OS_dispatch_object>;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AdaptResponse {
    struct set<dspd::IOControllerNodeConfiguration, std::__1::less<dspd::IOControllerNodeConfiguration>, std::__1::allocator<dspd::IOControllerNodeConfiguration>> _field1;
    struct set<dspd::NodeConfiguration, std::__1::less<dspd::NodeConfiguration>, std::__1::allocator<dspd::NodeConfiguration>> _field2;
    struct set<AMCP::Wire_Description, std::__1::less<AMCP::Wire_Description>, std::__1::allocator<AMCP::Wire_Description>> _field3;
    struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field4;
    struct set<AMCP::Wire_Identifier, std::__1::less<AMCP::Wire_Identifier>, std::__1::allocator<AMCP::Wire_Identifier>> _field5;
    vector_51644792 _field6;
    struct vector<std::__1::pair<unsigned long long, dspd::AdaptResponse::CaptureStatus>, std::__1::allocator<std::__1::pair<unsigned long long, dspd::AdaptResponse::CaptureStatus>>> _field7;
};

struct BusStation;

struct DSPConfigSettings {
    struct unordered_map<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int, adm::MicConfigIdentifierHasher, std::__1::equal_to<std::__1::tuple<unsigned long long, unsigned long long>>, std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>>> mActiveMicrophoneConfigMap;
};

struct DeviceConfiguration;

struct DeviceDescription {
    unsigned long long mDeviceDescriptionID;
    vector_7984f87c mStreamDescriptionIDs;
    struct StringRef mUID;
    struct HardwareInfo mHardwareInfo;
    double mSampleRate;
    struct vector<std::__1::tuple<double, double>, std::__1::allocator<std::__1::tuple<double, double>>> mSupportedSampleRates;
    unsigned int mInputLatency;
    unsigned int mOutputLatency;
    unsigned int mInputSafetyOffset;
    unsigned int mOutputSafetyOffset;
};

struct DownlinkConfiguration {
    int _field1;
    struct vector<adm::vp::DownlinkNodeConfiguration, std::__1::allocator<adm::vp::DownlinkNodeConfiguration>> _field2;
    unsigned int _field3;
};

struct DownlinkNodeConfiguration;

struct DynamicBus;

struct Graph {
    unsigned long long _field1;
    struct map<std::__1::basic_string<char>, std::__1::weak_ptr<adm::graph::Node>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::weak_ptr<adm::graph::Node>>>> _field2;
    struct vector<std::__1::shared_ptr<adm::graph::Node>, std::__1::allocator<std::__1::shared_ptr<adm::graph::Node>>> _field3;
    struct vector<std::__1::shared_ptr<adm::graph::Wire>, std::__1::allocator<std::__1::shared_ptr<adm::graph::Wire>>> _field4;
    int _field5;
    struct unordered_set<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field6;
    id _field7;
    id _field8;
    struct unique_ptr<adm::graph::KnobController, std::__1::default_delete<adm::graph::KnobController>> _field9;
    struct function<void (adm::graph::InternalNode *)> _field10;
    struct vector<std::__1::function<void ()>, std::__1::allocator<std::__1::function<void ()>>> _field11;
    struct unordered_map<unsigned int, adm::graph::ParameterStorageWriter, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, adm::graph::ParameterStorageWriter>>> _field12;
    struct shared_ptr<adm::graph::ParameterStorageInterface> _field13;
    struct unordered_map<unsigned int, adm::graph::PropertyStorageWriter, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, adm::graph::PropertyStorageWriter>>> _field14;
    struct shared_ptr<adm::graph::PropertyStorageInterface> _field15;
    struct ProxyFactory *_field16;
};

struct GraphBuilder {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    id _field2;
    id _field3;
    struct DSPConfigSettings _field4;
    struct GraphConfiguration _field5;
    struct unordered_map<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>>> _field6;
};

struct GraphConfiguration {
    struct unordered_map<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>>> _field1;
    struct optional<adm::graph::VoiceProcessorConfiguration> _field2;
    struct unordered_map<std::__1::basic_string<char>, adm::graph::NodeContext, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, adm::graph::NodeContext>>> _field3;
};

struct GraphDescription {
    struct vector<adm::graph::NodeDescription, std::__1::allocator<adm::graph::NodeDescription>> mNodes;
    struct vector<adm::graph::WireDescription, std::__1::allocator<adm::graph::WireDescription>> mWires;
};

struct HardwareInfo {
    struct optional<applesauce::CF::StringRef> mHardwareName;
    struct optional<applesauce::CF::StringRef> mModelName;
    struct optional<applesauce::CF::StringRef> mManufacturerName;
};

struct IOControllerConfiguration {
    unsigned long long _field1;
    struct optional<double> _field2;
    struct optional<unsigned int> _field3;
    vector_093d5485 _field4;
    vector_093d5485 _field5;
};

struct IOControllerDescription {
    unsigned long long _field1;
    unsigned char _field2;
    _Bool _field3;
    struct optional<double> _field4;
    struct optional<unsigned int> _field5;
    struct vector<std::__1::optional<aura::AudioFormat>, std::__1::allocator<std::__1::optional<aura::AudioFormat>>> _field6;
    struct vector<std::__1::optional<aura::AudioFormat>, std::__1::allocator<std::__1::optional<aura::AudioFormat>>> _field7;
    struct vector<std::__1::optional<AVAudioDSPFlavor>, std::__1::allocator<std::__1::optional<AVAudioDSPFlavor>>> _field8;
    struct vector<std::__1::optional<AVAudioDSPFlavor>, std::__1::allocator<std::__1::optional<AVAudioDSPFlavor>>> _field9;
    struct optional<dspd::IOControllerTopology> _field10;
    struct optional<dspd::IOControllerTopology> _field11;
};

struct IOControllerProjection;

struct IOControllerTopology {
    struct set<dspd::IOControllerTopology::IOStreamMapping, std::__1::less<dspd::IOControllerTopology::IOStreamMapping>, std::__1::allocator<dspd::IOControllerTopology::IOStreamMapping>> _field1;
    struct set<dspd::IOControllerTopology::StreamLoopbackMapping, std::__1::less<dspd::IOControllerTopology::StreamLoopbackMapping>, std::__1::allocator<dspd::IOControllerTopology::StreamLoopbackMapping>> _field2;
    set_6185be97 _field3;
};

struct IOStreamConfiguration;

struct InitiationTriggerSpecification {
    unsigned int mTrigger;
    struct optional<applesauce::CF::StringRef> mInitiatingUID;
    struct optional<AVAudioSessionActivationAccessibilityPreference> mAccessibilityPreference;
    struct optional<AVAudioSessionActivationCallDirection> mCallDirection;
};

struct KnobController {
    struct vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>>>> _field1;
    struct vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>>>> _field2;
    struct vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>>>> _field3;
    struct vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>>>>> _field4;
    struct vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>>>> _field5;
    struct unordered_map<unsigned int, std::__1::tuple<unsigned long long, unsigned int>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::tuple<unsigned long long, unsigned int>>>> _field6;
    struct unordered_map<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>>> _field7;
};

struct MicrophoneConfiguration {
    unsigned int _field1;
    struct StringRef _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    struct vector<aura::MicrophonePolarPattern, std::__1::allocator<aura::MicrophonePolarPattern>> _field6;
    _Bool _field7;
};

struct MicrophonePreference;

struct MutateGraph {
    struct set<dspd::IOControllerNodeConfiguration, std::__1::less<dspd::IOControllerNodeConfiguration>, std::__1::allocator<dspd::IOControllerNodeConfiguration>> _field1;
    struct set<dspd::NodeConfiguration, std::__1::less<dspd::NodeConfiguration>, std::__1::allocator<dspd::NodeConfiguration>> _field2;
    struct set<AMCP::Wire_Description, std::__1::less<AMCP::Wire_Description>, std::__1::allocator<AMCP::Wire_Description>> _field3;
    struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field4;
    struct set<AMCP::Wire_Identifier, std::__1::less<AMCP::Wire_Identifier>, std::__1::allocator<AMCP::Wire_Identifier>> _field5;
};

struct NegotiateResponse {
    vector_16e49d21 _field1;
    struct vector<dspd::IOControllerProjection, std::__1::allocator<dspd::IOControllerProjection>> _field2;
};

struct NodeDescription {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> mUID;
    unsigned int mType;
    unsigned int mBlockSize;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> mPrettyDescription;
};

struct ObjectRef<const __CFString *> {
    struct __CFString *mCFObject;
};

struct ParameterStorageInterface;

struct Port {
    id _field1;
    unsigned long long _field2;
    unsigned int _field3;
    struct unordered_map<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>>> _field4;
    struct unordered_map<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>>> _field5;
    struct unordered_map<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>>> _field6;
};

struct PortDescription {
    unsigned long long _field1;
    unsigned long long _field2;
    vector_7984f87c _field3;
    unsigned int _field4;
    unsigned char _field5;
    unsigned long long _field6;
    unsigned int _field7;
    struct VolumeCapabilites _field8;
    struct vector<unsigned int, std::__1::allocator<unsigned int>> _field9;
    struct vector<unsigned int, std::__1::allocator<unsigned int>> _field10;
    struct optional<std::__1::vector<float, std::__1::allocator<float>>> _field11;
    struct optional<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>> _field12;
    id _field13;
};

struct PortRecord<bool>;

struct PortRecord<float>;

struct PropertyStorageInterface;

struct ProxyFactory {
    struct shared_ptr<adm::vp::detail::ProxyFactoryImplementation> mImplementation;
};

struct ProxyFactoryImplementation;

struct PublicFormatMap;

struct RemoteProcessingBlockBase {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct map<unsigned int, std::__1::shared_ptr<RemoteProcessingBlockItemBase>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::shared_ptr<RemoteProcessingBlockItemBase>>>> _field3;
};

struct SemanticSet {
    struct bitset<32> mBitset;
};

struct SimulateResponse {
    vector_51644792 _field1;
    vector_16e49d21 _field2;
};

struct SoftwareVolumeCatalog {
    struct map<unsigned long long, adm::vm::PortSoftwareVolumeCatalog, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, adm::vm::PortSoftwareVolumeCatalog>>> _field1;
    struct map<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int, std::__1::less<std::__1::tuple<unsigned long long, unsigned long long>>, std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>>> _field2;
    struct map<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int, std::__1::less<std::__1::tuple<unsigned long long, unsigned long long>>, std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>>> _field3;
    struct map<std::__1::tuple<unsigned long long, aura::AudioDirection>, unsigned int, std::__1::less<std::__1::tuple<unsigned long long, aura::AudioDirection>>, std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned long long, aura::AudioDirection>, unsigned int>>> _field4;
    struct map<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int, std::__1::less<std::__1::tuple<unsigned long long, unsigned long long>>, std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>>> _field5;
    struct map<std::__1::tuple<unsigned long long, aura::AudioDirection>, unsigned int, std::__1::less<std::__1::tuple<unsigned long long, aura::AudioDirection>>, std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned long long, aura::AudioDirection>, unsigned int>>> _field6;
};

struct StringRef {
    struct ObjectRef<const __CFString *> mObject;
};

struct TerminalDescription {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> mUID;
    int mDirection;
    struct StreamDescription {
        double mSampleRate;
        unsigned int mFormatID;
        unsigned int mFormatFlags;
        unsigned int mBytesPerPacket;
        unsigned int mFramesPerPacket;
        unsigned int mBytesPerFrame;
        unsigned int mChannelsPerFrame;
        unsigned int mBitsPerChannel;
        unsigned int mReserved;
    } mFormat;
    unsigned int mIndex;
    int mSourceMixPolicy;
    int mLatencyAdjustment;
    _Bool mEnableFileWriter;
};

struct UplinkConfiguration {
    int _field1;
    struct vector<adm::vp::UplinkNodeConfiguration, std::__1::allocator<adm::vp::UplinkNodeConfiguration>> _field2;
    unsigned int _field3;
    double _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    double _field8;
    unsigned int _field9;
    unsigned int _field10;
    unsigned int _field11;
    unsigned int _field12;
    unsigned int _field13;
};

struct UplinkNodeConfiguration;

struct VoiceProcessorConfiguration {
    struct UplinkConfiguration _field1;
    struct DownlinkConfiguration _field2;
    struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> _field3;
    struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> _field4;
};

struct VolumeCapabilites {
    unsigned int _field1;
    struct set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int>> _field2;
    struct set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int>> _field3;
    struct set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int>> _field4;
};

struct WireDescription {
    struct TerminalDescription mSource;
    struct TerminalDescription mDestination;
    struct SemanticSet mSemantics;
    _Bool mIsMixable;
    _Bool mVolumeProcessingEnabled;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*> *_field1;
};

struct __list_node_base<GraphState *, void *> {
    struct __list_node_base<GraphState *, void *> *__prev_;
    struct __list_node_base<GraphState *, void *> *__next_;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct any;

struct basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long long, unsigned long long, double, std::allocator, adl_serializer> {
    unsigned char _field1;
    union json_value _field2;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
};

struct bitset<32> {
    unsigned long long __first_;
};

struct duration<long long, std::__1::ratio<1, 1000>> {
    long long _field1;
};

struct error_category;

struct error_code {
    int _field1;
    struct error_category *_field2;
};

struct expected<bool, std::__1::error_code> {
    union constexpr_storage<bool, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<dspd::AdaptResponse, std::__1::error_code> {
    union storage<dspd::AdaptResponse, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<dspd::NegotiateResponse, std::__1::error_code> {
    union storage<dspd::NegotiateResponse, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<dspd::SimulateResponse, std::__1::error_code> {
    union storage<dspd::SimulateResponse, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<dspd::VolumeCapabilites, std::__1::error_code> {
    union storage<dspd::VolumeCapabilites, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<float, std::__1::error_code> {
    union constexpr_storage<float, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<std::__1::tuple<double, double>, std::__1::error_code> {
    union constexpr_storage<std::__1::tuple<double, double>, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<std::__1::tuple<unsigned int, unsigned int>, std::__1::error_code> {
    union constexpr_storage<std::__1::tuple<unsigned int, unsigned int>, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<std::__1::vector<dspd::PublicFormatMap, std::__1::allocator<dspd::PublicFormatMap>>, std::__1::error_code> {
    union storage<std::__1::vector<dspd::PublicFormatMap, std::__1::allocator<dspd::PublicFormatMap>>, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<unsigned int, std::__1::error_code> {
    union constexpr_storage<unsigned int, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<void, std::__1::error_code> {
    union constexpr_storage<void, std::__1::error_code> _field1;
    _Bool _field2;
};

struct function<void ()>;

struct function<void (adm::graph::InternalNode *)> {
    struct __value_func<void (adm::graph::InternalNode *)> {
        struct type _field1;
        struct __base<void (adm::graph::InternalNode *)> *_field2;
    } _field1;
};

struct function<void (std::__1::error_code)> {
    struct __value_func<void (std::__1::error_code)> {
        struct type _field1;
        struct __base<void (std::__1::error_code)> *_field2;
    } _field1;
};

struct function<void (std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>)> {
    struct __value_func<void (std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>)> {
        struct type _field1;
        struct __base<void (std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>)> *_field2;
    } _field1;
};

struct list<GraphState *, std::__1::allocator<GraphState *>> {
    struct __list_node_base<GraphState *, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<GraphState *, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct map<aura::PortType, adm::vm::VolumePolicy, std::__1::less<aura::PortType>, std::__1::allocator<std::__1::pair<const aura::PortType, adm::vm::VolumePolicy>>> {
    struct __tree<std::__1::__value_type<aura::PortType, adm::vm::VolumePolicy>, std::__1::__map_value_compare<aura::PortType, std::__1::__value_type<aura::PortType, adm::vm::VolumePolicy>, std::__1::less<aura::PortType>, true>, std::__1::allocator<std::__1::__value_type<aura::PortType, adm::vm::VolumePolicy>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<aura::PortType, adm::vm::VolumePolicy>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<aura::PortType, std::__1::__value_type<aura::PortType, adm::vm::VolumePolicy>, std::__1::less<aura::PortType>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long long, unsigned long long, double, std::allocator, adl_serializer>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long long, unsigned long long, double, std::allocator, adl_serializer>>>>;

struct map<std::__1::basic_string<char>, std::__1::weak_ptr<adm::graph::Node>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::weak_ptr<adm::graph::Node>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::weak_ptr<adm::graph::Node>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::weak_ptr<adm::graph::Node>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::weak_ptr<adm::graph::Node>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::weak_ptr<adm::graph::Node>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::weak_ptr<adm::graph::Node>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::tuple<unsigned long long, aura::AudioDirection>, unsigned int, std::__1::less<std::__1::tuple<unsigned long long, aura::AudioDirection>>, std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned long long, aura::AudioDirection>, unsigned int>>> {
    struct __tree<std::__1::__value_type<std::__1::tuple<unsigned long long, aura::AudioDirection>, unsigned int>, std::__1::__map_value_compare<std::__1::tuple<unsigned long long, aura::AudioDirection>, std::__1::__value_type<std::__1::tuple<unsigned long long, aura::AudioDirection>, unsigned int>, std::__1::less<std::__1::tuple<unsigned long long, aura::AudioDirection>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::tuple<unsigned long long, aura::AudioDirection>, unsigned int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::tuple<unsigned long long, aura::AudioDirection>, unsigned int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::tuple<unsigned long long, aura::AudioDirection>, std::__1::__value_type<std::__1::tuple<unsigned long long, aura::AudioDirection>, unsigned int>, std::__1::less<std::__1::tuple<unsigned long long, aura::AudioDirection>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int, std::__1::less<std::__1::tuple<unsigned long long, unsigned long long>>, std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>>> {
    struct __tree<std::__1::__value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, std::__1::__map_value_compare<std::__1::tuple<unsigned long long, unsigned long long>, std::__1::__value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, std::__1::less<std::__1::tuple<unsigned long long, unsigned long long>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::tuple<unsigned long long, unsigned long long>, std::__1::__value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, std::__1::less<std::__1::tuple<unsigned long long, unsigned long long>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned int, std::__1::shared_ptr<RemoteProcessingBlockItemBase>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::shared_ptr<RemoteProcessingBlockItemBase>>>> {
    struct __tree<std::__1::__value_type<unsigned int, std::__1::shared_ptr<RemoteProcessingBlockItemBase>>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::shared_ptr<RemoteProcessingBlockItemBase>>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::shared_ptr<RemoteProcessingBlockItemBase>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::shared_ptr<RemoteProcessingBlockItemBase>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::shared_ptr<RemoteProcessingBlockItemBase>>, std::__1::less<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned long long, adm::vm::PortSoftwareVolumeCatalog, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, adm::vm::PortSoftwareVolumeCatalog>>> {
    struct __tree<std::__1::__value_type<unsigned long long, adm::vm::PortSoftwareVolumeCatalog>, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, adm::vm::PortSoftwareVolumeCatalog>, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, adm::vm::PortSoftwareVolumeCatalog>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, adm::vm::PortSoftwareVolumeCatalog>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, adm::vm::PortSoftwareVolumeCatalog>, std::__1::less<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned long long, dspd::DeviceConfiguration, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, dspd::DeviceConfiguration>>> {
    struct __tree<std::__1::__value_type<unsigned long long, dspd::DeviceConfiguration>, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, dspd::DeviceConfiguration>, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, dspd::DeviceConfiguration>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, dspd::DeviceConfiguration>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, dspd::DeviceConfiguration>, std::__1::less<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct mutex {
    struct _opaque_pthread_mutex_t {
        long long __sig;
        char __opaque[56];
    } __m_;
};

struct object {
    NSObject<OS_dispatch_object> *fObj;
};

struct optional<AVAudioDSPFlavor>;

struct optional<AVAudioSessionActivationAccessibilityPreference> {
    CDUnion_5c9634bb ;
    _Bool __engaged_;
};

struct optional<AVAudioSessionActivationCallDirection> {
    CDUnion_5c9634bb ;
    _Bool __engaged_;
};

struct optional<adm::graph::VoiceProcessorConfiguration> {
    union {
        char _field1;
        struct VoiceProcessorConfiguration _field2;
    } _field1;
    _Bool _field2;
};

struct optional<adm::vm::VolumeCurve::TransferFunction> {
    CDUnion_0506adf3 _field1;
    _Bool _field2;
};

struct optional<adm::vm::VolumeMode> {
    CDUnion_0506adf3 _field1;
    _Bool _field2;
};

struct optional<adm::vp::ProxyFactory> {
    union {
        char __null_state_;
        struct ProxyFactory __val_;
    } ;
    _Bool __engaged_;
};

struct optional<applesauce::CF::StringRef> {
    union {
        char __null_state_;
        struct StringRef __val_;
    } ;
    _Bool __engaged_;
};

struct optional<aura::AudioFormat>;

struct optional<aura::InitiationTriggerSpecification> {
    union {
        char __null_state_;
        struct InitiationTriggerSpecification __val_;
    } ;
    _Bool __engaged_;
};

struct optional<aura::MicrophoneConfiguration> {
    union {
        char _field1;
        struct MicrophoneConfiguration _field2;
    } _field1;
    _Bool _field2;
};

struct optional<double> {
    union {
        char _field1;
        double _field2;
    } _field1;
    _Bool _field2;
};

struct optional<dspd::IOControllerTopology> {
    union {
        char _field1;
        struct IOControllerTopology _field2;
    } _field1;
    _Bool _field2;
};

struct optional<std::__1::vector<aura::MicrophoneConfiguration, std::__1::allocator<aura::MicrophoneConfiguration>>> {
    union {
        char _field1;
        vector_28162c3a _field2;
    } _field1;
    _Bool _field2;
};

struct optional<std::__1::vector<aura::MicrophonePreference, std::__1::allocator<aura::MicrophonePreference>>> {
    union {
        char __null_state_;
        struct vector<aura::MicrophonePreference, std::__1::allocator<aura::MicrophonePreference>> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::__1::vector<float, std::__1::allocator<float>>> {
    union {
        char _field1;
        struct vector<float, std::__1::allocator<float>> _field2;
    } _field1;
    _Bool _field2;
};

struct optional<std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>> {
    union {
        char _field1;
        struct vector<unsigned int, std::__1::allocator<unsigned int>> _field2;
    } _field1;
    _Bool _field2;
};

struct optional<unsigned int> {
    union {
        char _field1;
        unsigned int _field2;
    } _field1;
    _Bool _field2;
};

struct optional<unsigned long long> {
    CDUnion_5c9634bb _field1;
    _Bool _field2;
};

struct pair<unsigned long long, dspd::AdaptResponse::CaptureStatus>;

struct queue {
    struct object fObj;
};

struct set<AMCP::Wire_Description, std::__1::less<AMCP::Wire_Description>, std::__1::allocator<AMCP::Wire_Description>> {
    struct __tree<AMCP::Wire_Description, std::__1::less<AMCP::Wire_Description>, std::__1::allocator<AMCP::Wire_Description>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<AMCP::Wire_Description, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<AMCP::Wire_Description>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<AMCP::Wire_Identifier, std::__1::less<AMCP::Wire_Identifier>, std::__1::allocator<AMCP::Wire_Identifier>> {
    struct __tree<AMCP::Wire_Identifier, std::__1::less<AMCP::Wire_Identifier>, std::__1::allocator<AMCP::Wire_Identifier>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<AMCP::Wire_Identifier, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<AMCP::Wire_Identifier>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<dspd::IOControllerNodeConfiguration, std::__1::less<dspd::IOControllerNodeConfiguration>, std::__1::allocator<dspd::IOControllerNodeConfiguration>> {
    struct __tree<dspd::IOControllerNodeConfiguration, std::__1::less<dspd::IOControllerNodeConfiguration>, std::__1::allocator<dspd::IOControllerNodeConfiguration>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<dspd::IOControllerNodeConfiguration, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<dspd::IOControllerNodeConfiguration>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<dspd::IOControllerTopology::IOStreamMapping, std::__1::less<dspd::IOControllerTopology::IOStreamMapping>, std::__1::allocator<dspd::IOControllerTopology::IOStreamMapping>> {
    struct __tree<dspd::IOControllerTopology::IOStreamMapping, std::__1::less<dspd::IOControllerTopology::IOStreamMapping>, std::__1::allocator<dspd::IOControllerTopology::IOStreamMapping>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<dspd::IOControllerTopology::IOStreamMapping, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<dspd::IOControllerTopology::IOStreamMapping>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<dspd::IOControllerTopology::StreamLoopbackMapping, std::__1::less<dspd::IOControllerTopology::StreamLoopbackMapping>, std::__1::allocator<dspd::IOControllerTopology::StreamLoopbackMapping>> {
    struct __tree<dspd::IOControllerTopology::StreamLoopbackMapping, std::__1::less<dspd::IOControllerTopology::StreamLoopbackMapping>, std::__1::allocator<dspd::IOControllerTopology::StreamLoopbackMapping>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<dspd::IOControllerTopology::StreamLoopbackMapping, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<dspd::IOControllerTopology::StreamLoopbackMapping>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<dspd::NodeConfiguration, std::__1::less<dspd::NodeConfiguration>, std::__1::allocator<dspd::NodeConfiguration>> {
    struct __tree<dspd::NodeConfiguration, std::__1::less<dspd::NodeConfiguration>, std::__1::allocator<dspd::NodeConfiguration>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<dspd::NodeConfiguration, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<dspd::NodeConfiguration>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct __tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char>>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int>> {
    struct __tree<unsigned int, std::__1::less<unsigned int>, std::__1::allocator<unsigned int>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<unsigned int, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<unsigned int>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long>> {
    struct __tree<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<unsigned long long, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<unsigned long long>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct shared_ptr<AudioNotification::BusStation> {
    struct BusStation *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<AudioNotification::DynamicBus> {
    struct DynamicBus *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<adm::graph::Node>;

struct shared_ptr<adm::graph::ParameterStorageInterface> {
    struct ParameterStorageInterface *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<adm::graph::PropertyStorageInterface> {
    struct PropertyStorageInterface *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<adm::graph::Wire>;

struct shared_ptr<adm::vp::detail::ProxyFactoryImplementation> {
    struct ProxyFactoryImplementation *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>;

struct tuple<double, double> {
    struct __tuple_impl<std::__1::__tuple_indices<0, 1>, double, double> {
        double _field1;
        double _field2;
    } _field1;
};

struct tuple<unsigned int, unsigned int> {
    struct __tuple_impl<std::__1::__tuple_indices<0, 1>, unsigned int, unsigned int> {
        unsigned int _field1;
        unsigned int _field2;
    } _field1;
};

struct type {
    unsigned char _field1[32];
};

struct unique_ptr<adm::MutateGraph, std::__1::default_delete<adm::MutateGraph>> {
    struct __compressed_pair<adm::MutateGraph *, std::__1::default_delete<adm::MutateGraph>> {
        struct MutateGraph *__value_;
    } __ptr_;
};

struct unique_ptr<adm::graph::Graph, std::__1::default_delete<adm::graph::Graph>> {
    struct __compressed_pair<adm::graph::Graph *, std::__1::default_delete<adm::graph::Graph>> {
        struct Graph *__value_;
    } __ptr_;
};

struct unique_ptr<adm::graph::GraphBuilder, std::__1::default_delete<adm::graph::GraphBuilder>> {
    struct __compressed_pair<adm::graph::GraphBuilder *, std::__1::default_delete<adm::graph::GraphBuilder>> {
        struct GraphBuilder *__value_;
    } __ptr_;
};

struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>>;

struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>>>;

struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>>;

struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>>;

struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>>;

struct unique_ptr<adm::graph::KnobController, std::__1::default_delete<adm::graph::KnobController>> {
    struct __compressed_pair<adm::graph::KnobController *, std::__1::default_delete<adm::graph::KnobController>> {
        struct KnobController *_field1;
    } _field1;
};

struct unique_ptr<dspd::StreamDescription, std::__1::default_delete<dspd::StreamDescription>> {
    struct __compressed_pair<dspd::StreamDescription *, std::__1::default_delete<dspd::StreamDescription>> {
        struct StreamDescription *__value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unordered_map<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::DSPGraphConfiguration>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NTuple<adm::graph::TerminalDirection, std::__1::unordered_map<adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint, std::__1::hash<::adm::graph::Semantic>, std::__1::equal_to<adm::graph::Semantic>, std::__1::allocator<std::__1::pair<const adm::graph::Semantic, adm::graph::GraphBuilder::FormatHint>>>, 2, void>>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::basic_string<char>, adm::graph::NodeContext, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, adm::graph::NodeContext>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, adm::graph::NodeContext>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int, adm::MicConfigIdentifierHasher, std::__1::equal_to<std::__1::tuple<unsigned long long, unsigned long long>>, std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, std::__1::__unordered_map_hasher<std::__1::tuple<unsigned long long, unsigned long long>, std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, adm::MicConfigIdentifierHasher, true>, std::__1::__unordered_map_equal<std::__1::tuple<unsigned long long, unsigned long long>, std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, std::__1::equal_to<std::__1::tuple<unsigned long long, unsigned long long>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::tuple<unsigned long long, unsigned long long>, std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, adm::MicConfigIdentifierHasher, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::tuple<unsigned long long, unsigned long long>, std::__1::__hash_value_type<std::__1::tuple<unsigned long long, unsigned long long>, unsigned int>, std::__1::equal_to<std::__1::tuple<unsigned long long, unsigned long long>>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned int, adm::graph::ParameterStorageWriter, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, adm::graph::ParameterStorageWriter>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, std::__1::hash<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, adm::graph::ParameterStorageWriter>, std::__1::equal_to<unsigned int>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned int, adm::graph::PropertyStorageWriter, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, adm::graph::PropertyStorageWriter>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, std::__1::hash<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, adm::graph::PropertyStorageWriter>, std::__1::equal_to<unsigned int>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned int, id<dspd_ConfigurationChangeRequest>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, id<dspd_ConfigurationChangeRequest>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::hash<unsigned int>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, id<dspd_ConfigurationChangeRequest>>, std::__1::equal_to<unsigned int>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, std::__1::hash<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, aura::AudioDirection>>, std::__1::equal_to<unsigned int>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned int, std::__1::tuple<unsigned long long, unsigned int>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::tuple<unsigned long long, unsigned int>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, std::__1::hash<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::tuple<unsigned long long, unsigned int>>, std::__1::equal_to<unsigned int>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, std::__1::hash<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::LevelControl, std::__1::default_delete<adm::vm::LevelControl>>>, std::__1::equal_to<unsigned int>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, std::__1::hash<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::MuteControl, std::__1::default_delete<adm::vm::MuteControl>>>, std::__1::equal_to<unsigned int>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, std::__1::hash<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<adm::vm::PanControl, std::__1::default_delete<adm::vm::PanControl>>>, std::__1::equal_to<unsigned int>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long long, IOControllerState, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, IOControllerState>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, IOControllerState>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, IOControllerState>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, IOControllerState>, std::__1::equal_to<unsigned long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, adm::vm::Port, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, adm::vm::Port>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, adm::vm::Port>, std::__1::equal_to<unsigned long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct __hash_table<std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::basic_string<char>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::basic_string<char>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<std::__1::basic_string<char>>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<std::__1::basic_string<char>>> {
            float _field1;
        } _field4;
    } _field1;
};

struct vector<adm::graph::NodeDescription, std::__1::allocator<adm::graph::NodeDescription>> {
    struct NodeDescription *__begin_;
    struct NodeDescription *__end_;
    struct __compressed_pair<adm::graph::NodeDescription *, std::__1::allocator<adm::graph::NodeDescription>> {
        struct NodeDescription *__value_;
    } __end_cap_;
};

struct vector<adm::graph::WireDescription, std::__1::allocator<adm::graph::WireDescription>> {
    struct WireDescription *__begin_;
    struct WireDescription *__end_;
    struct __compressed_pair<adm::graph::WireDescription *, std::__1::allocator<adm::graph::WireDescription>> {
        struct WireDescription *__value_;
    } __end_cap_;
};

struct vector<adm::vp::DownlinkNodeConfiguration, std::__1::allocator<adm::vp::DownlinkNodeConfiguration>> {
    struct DownlinkNodeConfiguration *_field1;
    struct DownlinkNodeConfiguration *_field2;
    struct __compressed_pair<adm::vp::DownlinkNodeConfiguration *, std::__1::allocator<adm::vp::DownlinkNodeConfiguration>> {
        struct DownlinkNodeConfiguration *_field1;
    } _field3;
};

struct vector<adm::vp::UplinkNodeConfiguration, std::__1::allocator<adm::vp::UplinkNodeConfiguration>> {
    struct UplinkNodeConfiguration *_field1;
    struct UplinkNodeConfiguration *_field2;
    struct __compressed_pair<adm::vp::UplinkNodeConfiguration *, std::__1::allocator<adm::vp::UplinkNodeConfiguration>> {
        struct UplinkNodeConfiguration *_field1;
    } _field3;
};

struct vector<aura::MicrophoneConfiguration, std::__1::allocator<aura::MicrophoneConfiguration>> {
    struct MicrophoneConfiguration *_field1;
    struct MicrophoneConfiguration *_field2;
    struct __compressed_pair<aura::MicrophoneConfiguration *, std::__1::allocator<aura::MicrophoneConfiguration>> {
        struct MicrophoneConfiguration *_field1;
    } _field3;
};

struct vector<aura::MicrophonePolarPattern, std::__1::allocator<aura::MicrophonePolarPattern>> {
    unsigned int *_field1;
    unsigned int *_field2;
    struct __compressed_pair<aura::MicrophonePolarPattern *, std::__1::allocator<aura::MicrophonePolarPattern>> {
        unsigned int *_field1;
    } _field3;
};

struct vector<aura::MicrophonePreference, std::__1::allocator<aura::MicrophonePreference>> {
    struct MicrophonePreference *__begin_;
    struct MicrophonePreference *__end_;
    struct __compressed_pair<aura::MicrophonePreference *, std::__1::allocator<aura::MicrophonePreference>> {
        struct MicrophonePreference *__value_;
    } __end_cap_;
};

struct vector<dspd::DeviceConfiguration, std::__1::allocator<dspd::DeviceConfiguration>> {
    struct DeviceConfiguration *_field1;
    struct DeviceConfiguration *_field2;
    struct __compressed_pair<dspd::DeviceConfiguration *, std::__1::allocator<dspd::DeviceConfiguration>> {
        struct DeviceConfiguration *_field1;
    } _field3;
};

struct vector<dspd::DeviceDescription, std::__1::allocator<dspd::DeviceDescription>> {
    struct DeviceDescription *__begin_;
    struct DeviceDescription *__end_;
    struct __compressed_pair<dspd::DeviceDescription *, std::__1::allocator<dspd::DeviceDescription>> {
        struct DeviceDescription *__value_;
    } __end_cap_;
};

struct vector<dspd::IOControllerConfiguration, std::__1::allocator<dspd::IOControllerConfiguration>> {
    struct IOControllerConfiguration *_field1;
    struct IOControllerConfiguration *_field2;
    struct __compressed_pair<dspd::IOControllerConfiguration *, std::__1::allocator<dspd::IOControllerConfiguration>> {
        struct IOControllerConfiguration *_field1;
    } _field3;
};

struct vector<dspd::IOControllerDescription, std::__1::allocator<dspd::IOControllerDescription>> {
    struct IOControllerDescription *__begin_;
    struct IOControllerDescription *__end_;
    struct __compressed_pair<dspd::IOControllerDescription *, std::__1::allocator<dspd::IOControllerDescription>> {
        struct IOControllerDescription *__value_;
    } __end_cap_;
};

struct vector<dspd::IOControllerProjection, std::__1::allocator<dspd::IOControllerProjection>> {
    struct IOControllerProjection *_field1;
    struct IOControllerProjection *_field2;
    struct __compressed_pair<dspd::IOControllerProjection *, std::__1::allocator<dspd::IOControllerProjection>> {
        struct IOControllerProjection *_field1;
    } _field3;
};

struct vector<dspd::IOStreamConfiguration, std::__1::allocator<dspd::IOStreamConfiguration>> {
    struct IOStreamConfiguration *_field1;
    struct IOStreamConfiguration *_field2;
    struct __compressed_pair<dspd::IOStreamConfiguration *, std::__1::allocator<dspd::IOStreamConfiguration>> {
        struct IOStreamConfiguration *_field1;
    } _field3;
};

struct vector<dspd::PortDescription, std::__1::allocator<dspd::PortDescription>> {
    struct PortDescription *__begin_;
    struct PortDescription *__end_;
    struct __compressed_pair<dspd::PortDescription *, std::__1::allocator<dspd::PortDescription>> {
        struct PortDescription *__value_;
    } __end_cap_;
};

struct vector<dspd::PortRecord<bool>, std::__1::allocator<dspd::PortRecord<bool>>> {
    struct PortRecord<bool> *_field1;
    struct PortRecord<bool> *_field2;
    struct __compressed_pair<dspd::PortRecord<bool>*, std::__1::allocator<dspd::PortRecord<bool>>> {
        struct PortRecord<bool> *_field1;
    } _field3;
};

struct vector<dspd::PortRecord<float>, std::__1::allocator<dspd::PortRecord<float>>> {
    struct PortRecord<float> *_field1;
    struct PortRecord<float> *_field2;
    struct __compressed_pair<dspd::PortRecord<float>*, std::__1::allocator<dspd::PortRecord<float>>> {
        struct PortRecord<float> *_field1;
    } _field3;
};

struct vector<dspd::PublicFormatMap, std::__1::allocator<dspd::PublicFormatMap>> {
    struct PublicFormatMap *_field1;
    struct PublicFormatMap *_field2;
    struct __compressed_pair<dspd::PublicFormatMap *, std::__1::allocator<dspd::PublicFormatMap>> {
        struct PublicFormatMap *_field1;
    } _field3;
};

struct vector<dspd::StreamDescription, std::__1::allocator<dspd::StreamDescription>> {
    struct StreamDescription *__begin_;
    struct StreamDescription *__end_;
    struct __compressed_pair<dspd::StreamDescription *, std::__1::allocator<dspd::StreamDescription>> {
        struct StreamDescription *__value_;
    } __end_cap_;
};

struct vector<dspd::VolumeUpdateResult, std::__1::allocator<dspd::VolumeUpdateResult>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<dspd::VolumeUpdateResult *, std::__1::allocator<dspd::VolumeUpdateResult>> {
        int *_field1;
    } _field3;
};

struct vector<float, std::__1::allocator<float>> {
    float *_field1;
    float *_field2;
    struct __compressed_pair<float *, std::__1::allocator<float>> {
        float *_field1;
    } _field3;
};

struct vector<id<dspd_ConfigurationChangeRequest>, std::__1::allocator<id<dspd_ConfigurationChangeRequest>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__strong id<dspd_ConfigurationChangeRequest>*, std::__1::allocator<id<dspd_ConfigurationChangeRequest>>> {
        id *_field1;
    } _field3;
};

struct vector<nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long long, unsigned long long, double, std::allocator, adl_serializer>, std::__1::allocator<nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long long, unsigned long long, double, std::allocator, adl_serializer>>>;

struct vector<std::__1::any, std::__1::allocator<std::__1::any>> {
    struct any *__begin_;
    struct any *__end_;
    struct __compressed_pair<std::__1::any *, std::__1::allocator<std::__1::any>> {
        struct any *__value_;
    } __end_cap_;
};

struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_field2;
    struct __compressed_pair<std::__1::basic_string<char>*, std::__1::allocator<std::__1::basic_string<char>>> {
        struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_field1;
    } _field3;
};

struct vector<std::__1::function<void ()>, std::__1::allocator<std::__1::function<void ()>>> {
    struct function<void ()> *_field1;
    struct function<void ()> *_field2;
    struct __compressed_pair<std::__1::function<void ()>*, std::__1::allocator<std::__1::function<void ()>>> {
        struct function<void ()> *_field1;
    } _field3;
};

struct vector<std::__1::optional<AVAudioDSPFlavor>, std::__1::allocator<std::__1::optional<AVAudioDSPFlavor>>> {
    struct optional<AVAudioDSPFlavor> *_field1;
    struct optional<AVAudioDSPFlavor> *_field2;
    struct __compressed_pair<std::__1::optional<AVAudioDSPFlavor>*, std::__1::allocator<std::__1::optional<AVAudioDSPFlavor>>> {
        struct optional<AVAudioDSPFlavor> *_field1;
    } _field3;
};

struct vector<std::__1::optional<aura::AudioFormat>, std::__1::allocator<std::__1::optional<aura::AudioFormat>>> {
    struct optional<aura::AudioFormat> *_field1;
    struct optional<aura::AudioFormat> *_field2;
    struct __compressed_pair<std::__1::optional<aura::AudioFormat>*, std::__1::allocator<std::__1::optional<aura::AudioFormat>>> {
        struct optional<aura::AudioFormat> *_field1;
    } _field3;
};

struct vector<std::__1::pair<unsigned long long, dspd::AdaptResponse::CaptureStatus>, std::__1::allocator<std::__1::pair<unsigned long long, dspd::AdaptResponse::CaptureStatus>>> {
    struct pair<unsigned long long, dspd::AdaptResponse::CaptureStatus> *_field1;
    struct pair<unsigned long long, dspd::AdaptResponse::CaptureStatus> *_field2;
    struct __compressed_pair<std::__1::pair<unsigned long long, dspd::AdaptResponse::CaptureStatus>*, std::__1::allocator<std::__1::pair<unsigned long long, dspd::AdaptResponse::CaptureStatus>>> {
        struct pair<unsigned long long, dspd::AdaptResponse::CaptureStatus> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<adm::graph::Node>, std::__1::allocator<std::__1::shared_ptr<adm::graph::Node>>> {
    struct shared_ptr<adm::graph::Node> *_field1;
    struct shared_ptr<adm::graph::Node> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<adm::graph::Node>*, std::__1::allocator<std::__1::shared_ptr<adm::graph::Node>>> {
        struct shared_ptr<adm::graph::Node> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<adm::graph::Wire>, std::__1::allocator<std::__1::shared_ptr<adm::graph::Wire>>> {
    struct shared_ptr<adm::graph::Wire> *_field1;
    struct shared_ptr<adm::graph::Wire> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<adm::graph::Wire>*, std::__1::allocator<std::__1::shared_ptr<adm::graph::Wire>>> {
        struct shared_ptr<adm::graph::Wire> *_field1;
    } _field3;
};

struct vector<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>, std::__1::allocator<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>>> {
    struct tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>> *_field1;
    struct tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>> *_field2;
    struct __compressed_pair<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>*, std::__1::allocator<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>>> {
        struct tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>> *_field1;
    } _field3;
};

struct vector<std::__1::tuple<double, double>, std::__1::allocator<std::__1::tuple<double, double>>> {
    struct tuple<double, double> *__begin_;
    struct tuple<double, double> *__end_;
    struct __compressed_pair<std::__1::tuple<double, double>*, std::__1::allocator<std::__1::tuple<double, double>>> {
        struct tuple<double, double> *__value_;
    } __end_cap_;
};

struct vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>>>> {
    struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>> *_field1;
    struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>> *_field2;
    struct __compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>>*, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>>>> {
        struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Fader, adm::graph::FaderKnobValueType>>> *_field1;
    } _field3;
};

struct vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>>>>> {
    struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>>> *_field1;
    struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>>> *_field2;
    struct __compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>>>*, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>>>>> {
        struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Generic, std::__1::basic_string<char>>>> *_field1;
    } _field3;
};

struct vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>>>> {
    struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>> *_field1;
    struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>> *_field2;
    struct __compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>>*, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>>>> {
        struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Mute, bool>>> *_field1;
    } _field3;
};

struct vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>>>> {
    struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>> *_field1;
    struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>> *_field2;
    struct __compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>>*, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>>>> {
        struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Pan, float>>> *_field1;
    } _field3;
};

struct vector<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>>, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>>>> {
    struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>> *_field1;
    struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>> *_field2;
    struct __compressed_pair<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>>*, std::__1::allocator<std::__1::unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>>>> {
        struct unique_ptr<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>, std::__1::default_delete<adm::graph::GraphKnob<adm::graph::KnobGroup::Volume, adm::graph::VolumeKnobValueType>>> *_field1;
    } _field3;
};

struct vector<unsigned int, std::__1::allocator<unsigned int>> {
    unsigned int *_field1;
    unsigned int *_field2;
    struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
        unsigned int *_field1;
    } _field3;
};

struct vector<unsigned long long, std::__1::allocator<unsigned long long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long long, unsigned long long, double, std::allocator, adl_serializer> {
    unsigned char _field1;
    union json_value _field2;
} basic_json_058021e8;

typedef struct duration<long long, std::__1::ratio<1, 1000>> {
    long long _field1;
} duration_34584d68;

typedef struct expected<bool, std::__1::error_code> {
    union constexpr_storage<bool, std::__1::error_code> _field1;
    _Bool _field2;
} expected_1e8b1ea0;

typedef struct expected<dspd::AdaptResponse, std::__1::error_code> {
    union storage<dspd::AdaptResponse, std::__1::error_code> _field1;
    _Bool _field2;
} expected_0910f26e;

typedef struct expected<dspd::NegotiateResponse, std::__1::error_code> {
    union storage<dspd::NegotiateResponse, std::__1::error_code> _field1;
    _Bool _field2;
} expected_2b9a0a05;

typedef struct expected<dspd::SimulateResponse, std::__1::error_code> {
    union storage<dspd::SimulateResponse, std::__1::error_code> _field1;
    _Bool _field2;
} expected_af0f637c;

typedef struct expected<dspd::VolumeCapabilites, std::__1::error_code> {
    union storage<dspd::VolumeCapabilites, std::__1::error_code> _field1;
    _Bool _field2;
} expected_336b2855;

typedef struct expected<float, std::__1::error_code> {
    union constexpr_storage<float, std::__1::error_code> _field1;
    _Bool _field2;
} expected_60ac6007;

typedef struct expected<std::__1::tuple<double, double>, std::__1::error_code> {
    union constexpr_storage<std::__1::tuple<double, double>, std::__1::error_code> _field1;
    _Bool _field2;
} expected_5f904053;

typedef struct expected<std::__1::tuple<unsigned int, unsigned int>, std::__1::error_code> {
    union constexpr_storage<std::__1::tuple<unsigned int, unsigned int>, std::__1::error_code> _field1;
    _Bool _field2;
} expected_ea5d568f;

typedef struct expected<std::__1::vector<dspd::PublicFormatMap, std::__1::allocator<dspd::PublicFormatMap>>, std::__1::error_code> {
    union storage<std::__1::vector<dspd::PublicFormatMap, std::__1::allocator<dspd::PublicFormatMap>>, std::__1::error_code> _field1;
    _Bool _field2;
} expected_27549f77;

typedef struct expected<unsigned int, std::__1::error_code> {
    union constexpr_storage<unsigned int, std::__1::error_code> _field1;
    _Bool _field2;
} expected_24968c28;

typedef struct expected<void, std::__1::error_code> {
    union constexpr_storage<void, std::__1::error_code> _field1;
    _Bool _field2;
} expected_025c1a52;

typedef struct function<void (std::__1::error_code)> {
    struct __value_func<void (std::__1::error_code)> {
        struct type _field1;
        struct __base<void (std::__1::error_code)> *_field2;
    } _field1;
} function_f5b89e9d;

typedef struct function<void (std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>)> {
    struct __value_func<void (std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>)> {
        struct type _field1;
        struct __base<void (std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>)> *_field2;
    } _field1;
} function_71b6729b;

typedef struct map<aura::PortType, adm::vm::VolumePolicy, std::__1::less<aura::PortType>, std::__1::allocator<std::__1::pair<const aura::PortType, adm::vm::VolumePolicy>>> {
    struct __tree<std::__1::__value_type<aura::PortType, adm::vm::VolumePolicy>, std::__1::__map_value_compare<aura::PortType, std::__1::__value_type<aura::PortType, adm::vm::VolumePolicy>, std::__1::less<aura::PortType>, true>, std::__1::allocator<std::__1::__value_type<aura::PortType, adm::vm::VolumePolicy>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<aura::PortType, adm::vm::VolumePolicy>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<aura::PortType, std::__1::__value_type<aura::PortType, adm::vm::VolumePolicy>, std::__1::less<aura::PortType>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
} map_2bb803d6;

typedef struct map<unsigned long long, dspd::DeviceConfiguration, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, dspd::DeviceConfiguration>>> {
    struct __tree<std::__1::__value_type<unsigned long long, dspd::DeviceConfiguration>, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, dspd::DeviceConfiguration>, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, dspd::DeviceConfiguration>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, dspd::DeviceConfiguration>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, dspd::DeviceConfiguration>, std::__1::less<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
} map_f66a05a9;

typedef struct optional<adm::vm::VolumeCurve::TransferFunction> {
    CDUnion_0506adf3 _field1;
    _Bool _field2;
} optional_f29defcb;

typedef struct optional<adm::vm::VolumeMode> {
    CDUnion_0506adf3 _field1;
    _Bool _field2;
} optional_b0ed8b79;

typedef struct optional<aura::InitiationTriggerSpecification> {
    union {
        char __null_state_;
        struct InitiationTriggerSpecification __val_;
    } ;
    _Bool __engaged_;
} optional_b75ce017;

typedef struct optional<aura::MicrophoneConfiguration> {
    union {
        char _field1;
        struct MicrophoneConfiguration _field2;
    } _field1;
    _Bool _field2;
} optional_95a1d2b1;

typedef struct optional<std::__1::vector<aura::MicrophoneConfiguration, std::__1::allocator<aura::MicrophoneConfiguration>>> {
    union {
        char _field1;
        vector_28162c3a _field2;
    } _field1;
    _Bool _field2;
} optional_4a6ac3f9;

typedef struct optional<std::__1::vector<aura::MicrophonePreference, std::__1::allocator<aura::MicrophonePreference>>> {
    union {
        char __null_state_;
        struct vector<aura::MicrophonePreference, std::__1::allocator<aura::MicrophonePreference>> __val_;
    } ;
    _Bool __engaged_;
} optional_74709a54;

typedef struct optional<unsigned long long> {
    CDUnion_5c9634bb _field1;
    _Bool _field2;
} optional_5c48748e;

typedef struct set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long>> {
    struct __tree<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<unsigned long long, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<unsigned long long>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
} set_6185be97;

typedef struct shared_ptr<AudioNotification::BusStation> {
    struct BusStation *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_ea97fd03;

typedef struct shared_ptr<AudioNotification::DynamicBus> {
    struct DynamicBus *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_59c89e86;

typedef struct unique_ptr<adm::graph::Graph, std::__1::default_delete<adm::graph::Graph>> {
    struct __compressed_pair<adm::graph::Graph *, std::__1::default_delete<adm::graph::Graph>> {
        struct Graph *__value_;
    } __ptr_;
} unique_ptr_8b09088b;

typedef struct unordered_map<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<NSString *, std::__1::allocator<NSString *>>>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_9e6f8272;

typedef struct vector<aura::MicrophoneConfiguration, std::__1::allocator<aura::MicrophoneConfiguration>> {
    struct MicrophoneConfiguration *_field1;
    struct MicrophoneConfiguration *_field2;
    struct __compressed_pair<aura::MicrophoneConfiguration *, std::__1::allocator<aura::MicrophoneConfiguration>> {
        struct MicrophoneConfiguration *_field1;
    } _field3;
} vector_28162c3a;

typedef struct vector<dspd::DeviceConfiguration, std::__1::allocator<dspd::DeviceConfiguration>> {
    struct DeviceConfiguration *_field1;
    struct DeviceConfiguration *_field2;
    struct __compressed_pair<dspd::DeviceConfiguration *, std::__1::allocator<dspd::DeviceConfiguration>> {
        struct DeviceConfiguration *_field1;
    } _field3;
} vector_16e49d21;

typedef struct vector<dspd::DeviceDescription, std::__1::allocator<dspd::DeviceDescription>> {
    struct DeviceDescription *__begin_;
    struct DeviceDescription *__end_;
    struct __compressed_pair<dspd::DeviceDescription *, std::__1::allocator<dspd::DeviceDescription>> {
        struct DeviceDescription *__value_;
    } __end_cap_;
} vector_123a35f9;

typedef struct vector<dspd::IOControllerConfiguration, std::__1::allocator<dspd::IOControllerConfiguration>> {
    struct IOControllerConfiguration *_field1;
    struct IOControllerConfiguration *_field2;
    struct __compressed_pair<dspd::IOControllerConfiguration *, std::__1::allocator<dspd::IOControllerConfiguration>> {
        struct IOControllerConfiguration *_field1;
    } _field3;
} vector_51644792;

typedef struct vector<dspd::IOControllerDescription, std::__1::allocator<dspd::IOControllerDescription>> {
    struct IOControllerDescription *__begin_;
    struct IOControllerDescription *__end_;
    struct __compressed_pair<dspd::IOControllerDescription *, std::__1::allocator<dspd::IOControllerDescription>> {
        struct IOControllerDescription *__value_;
    } __end_cap_;
} vector_b9981e18;

typedef struct vector<dspd::IOStreamConfiguration, std::__1::allocator<dspd::IOStreamConfiguration>> {
    struct IOStreamConfiguration *_field1;
    struct IOStreamConfiguration *_field2;
    struct __compressed_pair<dspd::IOStreamConfiguration *, std::__1::allocator<dspd::IOStreamConfiguration>> {
        struct IOStreamConfiguration *_field1;
    } _field3;
} vector_093d5485;

typedef struct vector<dspd::PortDescription, std::__1::allocator<dspd::PortDescription>> {
    struct PortDescription *__begin_;
    struct PortDescription *__end_;
    struct __compressed_pair<dspd::PortDescription *, std::__1::allocator<dspd::PortDescription>> {
        struct PortDescription *__value_;
    } __end_cap_;
} vector_66ffd461;

typedef struct vector<dspd::PortRecord<bool>, std::__1::allocator<dspd::PortRecord<bool>>> {
    struct PortRecord<bool> *_field1;
    struct PortRecord<bool> *_field2;
    struct __compressed_pair<dspd::PortRecord<bool>*, std::__1::allocator<dspd::PortRecord<bool>>> {
        struct PortRecord<bool> *_field1;
    } _field3;
} vector_a93e9522;

typedef struct vector<dspd::PortRecord<float>, std::__1::allocator<dspd::PortRecord<float>>> {
    struct PortRecord<float> *_field1;
    struct PortRecord<float> *_field2;
    struct __compressed_pair<dspd::PortRecord<float>*, std::__1::allocator<dspd::PortRecord<float>>> {
        struct PortRecord<float> *_field1;
    } _field3;
} vector_df89e1f1;

typedef struct vector<dspd::StreamDescription, std::__1::allocator<dspd::StreamDescription>> {
    struct StreamDescription *__begin_;
    struct StreamDescription *__end_;
    struct __compressed_pair<dspd::StreamDescription *, std::__1::allocator<dspd::StreamDescription>> {
        struct StreamDescription *__value_;
    } __end_cap_;
} vector_d1b3d51b;

typedef struct vector<dspd::VolumeUpdateResult, std::__1::allocator<dspd::VolumeUpdateResult>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<dspd::VolumeUpdateResult *, std::__1::allocator<dspd::VolumeUpdateResult>> {
        int *_field1;
    } _field3;
} vector_e9e5d60e;

typedef struct vector<id<dspd_ConfigurationChangeRequest>, std::__1::allocator<id<dspd_ConfigurationChangeRequest>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__strong id<dspd_ConfigurationChangeRequest>*, std::__1::allocator<id<dspd_ConfigurationChangeRequest>>> {
        id *_field1;
    } _field3;
} vector_d47d98e2;

typedef struct vector<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>, std::__1::allocator<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>>> {
    struct tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>> *_field1;
    struct tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>> *_field2;
    struct __compressed_pair<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>*, std::__1::allocator<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>>> {
        struct tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>> *_field1;
    } _field3;
} vector_fefeec75;

typedef struct vector<unsigned long long, std::__1::allocator<unsigned long long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long>> {
        unsigned long long *__value_;
    } __end_cap_;
} vector_7984f87c;

#pragma mark Named Unions

union constexpr_storage<bool, std::__1::error_code> {
    char _field1;
    _Bool _field2;
    struct error_code _field3;
};

union constexpr_storage<float, std::__1::error_code> {
    char _field1;
    float _field2;
    struct error_code _field3;
};

union constexpr_storage<std::__1::tuple<double, double>, std::__1::error_code> {
    char _field1;
    struct tuple<double, double> _field2;
    struct error_code _field3;
};

union constexpr_storage<std::__1::tuple<unsigned int, unsigned int>, std::__1::error_code> {
    char _field1;
    struct tuple<unsigned int, unsigned int> _field2;
    struct error_code _field3;
};

union constexpr_storage<unsigned int, std::__1::error_code> {
    char _field1;
    unsigned int _field2;
    struct error_code _field3;
};

union constexpr_storage<void, std::__1::error_code> {
    char _field1;
    struct error_code _field2;
};

union json_value {
    struct map<std::__1::basic_string<char>, nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long long, unsigned long long, double, std::allocator, adl_serializer>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long long, unsigned long long, double, std::allocator, adl_serializer>>>> *_field1;
    struct vector<nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long long, unsigned long long, double, std::allocator, adl_serializer>, std::__1::allocator<nlohmann::basic_json<std::map, std::vector, std::__1::basic_string<char>, bool, long long, unsigned long long, double, std::allocator, adl_serializer>>> *_field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_field3;
    _Bool _field4;
    long long _field5;
    unsigned long long _field6;
    double _field7;
};

union storage<dspd::AdaptResponse, std::__1::error_code> {
    char _field1;
    struct AdaptResponse _field2;
    struct error_code _field3;
};

union storage<dspd::NegotiateResponse, std::__1::error_code> {
    char _field1;
    struct NegotiateResponse _field2;
    struct error_code _field3;
};

union storage<dspd::SimulateResponse, std::__1::error_code> {
    char _field1;
    struct SimulateResponse _field2;
    struct error_code _field3;
};

union storage<dspd::VolumeCapabilites, std::__1::error_code> {
    char _field1;
    struct VolumeCapabilites _field2;
    struct error_code _field3;
};

union storage<std::__1::vector<dspd::PublicFormatMap, std::__1::allocator<dspd::PublicFormatMap>>, std::__1::error_code> {
    char _field1;
    struct vector<dspd::PublicFormatMap, std::__1::allocator<dspd::PublicFormatMap>> _field2;
    struct error_code _field3;
};

#pragma mark Typedef'd Unions

typedef union {
    char __null_state_;
    unsigned long long __val_;
} CDUnion_5c9634bb;

typedef union {
    char _field1;
    int _field2;
} CDUnion_0506adf3;

