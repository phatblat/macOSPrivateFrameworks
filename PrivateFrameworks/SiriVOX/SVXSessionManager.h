//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "AFClockAlarmListening.h"
#import "AFClockTimerListening.h"
#import "AFMyriadDelegate.h"
#import "AFNotifyObserverDelegate.h"
#import "SVXModuleInstance.h"
#import "SVXNowPlayingPlaybackStateListening.h"
#import "SVXSessionDelegate.h"
#import "SVXSpeechSynthesisListening.h"

@class AFClockAlarmObserver, AFClockAlarmSnapshot, AFClockTimerObserver, AFClockTimerSnapshot, AFExperimentContext, AFMyriadCoordinator, AFNotifyObserver, AFQueue, AFRemoteRequestWatcher, AFSiriTether, AFSpeechSynthesisRecord, NSDate, NSObject<OS_dispatch_queue>, NSString, SVXDeviceProblemsState, SVXDeviceSetupContext, SVXModule, SVXNowPlayingObserver, SVXServiceCommandHandler, SVXSession, SVXSessionActivationAnnouncer, SVXSessionActivityAnnouncer, SVXSessionAudioPowerUpdateAnnouncer, SVXSpeechSynthesizer;

@interface SVXSessionManager : NSObject <AFMyriadDelegate, SVXModuleInstance, AFNotifyObserverDelegate, SVXSessionDelegate, SVXSpeechSynthesisListening, SVXNowPlayingPlaybackStateListening, AFClockAlarmListening, AFClockTimerListening>
{
    SVXModule *_module;
    AFNotifyObserver *_borealisTriggerNotifyObserver;
    AFNotifyObserver *_earlyDetectNotifyObserver;
    AFNotifyObserver *_deviceProblemsNotifyObserver;
    SVXNowPlayingObserver *_nowPlayingObserver;
    SVXSpeechSynthesizer *_speechSynthesizer;
    SVXServiceCommandHandler *_serviceCommandHandler;
    AFClockAlarmObserver *_clockAlarmObserver;
    AFClockTimerObserver *_clockTimerObserver;
    id _myriadToken;
    AFMyriadCoordinator *_myriadCoordinator;
    id <SVXTaskTracking> _currentMyriadCoordinatedRequestAssertion;
    BOOL _myriadDuckingAllowed;
    NSDate *_lastStereoPartnerMyriadWin;
    AFRemoteRequestWatcher *_remoteRequestWatcher;
    AFSiriTether *_tether;
    AFExperimentContext *_experimentContext;
    BOOL _usesUnifiedSiriActivationForVoiceTrigger;
    SVXSession *_currentSession;
    SVXSessionActivationAnnouncer *_activationAnnouncer;
    SVXSessionAudioPowerUpdateAnnouncer *_audioPowerUpdateAnnouncer;
    SVXSessionActivityAnnouncer *_activityAnnouncer;
    AFQueue *_queuedOperations;
    double _lastSessionResignActiveTimestamp;
    SVXDeviceSetupContext *_deviceSetupContext;
    long long _nowPlayingPlaybackState;
    AFSpeechSynthesisRecord *_speechSynthesisRecord;
    long long _speechSynthesisState;
    SVXDeviceProblemsState *_deviceProblemsState;
    AFClockAlarmSnapshot *_clockAlarmSnapshot;
    AFClockTimerSnapshot *_clockTimerSnapshot;
    NSObject<OS_dispatch_queue> *_coreDuetQueue;
    double _nowPlayingPlaybackStateRecordTime;
    BOOL _needsClearContext;
}

- (void).cxx_destruct;
- (void)_updateDeviceSetupContext:(id)arg1;
- (void)_handleMyriadForActivationContext:(id)arg1;
- (void)_handleDeviceProblemsStateChanged:(id)arg1;
- (void)_handleClockTimersObserver:(id)arg1 snapshotDidUpdateFrom:(id)arg2 to:(id)arg3;
- (void)_handleClockAlarmsObserver:(id)arg1 snapshotDidUpdateFrom:(id)arg2 to:(id)arg3;
- (void)_handleNowPlayingObserver:(id)arg1 playbackStateDidChangeFrom:(long long)arg2 to:(long long)arg3;
- (void)_handleSpeechSynthesizer:(id)arg1 didFailRequest:(id)arg2 taskTracker:(id)arg3 error:(id)arg4;
- (void)_handleSpeechSynthesizer:(id)arg1 didInterruptRequest:(id)arg2 taskTracker:(id)arg3;
- (void)_handleSpeechSynthesizer:(id)arg1 didCancelRequest:(id)arg2 taskTracker:(id)arg3;
- (void)_handleSpeechSynthesizer:(id)arg1 didFinishRequest:(id)arg2 utteranceInfo:(id)arg3 record:(id)arg4 taskTracker:(id)arg5;
- (void)_handleSpeechSynthesizer:(id)arg1 didStartRequest:(id)arg2 record:(id)arg3 taskTracker:(id)arg4;
- (void)_handleSpeechSynthesizer:(id)arg1 willStartRequest:(id)arg2 taskTracker:(id)arg3;
- (void)_handleSessionDidInvalidate:(id)arg1;
- (void)_fetchStereoPairStateWithCompletion:(CDUnknownBlockType)arg1;
- (void)_handleFetchedStereoPartnerLastMyriadWinDate:(id)arg1;
- (void)_fetchStereoPartnerLastMyriadWinDate;
- (void)_handleSession:(id)arg1 audioSessionDidBecomeActive:(BOOL)arg2 activationContext:(id)arg3 deactivationContext:(id)arg4;
- (void)_handleSession:(id)arg1 audioSessionWillBecomeActive:(BOOL)arg2 activationContext:(id)arg3 deactivationContext:(id)arg4;
- (void)_handleSession:(id)arg1 didDeactivateWithContext:(id)arg2;
- (void)_handleSession:(id)arg1 willDeactivateWithContext:(id)arg2;
- (void)_handleSession:(id)arg1 didNotActivateWithContext:(id)arg2 error:(id)arg3;
- (void)_handleSession:(id)arg1 didActivateWithContext:(id)arg2;
- (void)_handleSession:(id)arg1 willActivateWithContext:(id)arg2;
- (void)_handleFetchedExperimentContext:(id)arg1;
- (void)_fetchExperimentContext;
- (void)_handleSession:(id)arg1 didResignActiveWithDeactivationContext:(id)arg2;
- (void)_handleSession:(id)arg1 willResignActiveWithOptions:(unsigned long long)arg2 duration:(double)arg3;
- (void)_handleSession:(id)arg1 didBecomeActiveWithActivationContext:(id)arg2;
- (void)_handleSession:(id)arg1 willBecomeActiveWithActivationContext:(id)arg2;
- (void)_handleSession:(id)arg1 didStopSoundWithID:(long long)arg2 error:(id)arg3;
- (void)_handleSession:(id)arg1 didStartSoundWithID:(long long)arg2;
- (void)_handleSession:(id)arg1 willStartSoundWithID:(long long)arg2;
- (void)_handleSession:(id)arg1 didEndUpdateAudioPowerWithType:(long long)arg2;
- (void)_handleSession:(id)arg1 willBeginUpdateAudioPowerWithType:(long long)arg2 wrapper:(id)arg3;
- (void)_handleSession:(id)arg1 didChangeFromState:(long long)arg2 toState:(long long)arg3;
- (void)_handleSession:(id)arg1 willChangeFromState:(long long)arg2 toState:(long long)arg3;
- (void)_fetchCurrentAudioPowerWithType:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_fetchCurrentActivityStateWithCompletion:(CDUnknownBlockType)arg1;
- (void)_fetchCurrentStateWithCompletion:(CDUnknownBlockType)arg1;
- (void)_deactivateWithContext:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_activateWithContext:(id)arg1 activityState:(long long)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_prewarmWithContext:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_preheatWithActivationSource:(long long)arg1;
- (void)_processNextOperations;
- (void)_attachToTether;
- (void)_invalidateCurrentSession;
- (id)_currentSession:(BOOL)arg1;
- (void)attachToTether;
- (void)clockTimerObserver:(id)arg1 snapshotDidUpdateFrom:(id)arg2 to:(id)arg3;
- (void)clockTimerObserver:(id)arg1 timerDidDismiss:(id)arg2;
- (void)clockTimerObserver:(id)arg1 timerDidFire:(id)arg2;
- (void)clockAlarmObserver:(id)arg1 snapshotDidUpdateFrom:(id)arg2 to:(id)arg3;
- (void)clockAlarmObserver:(id)arg1 alarmDidDismiss:(id)arg2;
- (void)clockAlarmObserver:(id)arg1 alarmDidFire:(id)arg2;
- (void)nowPlayingObserver:(id)arg1 playbackStateDidChangeFrom:(long long)arg2 to:(long long)arg3;
- (void)speechSynthesizer:(id)arg1 didFailRequest:(id)arg2 taskTracker:(id)arg3 error:(id)arg4;
- (void)speechSynthesizer:(id)arg1 didInterruptRequest:(id)arg2 taskTracker:(id)arg3;
- (void)speechSynthesizer:(id)arg1 didCancelRequest:(id)arg2 taskTracker:(id)arg3;
- (void)speechSynthesizer:(id)arg1 didFinishRequest:(id)arg2 utteranceInfo:(id)arg3 record:(id)arg4 taskTracker:(id)arg5;
- (void)speechSynthesizer:(id)arg1 didStartRequest:(id)arg2 record:(id)arg3 taskTracker:(id)arg4;
- (void)speechSynthesizer:(id)arg1 willStartRequest:(id)arg2 taskTracker:(id)arg3;
- (void)speechSynthesizer:(id)arg1 willEnqueueRequest:(id)arg2 taskTracker:(id)arg3;
- (void)speechSynthesizerDidBecomeIdle:(id)arg1;
- (void)speechSynthesizerDidBecomeBusy:(id)arg1;
- (void)sessionDidInvalidate:(id)arg1;
- (void)session:(id)arg1 audioSessionDidBecomeActive:(BOOL)arg2 activationContext:(id)arg3 deactivationContext:(id)arg4;
- (void)session:(id)arg1 audioSessionWillBecomeActive:(BOOL)arg2 activationContext:(id)arg3 deactivationContext:(id)arg4;
- (void)session:(id)arg1 didDeactivateWithContext:(id)arg2;
- (void)session:(id)arg1 willDeactivateWithContext:(id)arg2;
- (void)session:(id)arg1 didNotActivateWithContext:(id)arg2 error:(id)arg3;
- (void)session:(id)arg1 didActivateWithContext:(id)arg2;
- (void)session:(id)arg1 willActivateWithContext:(id)arg2;
- (void)session:(id)arg1 didResignActiveWithDeactivationContext:(id)arg2;
- (void)session:(id)arg1 willResignActiveWithOptions:(unsigned long long)arg2 duration:(double)arg3;
- (void)session:(id)arg1 didBecomeActiveWithActivationContext:(id)arg2;
- (void)session:(id)arg1 willBecomeActiveWithActivationContext:(id)arg2;
- (void)session:(id)arg1 didStopSoundWithID:(long long)arg2 error:(id)arg3;
- (void)session:(id)arg1 didStartSoundWithID:(long long)arg2;
- (void)session:(id)arg1 willStartSoundWithID:(long long)arg2;
- (void)session:(id)arg1 didEndUpdateAudioPowerWithType:(long long)arg2;
- (void)session:(id)arg1 willBeginUpdateAudioPowerWithType:(long long)arg2 wrapper:(id)arg3;
- (void)session:(id)arg1 didChangeFromState:(long long)arg2 toState:(long long)arg3;
- (void)session:(id)arg1 willChangeFromState:(long long)arg2 toState:(long long)arg3;
- (void)notifyObserver:(id)arg1 didChangeStateFrom:(unsigned long long)arg2 to:(unsigned long long)arg3;
- (void)notifyObserver:(id)arg1 didReceiveNotificationWithToken:(int)arg2;
- (void)stopWithModuleInstanceProvider:(id)arg1;
- (void)startWithModuleInstanceProvider:(id)arg1 platformDependencies:(id)arg2;
- (id)initWithModule:(id)arg1;
- (void)_myriadStereoPartnerDataChanged;
- (void)shouldUnduck:(id)arg1;
- (void)shouldContinue:(id)arg1;
- (void)shouldAbortAnotherDeviceBetter:(id)arg1;
- (void)removeActivityListener:(id)arg1;
- (void)addActivityListener:(id)arg1;
- (void)removeAudioPowerUpdateListener:(id)arg1;
- (void)addAudioPowerUpdateListener:(id)arg1;
- (void)removeActivationListener:(id)arg1;
- (void)addActivationListener:(id)arg1;
- (void)updateDeviceSetupContext:(id)arg1;
- (void)getAudioSessionProviderWithCompletion:(CDUnknownBlockType)arg1;
- (void)getCurrentSessionUsingBlock:(CDUnknownBlockType)arg1;
- (void)fetchCurrentAudioPowerWithType:(long long)arg1 completion:(CDUnknownBlockType)arg2;
- (void)fetchCurrentActivityStateWithCompletion:(CDUnknownBlockType)arg1;
- (void)fetchCurrentStateWithCompletion:(CDUnknownBlockType)arg1;
- (void)deactivateWithContext:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)activateWithContext:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)prewarmWithContext:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)preheatWithActivationSource:(long long)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

