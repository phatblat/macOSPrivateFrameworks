//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class KHDBAdminDataEntity, KHDBDispatchQueue, KHDBLockedDictionary, NSMutableArray, NSObject<OS_dispatch_queue>, NSString;

@interface KHDBDatabase : NSObject
{
    int m_spinlock;
    NSString *m_uuid;
    NSString *m_databaseDirectoryPath;
    long long m_schemaMajorVersion;
    long long m_schemaMinorVersion;
    KHDBLockedDictionary *m_entitiesByClass;
    KHDBLockedDictionary *m_entitiesByTable;
    KHDBAdminDataEntity *m_adminDataEntity;
    KHDBLockedDictionary *m_databaseMgrsByName;
    KHDBLockedDictionary *m_databaseMgrsByTableName;
    unsigned int m_openState;
    BOOL m_readOnly;
    BOOL m_isOpen;
    BOOL m_isVault;
    BOOL m_useSetForColumnMethod;
    BOOL m_useOverreleaseChecking;
    NSMutableArray *m_reservations;
    KHDBDispatchQueue *m_backgroundActionQueue;
    NSObject<OS_dispatch_queue> *m_commitQueue;
}

+ (id)entityForTable:(id)arg1;
+ (id)entityForClass:(Class)arg1;
+ (unsigned long long)entityCount;
+ (void)addEntity:(id)arg1 forTable:(id)arg2;
+ (void)addEntity:(id)arg1 forClass:(Class)arg2;
+ (id)noDatabase;
+ (id)databaseForUuid:(id)arg1;
+ (void)setDatabaseUuidLookup:(id)arg1;
+ (void)setDefaultDatabase:(id)arg1 forModelClass:(Class)arg2 overwriteExisting:(BOOL)arg3;
+ (id)defaultDatabaseForModelClass:(Class)arg1;
+ (void)setDefaultDatabase:(id)arg1;
+ (id)defaultDatabase;
+ (void)initialize;
@property(nonatomic) BOOL useOverreleaseChecking; // @synthesize useOverreleaseChecking=m_useOverreleaseChecking;
@property(retain, nonatomic) KHDBAdminDataEntity *adminDataEntity; // @synthesize adminDataEntity=m_adminDataEntity;
@property(nonatomic) long long schemaMinorVersion; // @synthesize schemaMinorVersion=m_schemaMinorVersion;
@property(nonatomic) long long schemaMajorVersion; // @synthesize schemaMajorVersion=m_schemaMajorVersion;
@property(nonatomic) BOOL useSetForColumnMethod; // @synthesize useSetForColumnMethod=m_useSetForColumnMethod;
@property(nonatomic) BOOL isVault; // @synthesize isVault=m_isVault;
@property(readonly, nonatomic) BOOL readOnly; // @synthesize readOnly=m_readOnly;
@property(nonatomic) unsigned int openState; // @synthesize openState=m_openState;
@property(nonatomic) BOOL isOpen; // @synthesize isOpen=m_isOpen;
- (void)assertMainThreadPriority:(id)arg1;
- (id)entityForTable:(id)arg1;
- (id)entityForClass:(Class)arg1;
- (void)flushCachedModels;
- (BOOL)checkForModelOverreleases;
- (void)rebuildIndexes;
- (void)repairIndexes;
- (void)saveDatabase;
- (void)willSaveDatabase;
- (void)didOpenDatabase;
- (void)closeDatabase;
- (void)closeDatabaseForQuit:(BOOL)arg1;
- (BOOL)openDatabaseWithOptions:(unsigned int)arg1;
- (void)saveNextModelIds;
- (void)recomputeNextModelIds;
- (void)recomputeNextModelIds:(CDUnknownBlockType)arg1;
- (void)recomputeNextModelIdsForEntity:(id)arg1 withProgressBlock:(CDUnknownBlockType)arg2;
- (void)invalidateNextModelIds;
- (void)analyze;
- (void)vacuum;
- (void)waitForOutstandingWrites;
- (void)setBackgroundWritingEnabled:(BOOL)arg1;
- (void)setLockingModeToExclusive:(BOOL)arg1;
- (void)setSynchronicity:(long long)arg1;
- (void)didSaveDatabase;
- (void)commitAndBeginNewTransaction;
- (void)commit;
- (void)beginTransaction;
- (BOOL)hasChanges;
- (unsigned long long)entityCount;
- (void)addEntity:(id)arg1 forTable:(id)arg2;
- (void)addEntity:(id)arg1 forClass:(Class)arg2;
- (id)databaseManagerForTableName:(id)arg1;
- (void)setDatabaseManager:(id)arg1 forTableName:(id)arg2;
- (id)databaseManagerForName:(id)arg1;
- (void)addDatabaseManager:(id)arg1 forName:(id)arg2;
- (BOOL)createSchemaIfMissing;
- (void)insertIntoRidList:(id)arg1 fromDatabaseMgr:(id)arg2 idsForQuery:(id)arg3;
- (void)insertIntoRidList:(id)arg1 fromDatabaseMgr:(id)arg2 limitedTo:(id)arg3 canceler:(id)arg4 idsForQuery:(id)arg5;
- (void)insertIntoRidList:(id)arg1 fromDatabaseMgr:(id)arg2 canceler:(id)arg3 idsForQuery:(id)arg4;
- (void)insertIntoRidList:(id)arg1 fromDatabaseMgr:(id)arg2 idsForQuery:(id)arg3 withArgs:(id)arg4;
- (void)insertIntoRidList:(id)arg1 fromDatabaseMgr:(id)arg2 limitedTo:(id)arg3 canceler:(id)arg4 idsForQuery:(id)arg5 withArgs:(id)arg6;
- (void)insertIntoRidList:(id)arg1 fromDatabaseMgr:(id)arg2 canceler:(id)arg3 idsForQuery:(id)arg4 withArgs:(id)arg5;
- (id)backgroundActionQueue;
- (void)addBackgroundOperation:(id)arg1;
- (void)addBackgroundBlock:(CDUnknownBlockType)arg1;
- (id)databaseDirectoryPath;
- (void)processShortDelayTasks;
- (void)setUuid:(id)arg1;
- (id)uuid;
- (id)description;
- (void)dealloc;
- (id)initAsClosedDatabase;
- (id)initWithDatabasePath:(id)arg1;

@end

