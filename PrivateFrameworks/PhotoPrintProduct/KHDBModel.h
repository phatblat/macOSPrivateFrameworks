//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class KHDBEntity, NSNumber;

@interface KHDBModel : NSObject
{
    int _spinlock;
    unsigned int _flags;
    NSNumber *_modelId;
    KHDBEntity *_entity;
}

+ (void)sendModelsPropertyChange:(id)arg1 forProperty:(id)arg2;
+ (void)sendModelContentsChanged:(id)arg1;
+ (void)sendModelsDeleted:(id)arg1;
+ (void)sendModelsCreated:(id)arg1;
+ (BOOL)sample:(long long)arg1 samplingIntervalinMilliseconds:(long long)arg2 fileName:(id)arg3 reason:(id)arg4;
+ (BOOL)sample:(long long)arg1 samplingIntervalinMilliseconds:(long long)arg2 fileName:(id)arg3 directory:(id)arg4 reason:(id)arg5;
+ (BOOL)reportBackTraceToFileName:(id)arg1 directory:(id)arg2 reason:(id)arg3;
+ (void)insertIntoRidList:(id)arg1 idsForColumn:(id)arg2 fromQuery:(id)arg3;
+ (void)insertIntoRidList:(id)arg1 idsForColumn:(id)arg2 where:(id)arg3;
+ (void)insertIntoRidList:(id)arg1 fromDatabase:(id)arg2 idsForColumn:(id)arg3 where:(id)arg4;
+ (void)insertIntoRidList:(id)arg1 fromDatabase:(id)arg2 idsForColumn:(id)arg3 where:(id)arg4 args:(id)arg5;
+ (id)addressesFromQuery:(id)arg1;
+ (id)addressesFromDatabase:(id)arg1 where:(id)arg2;
+ (id)modelIdListFromQuery:(id)arg1;
+ (id)modelIdListWhere:(id)arg1;
+ (id)modelIdListFromDatabase:(id)arg1 where:(id)arg2;
+ (id)modelIdListFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3;
+ (id)modelIdsFromQuery:(id)arg1;
+ (id)modelIdsWhere:(id)arg1;
+ (id)modelIdsFromDatabase:(id)arg1 where:(id)arg2;
+ (id)modelIdsFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3;
+ (id)modelUuidsFromQuery:(id)arg1;
+ (id)modelUuidsWhere:(id)arg1;
+ (id)modelUuidsFromDatabase:(id)arg1 where:(id)arg2;
+ (id)modelUuidsFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3;
+ (id)dataForColumns:(id)arg1 where:(id)arg2;
+ (id)dataForColumns:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3;
+ (id)dataForColumns:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3 args:(id)arg4;
+ (id)nestedDictionariesForOuterKey:(id)arg1 innerKey:(id)arg2 value:(id)arg3 fromQuery:(id)arg4;
+ (id)nestedDictionariesForOuterKey:(id)arg1 innerKey:(id)arg2 value:(id)arg3 where:(id)arg4;
+ (id)nestedDictionariesForOuterKey:(id)arg1 innerKey:(id)arg2 value:(id)arg3 fromDatabase:(id)arg4 where:(id)arg5;
+ (id)nestedDictionariesForOuterKey:(id)arg1 innerKey:(id)arg2 value:(id)arg3 fromDatabase:(id)arg4 where:(id)arg5 args:(id)arg6;
+ (id)dictionaryOfSetsForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 fromQuery:(id)arg4;
+ (id)dictionaryOfSetsForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 where:(id)arg4;
+ (id)dictionaryOfSetsForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 fromDatabase:(id)arg4 where:(id)arg5;
+ (id)dictionaryOfSetsForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 fromDatabase:(id)arg4 where:(id)arg5 args:(id)arg6;
+ (id)dictionaryForKey:(id)arg1 value:(id)arg2 fromQuery:(id)arg3;
+ (id)dictionaryForKey:(id)arg1 value:(id)arg2 where:(id)arg3;
+ (id)dictionaryForKey:(id)arg1 value:(id)arg2 fromDatabase:(id)arg3 where:(id)arg4;
+ (id)dictionaryForKey:(id)arg1 value:(id)arg2 fromDatabase:(id)arg3 where:(id)arg4 args:(id)arg5;
+ (void)updateColumn:(id)arg1 toValue:(id)arg2 where:(id)arg3;
+ (void)updateColumn:(id)arg1 toValue:(id)arg2 fromDatabase:(id)arg3 where:(id)arg4;
+ (void)updateColumn:(id)arg1 toValue:(id)arg2 fromDatabase:(id)arg3 where:(id)arg4 args:(id)arg5;
+ (void)appendAddressesToArray:(id)arg1 orderedBy:(id)arg2 fromQuery:(id)arg3;
+ (void)appendAddressesToArray:(id)arg1 orderedBy:(id)arg2 where:(id)arg3;
+ (void)appendAddressesToArray:(id)arg1 orderedBy:(id)arg2 fromDatabase:(id)arg3 where:(id)arg4;
+ (void)appendAddressesToArray:(id)arg1 orderedBy:(id)arg2 fromDatabase:(id)arg3 where:(id)arg4 args:(id)arg5;
+ (id)select:(id)arg1 orderedBy:(id)arg2 fromQuery:(id)arg3;
+ (id)select:(id)arg1 orderedBy:(id)arg2 where:(id)arg3;
+ (id)select:(id)arg1 orderedBy:(id)arg2 fromDatabase:(id)arg3 where:(id)arg4;
+ (id)select:(id)arg1 orderedBy:(id)arg2 fromDatabase:(id)arg3 where:(id)arg4 args:(id)arg5;
+ (id)selectObjects:(id)arg1 fromQuery:(id)arg2;
+ (id)selectObjects:(id)arg1 where:(id)arg2;
+ (id)selectObjects:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3;
+ (id)selectObjects:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3 args:(id)arg4;
+ (id)selectOneObject:(id)arg1 fromQuery:(id)arg2;
+ (id)selectOneObject:(id)arg1 where:(id)arg2;
+ (id)selectOneObject:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3;
+ (id)selectOneObject:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3 args:(id)arg4;
+ (id)selectDistinct:(id)arg1 fromModels:(id)arg2 fromQuery:(id)arg3;
+ (id)selectDistinct:(id)arg1 fromModels:(id)arg2 where:(id)arg3;
+ (id)selectDistinct:(id)arg1 fromModels:(id)arg2 where:(id)arg3 args:(id)arg4;
+ (id)selectDistinctList:(id)arg1 fromQuery:(id)arg2;
+ (id)selectDistinctList:(id)arg1 where:(id)arg2;
+ (id)selectDistinctList:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3;
+ (id)selectDistinctList:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3 args:(id)arg4;
+ (id)selectDistinct:(id)arg1 fromQuery:(id)arg2;
+ (id)selectDistinct:(id)arg1 where:(id)arg2;
+ (id)selectDistinct:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3;
+ (id)selectDistinct:(id)arg1 fromDatabase:(id)arg2 where:(id)arg3 args:(id)arg4;
+ (BOOL)modelExistsFromQuery:(id)arg1;
+ (BOOL)modelExistsWhere:(id)arg1;
+ (BOOL)modelExistsFromDatabase:(id)arg1 where:(id)arg2;
+ (BOOL)modelExistsFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3;
+ (unsigned long long)countOfModelsFromQuery:(id)arg1;
+ (unsigned long long)countOfModelsWhere:(id)arg1;
+ (unsigned long long)countOfModelsFromDatabase:(id)arg1 where:(id)arg2;
+ (unsigned long long)countOfModelsFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3;
+ (BOOL)modelExistsInModels:(id)arg1 fromQuery:(id)arg2;
+ (BOOL)modelExistsInModels:(id)arg1 where:(id)arg2;
+ (BOOL)modelExistsInModels:(id)arg1 where:(id)arg2 args:(id)arg3;
+ (id)dictionaryOfModelsForKey:(id)arg1 fromModels:(id)arg2 fromQuery:(id)arg3;
+ (id)dictionaryOfModelsForKey:(id)arg1 fromModels:(id)arg2 where:(id)arg3;
+ (id)dictionaryOfSetsForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 fromModels:(id)arg4 fromQuery:(id)arg5;
+ (id)dictionaryOfSetsForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 fromModels:(id)arg4 where:(id)arg5;
+ (id)dictionaryOfSetsForKey:(id)arg1 value:(id)arg2 defaultValue:(id)arg3 fromModels:(id)arg4 where:(id)arg5 args:(id)arg6;
+ (id)dictionaryForKey:(id)arg1 value:(id)arg2 fromModels:(id)arg3 fromQuery:(id)arg4;
+ (id)dictionaryForKey:(id)arg1 value:(id)arg2 fromModels:(id)arg3 where:(id)arg4;
+ (id)dictionaryForKey:(id)arg1 value:(id)arg2 fromModels:(id)arg3 where:(id)arg4 args:(id)arg5;
+ (id)setOfModels:(id)arg1 fromQuery:(id)arg2;
+ (id)setOfModels:(id)arg1 where:(id)arg2;
+ (id)arrayOfModels:(id)arg1 fromQuery:(id)arg2;
+ (id)arrayOfModels:(id)arg1 where:(id)arg2;
+ (id)anyOfModels:(id)arg1 fromQuery:(id)arg2;
+ (id)anyOfModels:(id)arg1 where:(id)arg2;
+ (id)setOfModels:(id)arg1 where:(id)arg2 args:(id)arg3;
+ (id)arrayOfModels:(id)arg1 where:(id)arg2 args:(id)arg3;
+ (id)anyOfModels:(id)arg1 where:(id)arg2 args:(id)arg3;
+ (id)anyModelFromQuery:(id)arg1;
+ (id)anyModelWhere:(id)arg1;
+ (id)anyModelFromDatabase:(id)arg1 where:(id)arg2;
+ (id)anyModelFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3;
+ (id)iteratorFromQuery:(id)arg1;
+ (id)iteratorWhere:(id)arg1;
+ (id)iteratorFromDatabase:(id)arg1 where:(id)arg2;
+ (id)iteratorFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3;
+ (id)arrayOfModelsFromQuery:(id)arg1;
+ (id)arrayOfModelsWhere:(id)arg1;
+ (id)arrayOfModelsFromDatabase:(id)arg1 where:(id)arg2;
+ (id)arrayOfModelsFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3;
+ (id)modelsFromQuery:(id)arg1;
+ (id)modelsWhere:(id)arg1;
+ (id)modelsFromDatabase:(id)arg1 where:(id)arg2;
+ (id)modelsFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3;
+ (id)modelIdListForModels:(id)arg1;
+ (id)modelIdsForModels:(id)arg1;
+ (id)addressesForModels:(id)arg1;
+ (id)databaseForModels:(id)arg1;
+ (id)anyModel:(id)arg1;
+ (id)addressesForModelIds:(id)arg1 fromDatabase:(id)arg2;
+ (id)modelsForAddresses:(id)arg1;
+ (id)modelForAddress:(id)arg1;
+ (id)modelsForUuids:(id)arg1 fromDatabase:(id)arg2;
+ (id)modelForUuid:(id)arg1 fromDatabase:(id)arg2;
+ (id)modelsForIdList:(id)arg1;
+ (id)modelsForIdList:(id)arg1 fromDatabase:(id)arg2;
+ (id)modelsForIds:(id)arg1;
+ (id)modelsForIds:(id)arg1 fromDatabase:(id)arg2;
+ (id)modelForId:(id)arg1;
+ (id)modelForId:(id)arg1 fromDatabase:(id)arg2;
+ (void)deleteModelsFromQuery:(id)arg1;
+ (void)deleteModelsWhere:(id)arg1;
+ (void)deleteModelsFromDatabase:(id)arg1 where:(id)arg2;
+ (void)deleteModelsFromDatabase:(id)arg1 where:(id)arg2 args:(id)arg3;
+ (void)deleteModels:(id)arg1;
+ (void)prefetchAllObjectRelationships:(id)arg1;
+ (void)prefetchRelationships:(id)arg1 forObjects:(id)arg2;
@property(retain, nonatomic) KHDBEntity *entity; // @synthesize entity=_entity;
@property(nonatomic) BOOL wasRecentlyUsed;
- (void)uncache;
- (BOOL)flushModelAggressively;
- (BOOL)flushModel;
- (id)dataValueForField:(id)arg1;
- (id)dateValueForField:(id)arg1;
- (id)numberValueForField:(id)arg1;
- (id)stringValueForField:(id)arg1;
- (void)writeValue:(id)arg1 toField:(id)arg2;
- (void)simpleWriteValue:(id)arg1 toField:(id)arg2;
- (void)simpleWriteValue:(id)arg1 toField:(id)arg2 withModDate:(id)arg3;
- (void)setRecentChange:(id)arg1;
- (id)recentChange;
- (void)setModelFlagTo:(BOOL)arg1 forFlag:(unsigned int)arg2;
- (BOOL)modelFlagForFlag:(unsigned int)arg1;
@property(nonatomic) BOOL skipChangeEntries;
- (BOOL)setNotifyOfChanges:(BOOL)arg1;
- (BOOL)notifyOfChanges;
@property(nonatomic) BOOL isInCache;
- (void)setIsDeleted;
- (BOOL)isDeleted;
- (void)close;
- (void)open;
- (void)includeInOpenChanges:(unsigned long long)arg1;
- (unsigned long long)setToClosed;
@property(nonatomic) BOOL isOpen;
- (void)setIsPersisted;
- (BOOL)isPersisted;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)uuid;
- (void)setModelId:(unsigned long long)arg1;
- (id)modelIdAsNumber;
- (unsigned long long)modelId;
- (id)address;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)allocationHistory;
- (id)verifierDescription;
- (id)description;
- (void)dealloc;
- (id)initWithUuid:(id)arg1 inDatabase:(id)arg2;
- (id)initWithUuid:(id)arg1 forEntity:(id)arg2;
- (id)initWithModelId:(id)arg1;
- (id)initWithModelId:(id)arg1 inDatabase:(id)arg2;
- (id)initWithModelId:(id)arg1 forEntity:(id)arg2;
- (id)init;
- (void)deleteModel;
- (void)willBeDeleted;
- (void)persist;
- (void)wasPersisted;
- (id)creationDate;
- (id)lastModifiedDate;
- (id)modDate;
- (void)cacheModDate:(id)arg1;
- (id)createDate;
- (id)database;
- (void)setDatabaseEntity:(id)arg1;
- (id)databaseEntity;
- (id)copyWithTag:(long long)arg1;
- (id)autoreleaseWithTag:(long long)arg1;
- (oneway void)releaseWithTag:(long long)arg1;
- (id)retainWithTag:(long long)arg1;

@end

