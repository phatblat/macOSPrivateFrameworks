//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "CSAudioAlertProvidingDelegate.h"
#import "CSAudioConverterDelegate.h"
#import "CSAudioSessionControllerDelegate.h"
#import "CSAudioSessionProvidingDelegate.h"
#import "CSAudioStreamProvidingDelegate.h"
#import "CSContinuousVoiceTriggerDelegate.h"
#import "CSSmartSiriVolumeControllerDelegate.h"
#import "CSSpIdSpeakerRecognizerDelegate.h"
#import "CSSpeechManagerDelegate.h"
#import "CSVoiceTriggerAssetHandlerDelegate.h"
#import "CSXPCClientDelegate.h"

@class CSAudioConverter, CSAudioPowerMeter, CSAudioRecordContext, CSAudioSampleRateConverter, CSAudioStream, CSAudioZeroCounter, CSContinuousVoiceTrigger, CSEndpointerProxy, CSLanguageDetector, CSPlainAudioFileWriter, CSSelectiveChannelAudioFileWriter, CSSmartSiriVolumeController, CSSpIdImplicitTraining, CSSpeakerIdRecognizerFactory, CSSpeechEndHostTimeEstimator, CSUserVoiceProfileStore, CSXPCClient, NSDictionary, NSObject<OS_dispatch_group>, NSObject<OS_dispatch_queue>, NSString, NSUUID;

@interface CSSpeechController : NSObject <CSAudioConverterDelegate, CSSpIdSpeakerRecognizerDelegate, CSSmartSiriVolumeControllerDelegate, CSAudioSessionProvidingDelegate, CSAudioStreamProvidingDelegate, CSAudioAlertProvidingDelegate, CSAudioSessionControllerDelegate, CSXPCClientDelegate, CSVoiceTriggerAssetHandlerDelegate, CSSpeechManagerDelegate, CSContinuousVoiceTriggerDelegate>
{
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_contextResetQueue;
    CSAudioConverter *_opusAudioConverter;
    CSAudioConverter *_narrowBandOpusConverter;
    CSAudioConverter *_audioConverter;
    CSAudioSampleRateConverter *_downsampler;
    NSDictionary *_requestedRecordSettings;
    NSDictionary *_lastVoiceTriggerInfo;
    NSDictionary *_lastRTSTriggerInfo;
    CSAudioZeroCounter *_continuousZeroCounter;
    NSObject<OS_dispatch_queue> *_audibleFeedbackQueue;
    NSObject<OS_dispatch_group> *_twoShotAudibleFeedbackDecisionGroup;
    BOOL _isOpus;
    BOOL _isActivated;
    BOOL _isNarrowBand;
    BOOL _twoShotNotificationEnabled;
    BOOL _isMediaPlaying;
    BOOL _isAlarmPlaying;
    BOOL _isTimerPlaying;
    BOOL _isSoundPlaying;
    BOOL _isRemoteVADAvailableStream;
    BOOL _myriadPreventingTwoShotFeedback;
    BOOL _needsPostGain;
    BOOL _shouldUseLanguageDetectorForCurrentRequest;
    BOOL _didDeliverLastBuffer;
    float _cachedAvgPower;
    float _cachedPeakPower;
    id <CSSpeechControllerDelegate> _delegate;
    id <CSSpeakerIdentificationDelegate> _speakerIdDelegate;
    id <CSLanguageDetectorDelegate> _languageDetectorDelegate;
    CSEndpointerProxy *_endpointerProxy;
    CSAudioRecordContext *_audioRecordContext;
    CSAudioStream *_audioStream;
    id <CSAudioStreamProviding> _streamProvider;
    id <CSAudioSessionProviding> _sessionProvider;
    id <CSAudioAlertProviding> _alertProvider;
    id <CSAudioMeterProviding> _audioMeterProvider;
    id <CSAudioMetricProviding> _audioMetricProvider;
    id <CSBargeInModeProviding> _bargeInModeProvider;
    CSPlainAudioFileWriter *_audioFileWriter;
    CSSelectiveChannelAudioFileWriter *_serverLoggingWriter;
    CSSmartSiriVolumeController *_volumeController;
    CSSpeakerIdRecognizerFactory *_spIdFactory;
    id <CSSpIdSpeakerRecognizer> _spIdRecognizer;
    CSSpIdImplicitTraining *_voiceTriggerImplicitTraining;
    NSDictionary *_spIdUserScores;
    CSUserVoiceProfileStore *_voiceProfileStore;
    unsigned long long _activeChannel;
    CSSpeechEndHostTimeEstimator *_speechEndHostTimeEstimator;
    CSContinuousVoiceTrigger *_continuousVoiceTrigger;
    CSLanguageDetector *_languageDetector;
    NSUUID *_pendingAudioSessionActivationToken;
    CDUnknownBlockType _pendingAudioSessionActivationCompletion;
    double _audioSessionActivationDelay;
    CSXPCClient *_xpcClient;
    CSXPCClient *_bargeInModeXPCClient;
    CSAudioPowerMeter *_powerMeter;
}

+ (BOOL)isSmartSiriVolumeAvailable;
+ (id)sharedController;
@property(nonatomic) BOOL didDeliverLastBuffer; // @synthesize didDeliverLastBuffer=_didDeliverLastBuffer;
@property(retain, nonatomic) CSAudioPowerMeter *powerMeter; // @synthesize powerMeter=_powerMeter;
@property(nonatomic) float cachedPeakPower; // @synthesize cachedPeakPower=_cachedPeakPower;
@property(nonatomic) float cachedAvgPower; // @synthesize cachedAvgPower=_cachedAvgPower;
@property(retain, nonatomic) CSXPCClient *bargeInModeXPCClient; // @synthesize bargeInModeXPCClient=_bargeInModeXPCClient;
@property(retain, nonatomic) CSXPCClient *xpcClient; // @synthesize xpcClient=_xpcClient;
@property(nonatomic) double audioSessionActivationDelay; // @synthesize audioSessionActivationDelay=_audioSessionActivationDelay;
@property(copy, nonatomic) CDUnknownBlockType pendingAudioSessionActivationCompletion; // @synthesize pendingAudioSessionActivationCompletion=_pendingAudioSessionActivationCompletion;
@property(retain, nonatomic) NSUUID *pendingAudioSessionActivationToken; // @synthesize pendingAudioSessionActivationToken=_pendingAudioSessionActivationToken;
@property(nonatomic) BOOL shouldUseLanguageDetectorForCurrentRequest; // @synthesize shouldUseLanguageDetectorForCurrentRequest=_shouldUseLanguageDetectorForCurrentRequest;
@property(retain, nonatomic) CSLanguageDetector *languageDetector; // @synthesize languageDetector=_languageDetector;
@property(retain, nonatomic) CSContinuousVoiceTrigger *continuousVoiceTrigger; // @synthesize continuousVoiceTrigger=_continuousVoiceTrigger;
@property(retain, nonatomic) CSSpeechEndHostTimeEstimator *speechEndHostTimeEstimator; // @synthesize speechEndHostTimeEstimator=_speechEndHostTimeEstimator;
@property(nonatomic) BOOL needsPostGain; // @synthesize needsPostGain=_needsPostGain;
@property(nonatomic) BOOL myriadPreventingTwoShotFeedback; // @synthesize myriadPreventingTwoShotFeedback=_myriadPreventingTwoShotFeedback;
@property(nonatomic) BOOL isRemoteVADAvailableStream; // @synthesize isRemoteVADAvailableStream=_isRemoteVADAvailableStream;
@property(nonatomic) BOOL isSoundPlaying; // @synthesize isSoundPlaying=_isSoundPlaying;
@property(nonatomic) BOOL isTimerPlaying; // @synthesize isTimerPlaying=_isTimerPlaying;
@property(nonatomic) BOOL isAlarmPlaying; // @synthesize isAlarmPlaying=_isAlarmPlaying;
@property(nonatomic) BOOL isMediaPlaying; // @synthesize isMediaPlaying=_isMediaPlaying;
@property(nonatomic) BOOL twoShotNotificationEnabled; // @synthesize twoShotNotificationEnabled=_twoShotNotificationEnabled;
@property(nonatomic) unsigned long long activeChannel; // @synthesize activeChannel=_activeChannel;
@property(retain, nonatomic) CSUserVoiceProfileStore *voiceProfileStore; // @synthesize voiceProfileStore=_voiceProfileStore;
@property(retain, nonatomic) NSDictionary *spIdUserScores; // @synthesize spIdUserScores=_spIdUserScores;
@property(retain, nonatomic) CSSpIdImplicitTraining *voiceTriggerImplicitTraining; // @synthesize voiceTriggerImplicitTraining=_voiceTriggerImplicitTraining;
@property(retain, nonatomic) id <CSSpIdSpeakerRecognizer> spIdRecognizer; // @synthesize spIdRecognizer=_spIdRecognizer;
@property(retain, nonatomic) CSSpeakerIdRecognizerFactory *spIdFactory; // @synthesize spIdFactory=_spIdFactory;
@property(retain, nonatomic) CSSmartSiriVolumeController *volumeController; // @synthesize volumeController=_volumeController;
@property(retain, nonatomic) CSSelectiveChannelAudioFileWriter *serverLoggingWriter; // @synthesize serverLoggingWriter=_serverLoggingWriter;
@property(retain, nonatomic) CSPlainAudioFileWriter *audioFileWriter; // @synthesize audioFileWriter=_audioFileWriter;
@property(nonatomic) BOOL isNarrowBand; // @synthesize isNarrowBand=_isNarrowBand;
@property(nonatomic) BOOL isActivated; // @synthesize isActivated=_isActivated;
@property(nonatomic) BOOL isOpus; // @synthesize isOpus=_isOpus;
@property(retain, nonatomic) id <CSBargeInModeProviding> bargeInModeProvider; // @synthesize bargeInModeProvider=_bargeInModeProvider;
@property(retain, nonatomic) id <CSAudioMetricProviding> audioMetricProvider; // @synthesize audioMetricProvider=_audioMetricProvider;
@property(retain, nonatomic) id <CSAudioMeterProviding> audioMeterProvider; // @synthesize audioMeterProvider=_audioMeterProvider;
@property(retain, nonatomic) id <CSAudioAlertProviding> alertProvider; // @synthesize alertProvider=_alertProvider;
@property(retain, nonatomic) id <CSAudioSessionProviding> sessionProvider; // @synthesize sessionProvider=_sessionProvider;
@property(retain, nonatomic) id <CSAudioStreamProviding> streamProvider; // @synthesize streamProvider=_streamProvider;
@property(retain, nonatomic) CSAudioStream *audioStream; // @synthesize audioStream=_audioStream;
@property(retain, nonatomic) CSAudioRecordContext *audioRecordContext; // @synthesize audioRecordContext=_audioRecordContext;
@property(retain, nonatomic) CSEndpointerProxy *endpointerProxy; // @synthesize endpointerProxy=_endpointerProxy;
@property(nonatomic) __weak id <CSLanguageDetectorDelegate> languageDetectorDelegate; // @synthesize languageDetectorDelegate=_languageDetectorDelegate;
@property(nonatomic) __weak id <CSSpeakerIdentificationDelegate> speakerIdDelegate; // @synthesize speakerIdDelegate=_speakerIdDelegate;
@property(nonatomic) __weak id <CSSpeechControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)_tearDownBargeInModeProviderIfNeeded;
- (void)_teardownAudioProviderIfNeeded;
- (void)CSXPCClient:(id)arg1 didDisconnect:(BOOL)arg2;
- (void)voiceTriggerAssetHandler:(id)arg1 didChangeCachedAsset:(id)arg2;
- (void)speakerRecognizerFinishedProcessing:(id)arg1 withFinalSpeakerIdInfo:(id)arg2;
- (void)speakerRecognizer:(id)arg1 hasSpeakerIdInfo:(id)arg2;
- (void)_setSoundPlayingState;
- (void)CSTimerMonitor:(id)arg1 didReceiveTimerChanged:(long long)arg2;
- (void)CSAlarmMonitor:(id)arg1 didReceiveAlarmChanged:(long long)arg2;
- (void)CSMediaPlayingMonitor:(id)arg1 didReceiveMediaPlayingChanged:(long long)arg2;
- (void)endWaitingForMyriadWithDecision:(unsigned long long)arg1;
- (void)beginWaitingForMyriad;
- (void)setLanguageDetectorInteractionID:(id)arg1;
- (void)cancelCurrentLanguageDetectorRequest;
- (void)languageDetectorSetMostRecentRecognitionLanguage:(id)arg1;
- (float)getSmartSiriVolume;
- (BOOL)isSmartSiriVolumeAvailable;
- (void)shouldAcceptEagerResultForDuration:(double)arg1 resultsCompletionHandler:(CDUnknownBlockType)arg2;
- (void)updateEndpointerDelayedTrigger:(BOOL)arg1;
- (void)updateEndpointerThreshold:(float)arg1;
- (id)endpointerModelVersion;
- (double)lastEndOfVoiceActivityTime;
- (unsigned long long)_phaticPlaybackReason;
- (float)_scheduledPhaticDelay;
- (BOOL)_shouldSchedulePhaticAtStartRecording;
- (BOOL)_canPlayPhaticDuringMediaPlayback;
- (id)_contextToString:(id)arg1;
- (void)_deviceAudioLoggingWithFileWriter:(id)arg1;
- (id)_getSpeechIdentifier;
- (id)_fetchFallbackAudioSessionReleaseProviding;
- (void)_createBargeInModeProviderFromXPCIfNeeded;
- (BOOL)_createAudioProviderFromXPCWithContext:(id)arg1;
- (BOOL)_fetchAudioProviderWithContext:(id)arg1;
- (void)processServerEndpointFeatures:(id)arg1;
- (void)resetEndpointer;
- (long long)_currentAudioRecorderSampleRate;
- (void)setEndpointAnalyzerDelegate:(id)arg1;
@property(readonly, nonatomic) id <CSEndpointAnalyzer> endpointAnalyzer;
- (id)metrics;
- (void)keywordDetectorDidDetectKeyword;
- (void)continuousVoiceTrigger:(id)arg1 detectedSilenceAfterVoiceTriggerAt:(double)arg2;
- (void)continuousVoiceTrigger:(id)arg1 detectedVoiceTriggerResult:(id)arg2;
- (void)voiceTriggerDidDetectKeyword:(id)arg1 deviceId:(id)arg2;
- (id)voiceTriggerInfo;
- (unsigned long long)outputReferenceChannel;
- (void)_createAudioPowerMeterIfNeeded;
- (float)averagePowerForOutputReference;
- (float)peakPowerForOutputReference;
- (float)averagePowerForChannel:(unsigned long long)arg1;
- (float)peakPowerForChannel:(unsigned long long)arg1;
- (void)updateMeters;
- (void)setMeteringEnabled:(BOOL)arg1;
- (void)stopEndpointer;
- (BOOL)playRecordStartingAlertAndResetEndpointer;
- (BOOL)playAlertSoundForType:(long long)arg1;
- (BOOL)setAlertSoundFromURL:(id)arg1 forType:(long long)arg2;
- (void)audioConverterDidConvertPackets:(id)arg1 packets:(id)arg2 durationInSec:(float)arg3 timestamp:(unsigned long long)arg4;
- (BOOL)_setupAudioConverter:(BOOL)arg1 isNarrowBand:(BOOL)arg2;
- (void)_setupDownsamplerIfNeeded;
- (void)smartSiriVolumeControllerDetectedSystemVolumeChange:(id)arg1 withVolume:(float)arg2 forReason:(unsigned long long)arg3;
- (void)audioSessionProvider:(id)arg1 didSetAudioSessionActive:(BOOL)arg2;
- (void)audioSessionProvider:(id)arg1 willSetAudioSessionActive:(BOOL)arg2;
- (void)audioSessionProviderEndInterruption:(id)arg1;
- (void)audioSessionProviderBeginInterruption:(id)arg1 withContext:(id)arg2;
- (void)audioSessionProviderBeginInterruption:(id)arg1;
- (void)audioAlertProvidingDidFinishAlertPlayback:(id)arg1 ofType:(long long)arg2 error:(id)arg3;
- (void)audioSessionController:(id)arg1 didReceiveAudioSessionMediaServicesWereResetNotificationWithUserInfo:(id)arg2;
- (void)audioSessionProvider:(id)arg1 didChangeContext:(BOOL)arg2;
- (void)audioSessionProvider:(id)arg1 providerInvalidated:(BOOL)arg2;
- (void)audioStreamProvider:(id)arg1 didHardwareConfigurationChange:(long long)arg2;
- (void)audioStreamProvider:(id)arg1 audioChunkForTVAvailable:(id)arg2;
- (void)audioStreamProvider:(id)arg1 audioBufferAvailable:(id)arg2;
- (void)audioStreamProvider:(id)arg1 didStopStreamUnexpectly:(long long)arg2;
- (void)_didStopForReason:(long long)arg1;
- (BOOL)_shouldFetchRaiseToSpeakInfo;
- (BOOL)_shouldFetchVoiceTriggerInfo;
- (BOOL)isRTSTriggered;
- (BOOL)isJarvisVoiceTriggered;
- (BOOL)isHearstVoiceTriggered;
- (BOOL)isBuiltInVoiceTriggered;
- (id)playbackRoute;
- (id)recordDeviceInfo;
- (id)recordRoute;
- (BOOL)isRecording;
- (void)stopRecordingWithOptions:(id)arg1;
- (void)stopRecording;
- (BOOL)startRecording:(id *)arg1;
- (BOOL)_lastVoiceTriggerWasHearst;
- (BOOL)_shouldSetStartSampleCountForRTS;
- (BOOL)_shouldSetStartSampleCount;
- (BOOL)_shouldUseLanguageDetector:(id)arg1;
- (void)_createLanguageDetectorIfNeeded;
- (void)_startPhaticDecision;
- (BOOL)startRecordingWithSettings:(id)arg1 error:(id *)arg2;
- (id)_languageDetectorOptionFromSettings:(id)arg1;
- (void)_setupSpeakerId;
- (void)duckAudioDevice:(unsigned int)arg1 duckedLevel:(float)arg2 rampDuration:(float)arg3;
@property(nonatomic) BOOL duckOthersOption;
- (double)getRecordBufferDuration;
- (BOOL)setRecordBufferDuration:(double)arg1;
- (void)setSynchronousCallbackEnabled:(BOOL)arg1;
- (struct AudioStreamBasicDescription)getLPCMAudioStreamBasicDescription;
- (id)recordSettings;
- (void)reset;
- (void)resetAudioSession;
- (void)prewarmAudioSession;
- (void)preheat;
- (BOOL)setCurrentContext:(id)arg1 error:(id *)arg2;
- (BOOL)_activateAudioSession:(id *)arg1 forRetry:(BOOL)arg2;
- (void)_enableBargeInMode:(BOOL)arg1;
- (void)_performPendingAudioSessionActivateForReason:(id)arg1;
- (void)_cancelPendingAudioSessionActivateForReason:(id)arg1;
- (void)_scheduleActivateAudioSessionWithDelay:(double)arg1 forReason:(id)arg2 validator:(CDUnknownBlockType)arg3 completion:(CDUnknownBlockType)arg4;
- (BOOL)_activateAudioSessionWithDelay:(double)arg1 error:(id *)arg2;
- (BOOL)_isDelayedDuckingSupportedContext;
- (BOOL)_fetchLastTriggerInfo;
- (BOOL)prepareRecordWithSettings:(id)arg1 error:(id *)arg2;
- (BOOL)_shouldResetContextAtPrepare;
- (void)startController;
- (BOOL)initializeRecordSessionWithContext:(id)arg1;
- (void)_initializeTimerState;
- (void)_initializeAlarmState;
- (void)_initializeMediaPlayingState;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

