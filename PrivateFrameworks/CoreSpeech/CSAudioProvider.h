//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "CSAudioAlertProviding.h"
#import "CSAudioMeterProviding.h"
#import "CSAudioMetricProviding.h"
#import "CSAudioPreprocessorDelegate.h"
#import "CSAudioRecorderDelegate.h"
#import "CSAudioServerCrashMonitorDelegate.h"
#import "CSAudioSessionProviding.h"
#import "CSAudioStreamProviding.h"
#import "CSTriggerInfoProviding.h"

@class CSAudioCircularBuffer, CSAudioPreprocessor, CSAudioRecordContext, CSAudioRecorder, CSOSTransaction, NSHashTable, NSMutableArray, NSMutableDictionary, NSObject<OS_dispatch_group>, NSObject<OS_dispatch_queue>, NSString, NSUUID;

@interface CSAudioProvider : NSObject <CSAudioRecorderDelegate, CSAudioServerCrashMonitorDelegate, CSAudioPreprocessorDelegate, CSAudioStreamProviding, CSAudioSessionProviding, CSAudioMetricProviding, CSAudioAlertProviding, CSAudioMeterProviding, CSTriggerInfoProviding>
{
    BOOL _audioSystemRecovering;
    BOOL _waitingForAlertFinish;
    NSString *_UUID;
    NSObject<OS_dispatch_queue> *_recordQueue;
    CSAudioRecorder *_audioRecorder;
    unsigned long long _streamState;
    NSHashTable *_startPendingStreams;
    NSHashTable *_startPendingOnStoppingStreams;
    NSHashTable *_alertPlaybackFinishWaitingStreams;
    NSHashTable *_streams;
    NSHashTable *_stopPendingStreams;
    NSMutableArray *_pendingStartCompletions;
    NSMutableArray *_alertPlaybackFinishWaitingCompletions;
    NSMutableArray *_pendingStopCompletions;
    NSMutableDictionary *_startPendingOnStoppingStreamToCompletionDict;
    id <CSAudioProviderDelegate> _providerDelegate;
    id <CSAudioSessionProvidingDelegate> _sessionDelegate;
    NSMutableArray *_streamHolders;
    NSHashTable *_historicalBufferRequestStreams;
    CSAudioCircularBuffer *_circularBuffer;
    id <CSAudioAlertProvidingDelegate> _alertDelegate;
    CSAudioRecordContext *_lastAudioRecorderContext;
    CSAudioPreprocessor *_audioPreprocessor;
    CSOSTransaction *_recordingTransaction;
    NSObject<OS_dispatch_group> *_recordingWillStartGroup;
    unsigned long long _audioStreamHandleId;
    NSUUID *_alertPlaybackFinishTimeoutToken;
    NSUUID *_startRecordingWatchDogToken;
    NSUUID *_stopRecordingWatchDogToken;
    unsigned long long _circularBufferStartHostTime;
    unsigned long long _circularBufferStartSampleCount;
}

@property(nonatomic) unsigned long long circularBufferStartSampleCount; // @synthesize circularBufferStartSampleCount=_circularBufferStartSampleCount;
@property(nonatomic) unsigned long long circularBufferStartHostTime; // @synthesize circularBufferStartHostTime=_circularBufferStartHostTime;
@property(retain, nonatomic) NSUUID *stopRecordingWatchDogToken; // @synthesize stopRecordingWatchDogToken=_stopRecordingWatchDogToken;
@property(retain, nonatomic) NSUUID *startRecordingWatchDogToken; // @synthesize startRecordingWatchDogToken=_startRecordingWatchDogToken;
@property(retain, nonatomic) NSUUID *alertPlaybackFinishTimeoutToken; // @synthesize alertPlaybackFinishTimeoutToken=_alertPlaybackFinishTimeoutToken;
@property(nonatomic) unsigned long long audioStreamHandleId; // @synthesize audioStreamHandleId=_audioStreamHandleId;
@property(nonatomic) BOOL waitingForAlertFinish; // @synthesize waitingForAlertFinish=_waitingForAlertFinish;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *recordingWillStartGroup; // @synthesize recordingWillStartGroup=_recordingWillStartGroup;
@property(retain, nonatomic) CSOSTransaction *recordingTransaction; // @synthesize recordingTransaction=_recordingTransaction;
@property(retain, nonatomic) CSAudioPreprocessor *audioPreprocessor; // @synthesize audioPreprocessor=_audioPreprocessor;
@property(nonatomic) BOOL audioSystemRecovering; // @synthesize audioSystemRecovering=_audioSystemRecovering;
@property(retain, nonatomic) CSAudioRecordContext *lastAudioRecorderContext; // @synthesize lastAudioRecorderContext=_lastAudioRecorderContext;
@property(nonatomic) __weak id <CSAudioAlertProvidingDelegate> alertDelegate; // @synthesize alertDelegate=_alertDelegate;
@property(retain, nonatomic) CSAudioCircularBuffer *circularBuffer; // @synthesize circularBuffer=_circularBuffer;
@property(retain, nonatomic) NSHashTable *historicalBufferRequestStreams; // @synthesize historicalBufferRequestStreams=_historicalBufferRequestStreams;
@property(retain, nonatomic) NSMutableArray *streamHolders; // @synthesize streamHolders=_streamHolders;
@property(nonatomic) __weak id <CSAudioSessionProvidingDelegate> sessionDelegate; // @synthesize sessionDelegate=_sessionDelegate;
@property(nonatomic) __weak id <CSAudioProviderDelegate> providerDelegate; // @synthesize providerDelegate=_providerDelegate;
@property(retain, nonatomic) NSMutableDictionary *startPendingOnStoppingStreamToCompletionDict; // @synthesize startPendingOnStoppingStreamToCompletionDict=_startPendingOnStoppingStreamToCompletionDict;
@property(retain, nonatomic) NSMutableArray *pendingStopCompletions; // @synthesize pendingStopCompletions=_pendingStopCompletions;
@property(retain, nonatomic) NSMutableArray *alertPlaybackFinishWaitingCompletions; // @synthesize alertPlaybackFinishWaitingCompletions=_alertPlaybackFinishWaitingCompletions;
@property(retain, nonatomic) NSMutableArray *pendingStartCompletions; // @synthesize pendingStartCompletions=_pendingStartCompletions;
@property(retain, nonatomic) NSHashTable *stopPendingStreams; // @synthesize stopPendingStreams=_stopPendingStreams;
@property(retain, nonatomic) NSHashTable *streams; // @synthesize streams=_streams;
@property(retain, nonatomic) NSHashTable *alertPlaybackFinishWaitingStreams; // @synthesize alertPlaybackFinishWaitingStreams=_alertPlaybackFinishWaitingStreams;
@property(retain, nonatomic) NSHashTable *startPendingOnStoppingStreams; // @synthesize startPendingOnStoppingStreams=_startPendingOnStoppingStreams;
@property(retain, nonatomic) NSHashTable *startPendingStreams; // @synthesize startPendingStreams=_startPendingStreams;
@property(nonatomic) unsigned long long streamState; // @synthesize streamState=_streamState;
@property(retain, nonatomic) CSAudioRecorder *audioRecorder; // @synthesize audioRecorder=_audioRecorder;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *recordQueue; // @synthesize recordQueue=_recordQueue;
@property(readonly, nonatomic) NSString *UUID; // @synthesize UUID=_UUID;
- (void).cxx_destruct;
- (BOOL)_shouldHandleStartPendingOnStopping:(unsigned long long)arg1 withStopReason:(long long)arg2;
- (void)_clearDidStopRecordingDelegateWatchDog;
- (void)_scheduleDidStopRecordingDelegateWatchDog:(id)arg1;
- (void)_scheduleDidStopRecordingDelegateWatchDog;
- (void)_clearDidStartRecordingDelegateWatchDog;
- (void)_schduleDidStartRecordingDelegateWatchDogWithToken:(id)arg1;
- (void)_scheduleDidStartRecordingDelegateWatchDog;
- (void)_releaseRecordingTransactionIfNeeded;
- (void)_holdRecordingTransactionIfNeeded;
- (id)_streamStateName:(unsigned long long)arg1;
- (void)_handleAudioSystemFailure;
- (void)CSAudioServerCrashMonitorDidReceiveServerRestart:(id)arg1;
- (void)CSAudioServerCrashMonitorDidReceiveServerCrash:(id)arg1;
- (void)audioRecorderDisconnected:(id)arg1;
- (void)audioRecorderBuiltInAudioStreamInvalidated:(id)arg1 error:(id)arg2;
- (void)notifyProviderContextChanged;
- (void)audioRecorderDidFinishAlertPlayback:(id)arg1 ofType:(long long)arg2 error:(id)arg3;
- (void)_didReceiveFinishStartAlertPlaybackAt:(unsigned long long)arg1;
- (void)_scheduleAlertFinishTimeout:(double)arg1;
- (void)audioRecorderRecordHardwareConfigurationDidChange:(id)arg1 toConfiguration:(long long)arg2;
- (BOOL)isNarrowBand;
- (BOOL)isRecording;
- (void)audioRecorderBufferAvailable:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 buffer:(id)arg3;
- (void)audioRecorderBufferAvailable:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 buffer:(id)arg3 remoteVAD:(id)arg4 atTime:(unsigned long long)arg5;
- (void)_forwardAudioChunk:(id)arg1 remoteVAD:(id)arg2 atTime:(unsigned long long)arg3 toStream:(id)arg4;
- (void)_processAudioBuffer:(id)arg1 remoteVAD:(id)arg2 atTime:(unsigned long long)arg3;
- (void)_fetchHistoricalAudioAndForwardToStream:(id)arg1 remoteVAD:(id)arg2;
- (void)_processAudioBufferForWatch:(id)arg1 remoteVAD:(id)arg2 atTime:(unsigned long long)arg3;
- (void)audioRecorderWillBeDestroyed:(id)arg1;
- (void)audioRecorderStreamHandleIdInvalidated:(unsigned long long)arg1;
- (void)audioRecorderDidStopRecord:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 reason:(long long)arg3;
- (void)audioRecorderDidStartRecord:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 successfully:(BOOL)arg3 error:(id)arg4;
- (void)audioPreprocessor:(id)arg1 hasAvailableBuffer:(id)arg2 atTime:(unsigned long long)arg3;
- (BOOL)_shouldStopRecording;
- (BOOL)_isVoiceTriggerInfoAvailableLocally:(id)arg1;
- (void)triggerInfoForContext:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (float)averagePowerForChannel:(unsigned long long)arg1;
- (float)peakPowerForChannel:(unsigned long long)arg1;
- (void)updateMeters;
- (void)setMeteringEnabled:(BOOL)arg1;
- (id)audioMetric;
- (void)configureAlertBehavior:(id)arg1;
- (unsigned long long)alertStartTime;
- (BOOL)playRecordStartingAlertAndResetEndpointer;
- (BOOL)_didPlayStartAlertSoundForSiri:(id)arg1 audioStream:(id)arg2;
- (BOOL)playAlertSoundForType:(long long)arg1;
- (BOOL)setAlertSoundFromURL:(id)arg1 forType:(long long)arg2;
- (void)setAudioAlertDelegate:(id)arg1;
- (void)duckAudioDevice:(unsigned int)arg1 duckedLevel:(float)arg2 rampDuration:(float)arg3;
- (void)enableMiniDucking:(BOOL)arg1;
- (void)setDuckOthersOption:(BOOL)arg1;
- (BOOL)duckOthersOption;
- (BOOL)_deactivateAudioSession:(unsigned long long)arg1 error:(id *)arg2;
- (BOOL)deactivateAudioSession:(unsigned long long)arg1 error:(id *)arg2;
- (BOOL)_activateAudioSessionWithReason:(unsigned long long)arg1 error:(id *)arg2;
- (BOOL)activateAudioSessionWithReason:(unsigned long long)arg1 error:(id *)arg2;
- (BOOL)prewarmAudioSessionWithError:(id *)arg1;
- (void)setAudioSessionDelegate:(id)arg1;
- (id)playbackRoute;
- (id)recordSettings;
- (id)recordDeviceInfo;
- (id)recordRoute;
- (void)cancelAudioStreamHold:(id)arg1;
- (id)holdAudioStreamWithDescription:(id)arg1 timeout:(double)arg2;
- (void)_saveRecordingBufferFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 toURL:(id)arg3;
- (void)saveRecordingBufferFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 toURL:(id)arg3;
- (void)saveRecordingBufferToEndFrom:(unsigned long long)arg1 toURL:(id)arg2;
- (id)_audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2;
- (id)audioChunkToEndFrom:(unsigned long long)arg1;
- (id)audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2;
- (void)_stopAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)stopAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_handleDidStopAudioStreamWithReason:(long long)arg1;
- (void)_postEpilogueAudioStream;
- (void)_preEpilogueAudioStream;
- (void)_handleDidStartAudioStreamWithResult:(BOOL)arg1 error:(id)arg2;
- (void)_resetCircularBufferStartTime;
- (void)_startAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)prepareAudioStream:(id)arg1 request:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (BOOL)prepareAudioStreamSync:(id)arg1 request:(id)arg2 error:(id *)arg3;
- (void)startAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_tearDownCircularBufferIfNeeded;
- (void)_createCircularBufferIfNeeded;
- (void)_prepareAudioStream:(id)arg1 request:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (BOOL)_prepareAudioStreamSync:(id)arg1 request:(id)arg2 error:(id *)arg3;
- (void)audioStreamWithRequest:(id)arg1 streamName:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (id)audioStreamWithRequest:(id)arg1 streamName:(id)arg2 error:(id *)arg3;
- (id)_audioStreamWithRequest:(id)arg1 streamName:(id)arg2 error:(id *)arg3;
- (BOOL)setCurrentContext:(id)arg1 error:(id *)arg2;
- (void)setAudioProviderDelegate:(id)arg1;
- (void)start;
- (id)initWithAudioStreamHandleId:(unsigned long long)arg1 audioRecorder:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

