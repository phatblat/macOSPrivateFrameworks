//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSViewController.h"

#import "BannerContainerViewDelegate.h"
#import "BannerDelegate.h"
#import "FindBannerDelegate.h"
#import "SearchableWKViewFullScreenDelegate.h"

@class BannerContainerView, FileWrapper, FindBanner, HeaderFooterPrintRenderer, NSArray, NSData, NSMutableArray, NSString, NSURL, SearchableWKView, TabContentViewController, WKWebsiteDataStore;

__attribute__((visibility("hidden")))
@interface WebViewController : NSViewController <FindBannerDelegate, BannerContainerViewDelegate, BannerDelegate, SearchableWKViewFullScreenDelegate>
{
    struct RefPtr<Safari::WebViewControllerWKAdapter, WTF::DumbPtrTraits<Safari::WebViewControllerWKAdapter>> _webViewControllerWKAdapter;
    NSMutableArray *_bannerActionQueue;
    BannerContainerView *_bannerContainerView;
    NSMutableArray *_installedBanners;
    NSString *_suggestedFilenameForFrameToSave;
    struct WKRetainPtr<const OpaqueWKPageConfiguration *> _configuration;
    BOOL _isDeferringViewInWindowChanges;
    BOOL _isClosed;
    BOOL _isSavingAsPDF;
    BOOL __isSavingAsWebArchive;
    SearchableWKView *_webView;
    HeaderFooterPrintRenderer *_headerFooterPrintRenderer;
    unsigned long long _browsingMode;
    WKWebsiteDataStore *_websiteDataStore;
    struct Frame _frameToSave;
    NSURL *_urlToSave;
    FileWrapper *_fileWrapperToSave;
    NSData *_dataForFrameToSave;
    NSData *_dataForWebArchiveToSave;
    FindBanner *_findBanner;
    double _topContentInset;
}

+ (void)enumerateWebViewControllersUsingBlock:(CDUnknownBlockType)arg1;
+ (id)webViewControllerForPage:(const struct Page *)arg1;
+ (id)_pagesToWebViewControllers;
@property(nonatomic) double topContentInset; // @synthesize topContentInset=_topContentInset;
@property(readonly, nonatomic) FindBanner *findBanner; // @synthesize findBanner=_findBanner;
@property(readonly, copy, nonatomic) NSArray *installedBanners; // @synthesize installedBanners=_installedBanners;
@property(readonly, nonatomic) BOOL _isSavingAsWebArchive; // @synthesize _isSavingAsWebArchive=__isSavingAsWebArchive;
@property(readonly, copy, nonatomic) NSData *dataForWebArchiveToSave; // @synthesize dataForWebArchiveToSave=_dataForWebArchiveToSave;
@property(readonly, copy, nonatomic) NSData *dataForFrameToSave; // @synthesize dataForFrameToSave=_dataForFrameToSave;
@property(readonly, nonatomic) FileWrapper *fileWrapperToSave; // @synthesize fileWrapperToSave=_fileWrapperToSave;
@property(readonly, nonatomic) NSURL *urlToSave; // @synthesize urlToSave=_urlToSave;
@property(readonly, nonatomic) struct Frame frameToSave; // @synthesize frameToSave=_frameToSave;
@property(readonly, nonatomic) BOOL isSavingAsPDF; // @synthesize isSavingAsPDF=_isSavingAsPDF;
@property(readonly, nonatomic) BOOL isClosed; // @synthesize isClosed=_isClosed;
@property(readonly, nonatomic) WKWebsiteDataStore *websiteDataStore; // @synthesize websiteDataStore=_websiteDataStore;
@property(readonly, nonatomic) unsigned long long browsingMode; // @synthesize browsingMode=_browsingMode;
- (id).cxx_construct;
- (void).cxx_destruct;
- (BOOL)_isWebViewInFullScreenMode;
- (void)toggleWebInspector;
- (BOOL)setCustomUserAgent:(id)arg1 reloadPage:(BOOL)arg2;
@property(copy, nonatomic) NSString *customUserAgent;
@property(readonly, copy, nonatomic) NSString *userAgent;
@property(readonly, nonatomic) BOOL canShowWebInspector;
- (void)_setTextZoomFactor:(double)arg1;
- (double)_textZoomFactor;
- (void)makeTextSmaller;
- (void)makeTextBigger;
- (BOOL)canMakeTextSmaller;
- (BOOL)canMakeTextBigger;
- (void)registerSiteZoomPreference;
- (id)currentZoomPreference;
- (BOOL)contentIsCapableOfZoom;
@property(nonatomic, setter=_setZoomFactor:) double zoomFactor; // @dynamic zoomFactor;
- (double)_zoomFactor;
- (BOOL)canResetZoom;
- (BOOL)canZoomOut;
- (BOOL)canZoomIn;
- (void)resetZoom;
- (void)zoomOut;
- (void)zoomIn;
- (BOOL)_fullPageZoomEnabled;
- (BOOL)_zoomsTextOnly;
- (void)_perSitePageZoomDidChange:(id)arg1;
- (void)_defaultPageZoomDidChange:(id)arg1;
- (void)_zoomPreferencesDidLoad:(id)arg1;
- (void)updateSiteZoomPreference;
- (void)moveBannerContainerToFollowWebContent;
- (void)findBanner:(id)arg1 highlightAllMatchesForString:(id)arg2 findOptions:(unsigned int)arg3 maximumNumberOfMatches:(unsigned long long)arg4;
- (void)findBanner:(id)arg1 startFindingString:(id)arg2 findOptions:(unsigned int)arg3 maximumNumberOfMatches:(unsigned long long)arg4;
- (void)hideFindOverlayForBanner:(id)arg1;
- (BOOL)shouldUpdateFindPasteboardForBanner:(id)arg1;
- (BOOL)isReadyToFindForBanner:(id)arg1;
- (id)_createFindInPageBanner;
@property(readonly, nonatomic, getter=_isCurrentPageSearchable) BOOL _currentPageSearchable;
- (void)findPreviousInPage;
@property(readonly, nonatomic) BOOL canFindPreviousInPage;
- (void)findNextInPage;
@property(readonly, nonatomic) BOOL canFindNextInPage;
- (void)focusContentSearchField;
- (void)hideFindInPageBannerAnimated:(BOOL)arg1;
- (void)showFindInPageBannerAnimated:(BOOL)arg1;
@property(readonly, nonatomic) BOOL canFocusContentSearchField;
@property(readonly, nonatomic) BOOL canHideFindInPageBanner;
@property(readonly, nonatomic) BOOL canShowFindInPageBanner;
@property(readonly, nonatomic, getter=isShowingFindInPageBanner) BOOL showingFindInPageBanner;
- (void)uninstallBanner:(id)arg1 animated:(BOOL)arg2;
- (void)_updateFocusAfterBannerUninstall;
- (void)bannerContainerViewDidUninstall:(id)arg1;
- (void)bannerContainerViewDidUpdateLayoutDuringAnimation:(id)arg1;
- (void)bannerContainerView:(id)arg1 didUninstallBanner:(id)arg2;
- (void)bannerContainerView:(id)arg1 willUninstallBanner:(id)arg2;
- (void)bannerContainerView:(id)arg1 installAnimationDidEndForBanner:(id)arg2;
- (void)bannerContainerView:(id)arg1 didInstallBanner:(id)arg2;
- (void)bannerContainerView:(id)arg1 willInstallBanner:(id)arg2;
- (void)_createBannerContainerViewIfNeeded;
- (void)_startNextQueuedBannerAction;
- (void)_queueBanner:(id)arg1 withActionType:(long long)arg2 animated:(BOOL)arg3;
- (id)_viewBelowBanner;
- (void)_hideAllBannerOverlays;
- (void)hideAllBannersAnimated:(BOOL)arg1;
- (void)queueUninstallationOfBanner:(id)arg1 animated:(BOOL)arg2;
- (void)queueInstallationOfBanner:(id)arg1 animated:(BOOL)arg2;
- (BOOL)isBannerInstalled:(id)arg1;
@property(readonly, nonatomic, getter=isTopContentInsetCurrentlyUsed) BOOL topContentInsetCurrentlyUsed;
@property(readonly, nonatomic) HeaderFooterPrintRenderer *headerFooterPrintRenderer; // @synthesize headerFooterPrintRenderer=_headerFooterPrintRenderer;
@property(readonly, nonatomic) BOOL canPrint;
- (void)saveDialogDidClose;
- (void)_presentSaveDialog;
- (void)_presentSaveDialogIfReadyForFrame:(const struct Frame *)arg1;
- (void)didReceiveSuggestedFilename:(id)arg1 forSavingFrame:(const struct Frame *)arg2;
- (void)presentSavePDFDialogForFrame:(const struct Frame *)arg1;
- (void)presentSaveDialogForFileWrapper:(id)arg1;
- (void)presentSaveDialogForFrame:(const struct Frame *)arg1;
- (id)_suggestedFilenameForFrameToSave;
- (id)_suggestedFilenameFromTitle:(id)arg1;
@property(readonly, copy, nonatomic) NSString *suggestedFilenameToSave;
@property(readonly, copy, nonatomic) NSString *mimeTypeForSaving;
@property(readonly, nonatomic) BOOL isSaveDialogPending;
@property(readonly, nonatomic) BOOL canSave;
- (void)endDeferringViewInWindowChangesSync;
- (void)endDeferringViewInWindowChanges;
- (void)beginDeferringViewInWindowChanges;
- (void)dismissContentRelativeChildWindows;
- (Ref_a0637525)createContentViewController;
@property(readonly, nonatomic) TabContentViewController *tabContentViewController;
@property(readonly, nonatomic) int webProcessIdentifier;
@property(readonly, nonatomic) struct Page page;
@property(readonly, nonatomic, getter=isShowingStandaloneImage) BOOL showingStandaloneImage;
@property(readonly, copy, nonatomic) NSString *pageTitle;
@property(readonly, nonatomic) NSURL *committedURL;
@property(readonly, nonatomic) BOOL usesPrivateBrowsing;
@property(readonly, nonatomic) struct WebViewControllerWKAdapter *webViewControllerWKAdapter;
- (void)invalidate;
- (void)_willClosePage;
- (void)_close;
- (id)_createWebViewWithConfigurationRef:(struct OpaqueWKPageConfiguration *)arg1;
- (BOOL)tryClose;
- (void)close;
- (void)dealloc;
- (void)viewDidLoad;
- (void)loadView;
@property(readonly, nonatomic) SearchableWKView *webView; // @synthesize webView=_webView;
- (id)initWithContext:(const struct Context *)arg1 pageGroup:(const struct PageGroup *)arg2 relatedToPage:(const struct Page *)arg3 browsingMode:(unsigned long long)arg4 websiteDataStore:(id)arg5;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

