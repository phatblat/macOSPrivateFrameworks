//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <Safari/WebViewController.h>

#import "AppExtensionContentScriptMessageReceiver.h"
#import "AuthenticationSheetRequestDelegate.h"
#import "AutoFillFunctionBarProviderDelegate.h"
#import "AutomaticBugCaptureObserver.h"
#import "BookmarksViewControllerDelegate.h"
#import "BrowserViewControllerLoading.h"
#import "BrowserViewIconLoadingDelegate.h"
#import "DimmingViewDelegate.h"
#import "ExtensionGalleryCertificateHandler.h"
#import "FormAutoFillCompletionControllerObserver.h"
#import "FormMetadataObserver.h"
#import "PagePreviewAnimationControllerDelegate.h"
#import "ReaderActivationDelegate.h"
#import "ReaderAvailabilityDelegate.h"
#import "ReaderStateObserver.h"
#import "RemoteNotificationControllerClient.h"
#import "RemoteNotificationPermissionHandler.h"
#import "SandboxExtensionPresentationDelegate.h"
#import "SearchableWKViewCancelDelegate.h"
#import "TabDialogPresentationManagerDelegate.h"
#import "TabDialogPresenter.h"
#import "WBSCertificateWarningPageHandler.h"
#import "WBSFluidProgressStateSource.h"
#import "WebClipBannerDelegate.h"

@class AutoFillFunctionBarProvider, BackgroundLoad, BookmarksViewController, BrowserDocument, BrowserTabPersistentState, BrowserTabViewItem, BrowserWKView, BrowserWindowController, CKContextCompleter, CKContextResponse, ContinuousReadingListPageItem, ContinuousReadingListViewController, DefaultBrowserBanner, FullscreenUnifiedFieldWindowController, JavaScriptDialogSuppressionManager, NSArray, NSData, NSDictionary, NSHashTable, NSMutableArray, NSMutableDictionary, NSMutableSet, NSSet, NSString, NSTimer, NSURL, NSView, NSWindow, PagePreviewAnimationController, PointerLockBanner, PrintSheetSuppressionManager, PrivateBrowsingExplanationBanner, ReadingListItem, ResponsiveDesignViewController, SearchableWKView, SecIdentitiesCache, StartPageViewController, StatusMessage, TabContentView, TabDialogPresentationManager, TabDialogViewController, TextFieldInformation, UnresponsiveWebProcessHandler, WBSFluidProgressState, WBSFormMetadata, WBSHistoryContextController, WBSHistoryVisit, WBSMultiRoundAutoFillManager, WBSMutableOrderedSet, WBSSameDocumentNavigationToHistoryVisitCorrelator, WebClipBanner, WebCrashBanner, _WKRemoteObjectInterface;

__attribute__((visibility("hidden")))
@interface BrowserViewController : WebViewController <AppExtensionContentScriptMessageReceiver, AutomaticBugCaptureObserver, BookmarksViewControllerDelegate, BrowserViewControllerLoading, ExtensionGalleryCertificateHandler, FormAutoFillCompletionControllerObserver, FormMetadataObserver, PagePreviewAnimationControllerDelegate, ReaderStateObserver, RemoteNotificationControllerClient, RemoteNotificationPermissionHandler, BrowserViewIconLoadingDelegate, TabDialogPresentationManagerDelegate, WebClipBannerDelegate, SandboxExtensionPresentationDelegate, WBSCertificateWarningPageHandler, AutoFillFunctionBarProviderDelegate, AuthenticationSheetRequestDelegate, DimmingViewDelegate, ReaderActivationDelegate, ReaderAvailabilityDelegate, SearchableWKViewCancelDelegate, TabDialogPresenter, WBSFluidProgressStateSource>
{
    struct URLRequest _initialContents;
    BOOL _isBetweenSidebarAnimationInformationGatheringSteps;
    BOOL _waitingToForcePauseWebProcess;
    RefPtr_55cde54d _sheetRequest;
    struct RefPtr<Safari::ReaderController, WTF::DumbPtrTraits<Safari::ReaderController>> _readerController;
    NSURL *_navigationURLFromClientRedirect;
    BOOL _clientRedirectWasDoneDuringPageNavigation;
    BOOL _alwaysInitiateLoadsInContinuousModeUsingCurrentController;
    BOOL _shouldStayInContinuousModeOnNextNavigationToBackForwardListItem;
    unique_ptr_60e845e1 _queuedNavigation;
    struct unique_ptr<Safari::BrowserPageDiagnosticLoggingClient, std::__1::default_delete<Safari::BrowserPageDiagnosticLoggingClient>> _pageDiagnosticLoggingClient;
    struct unique_ptr<Safari::BrowserPageFindClient, std::__1::default_delete<Safari::BrowserPageFindClient>> _pageFindClient;
    struct unique_ptr<Safari::BrowserPageFormClient, std::__1::default_delete<Safari::BrowserPageFormClient>> _pageFormClient;
    struct unique_ptr<Safari::BrowserPageNavigationClient, std::__1::default_delete<Safari::BrowserPageNavigationClient>> _pageNavigationClient;
    struct unique_ptr<Safari::BrowserPageContextMenuClient, std::__1::default_delete<Safari::BrowserPageContextMenuClient>> _pageContextMenuClient;
    struct unique_ptr<Safari::BrowserPageUIClient, std::__1::default_delete<Safari::BrowserPageUIClient>> _pageUIClient;
    BOOL _hasDisplayedValidURL;
    BOOL _hasDisplayedStartPage;
    int _currentPageType;
    int _expectedPageType;
    int _previousPageType;
    NSURL *_pendingBrowserInitiatedURL;
    NSString *_httpReferrerForFallbackURLs;
    unique_ptr_aba2cdfe _fallbackURLs;
    struct BackForwardListItem _previousItem;
    CDUnknownBlockType _completionHandlerForTryingToCloseBeforeCommittingToBackgroundLoad;
    long long _initiateLoadOperation;
    CDUnknownBlockType _initiateLoadBlock;
    NSMutableArray *_authenticationChallengeQueue;
    NSString *_committedEVCertificateOrganizationName;
    BOOL _safeBrowsingWarningIgnored;
    BOOL _isLoadingSafeBrowsingWarningPage;
    struct unique_ptr<Safari::SecurityInfo, std::__1::default_delete<Safari::SecurityInfo>> _securityInfo;
    unsigned long long _safeBrowsingCheckSeed;
    long long _tabLabelLifetime;
    BOOL _shouldResetDialogSuppressionOnNextCommit;
    PrintSheetSuppressionManager *_printSheetSuppressionManager;
    JavaScriptDialogSuppressionManager *_showModalDialogSuppressionManager;
    NSString *_internetAccountDomain;
    NSString *_internetAccountUsername;
    NSString *_internetAccountPassword;
    BOOL _readyToDisplayInternetAccountSetupPrompt;
    BOOL _shouldDisplayInternetAccountSetupPrompt;
    struct BackForwardListItem _searchResultsForSnapBack;
    ResponsiveDesignViewController *_responsiveDesignModeViewController;
    NSString *_userAgentBeforeResponsiveMode;
    struct optional<AutoplaySignal> _autoplaySignalToSend;
    struct optional<signed char> _navigatedViaBackForwardList;
    struct RefPtr<Safari::FormCompletionController, WTF::DumbPtrTraits<Safari::FormCompletionController>> _formCompletionController;
    unsigned long long _formTextStatusValidationRequestIdentifier;
    struct HashMap<Safari::WK::BackForwardListItem, WTF::RetainPtr<NSString>, Safari::WK::ObjectSubclassHash<Safari::WK::BackForwardListItem>, WTF::HashTraits<Safari::WK::BackForwardListItem>, WTF::HashTraits<WTF::RetainPtr<NSString>>> _backForwardItemToGeneratedPasswordMap;
    WBSFormMetadata *_unsubmittedFormMetadata;
    NSDictionary *_unsubmittedPasswordGenerationCredentials;
    struct Frame _unsubmittedFormSourceFrame;
    struct HashSet<Safari::WK::Frame, Safari::WK::ObjectSubclassHash<Safari::WK::Frame>, WTF::HashTraits<Safari::WK::Frame>> _framesThatHaveBeenPrefilled;
    struct HashSet<Safari::WK::Frame, Safari::WK::ObjectSubclassHash<Safari::WK::Frame>, WTF::HashTraits<Safari::WK::Frame>> _framesThatHaveBeenAutoFilled;
    id <FormAutoFiller> _formAutoFillerProxy;
    _WKRemoteObjectInterface *_formMetadataObserverInterface;
    TextFieldInformation *_editedPasswordFieldInformation;
    PrivateBrowsingExplanationBanner *_privateBrowsingExplanationBanner;
    DefaultBrowserBanner *_defaultBrowserBanner;
    WebCrashBanner *_webCrashBanner;
    WebClipBanner *_webClipBanner;
    BookmarksViewController *_bookmarksViewController;
    FullscreenUnifiedFieldWindowController *_fullscreenWindowController;
    NSURL *_openSearchURLToProcessAfterBackgroundLoadIsCommitted;
    NSMutableArray *_pagePreviewHistoryOperations;
    NSTimer *_updateAudioUITimer;
    BOOL _shouldGoBackAfterBackgroundNavigationIsCommitted;
    NSHashTable *_spawnedTabsBrowserViewControllers;
    struct HashSet<Safari::WK::BackForwardListItem, Safari::WK::ObjectSubclassHash<Safari::WK::BackForwardListItem>, WTF::HashTraits<Safari::WK::BackForwardListItem>> _invalidatedBackForwardItems;
    TabDialogPresentationManager *_tabDialogPresentationManager;
    BOOL _didCrashOrWasTerminatedForBeingUnresponsiveInTheBackground;
    BOOL _shouldResetOriginatingWindowWithPossibleJavaScriptAccessOnNextCommit;
    PagePreviewAnimationController *_pagePreviewAnimationController;
    NSMutableSet *_pagePreviewBrowserViewControllers;
    BOOL _pagePreviewNeedsReloadOnTabTransition;
    NSMutableDictionary *_plugInInfoForInitializationErrors;
    NSMutableArray *_plugInInfoInitializationErrorQueue;
    BOOL _didScheduleToShowPromptForClickToUsePlugInInParentTab;
    BOOL _isCurrentlyProcessingInitializationErrors;
    struct HashMap<Safari::WK::Frame, WTF::RetainPtr<WBSFormAutoFillMetadataCorrector>, Safari::WK::ObjectSubclassHash<Safari::WK::Frame>, WTF::HashTraits<Safari::WK::Frame>, WTF::HashTraits<WTF::RetainPtr<WBSFormAutoFillMetadataCorrector>>> _formAutoFillMetadataCorrectorsByFrame;
    AutoFillFunctionBarProvider *_autoFillFunctionBarProvider;
    BOOL _hasCheckedForPIPBeforePageUnloadForCurrentNavigation;
    id <AppExtensionMessageReceiver> _appExtensionMessageReceiverProxy;
    _WKRemoteObjectInterface *_appExtensionContentScriptMessageReceiverInterface;
    struct RefPtr<Safari::RemoteNotificationVerificationRequest, WTF::DumbPtrTraits<Safari::RemoteNotificationVerificationRequest>> _remoteNotificationVerificationRequest;
    id <RemoteNotificationStateObserver> _remoteNotificationStateObserverProxy;
    _WKRemoteObjectInterface *_remoteNotificationStateObserverInterface;
    _WKRemoteObjectInterface *_remoteNotificationPermissionHandlerInterface;
    _WKRemoteObjectInterface *_readerStateObserverInterface;
    struct unique_ptr<Safari::PerformanceCollector, std::__1::default_delete<Safari::PerformanceCollector>> _performanceCollector;
    struct RefPtr<Safari::PerformanceTesting, WTF::DumbPtrTraits<Safari::PerformanceTesting>> _performanceTesting;
    _WKRemoteObjectInterface *_certicateWarningPageHandlerInterface;
    struct Dictionary _certificateWarningContext;
    id <WBSCertificateWarningPagePresenter> _certificateWarningPagePresenterProxy;
    unsigned long long _snapshotsNextRequestIdentifier;
    NSMutableDictionary *_webViewSnapshotRequestsToCompletionHandlers;
    unsigned long long _postVisuallyNonEmptyLayoutBlockRequestIdentifier;
    NSMutableDictionary *_postVisuallyNonEmptyLayoutBlocks;
    unsigned long long _visibleContentsAsDataURLNextRequestIdentifier;
    NSMutableDictionary *_visibleContentsAsDataURLRequestsToCompletionHandlers;
    _WKRemoteObjectInterface *_automaticBugCaptureObserver;
    SecIdentitiesCache *_secIdentitiesCache;
    BOOL _provisionalExtendedValidationCertificateOrganizationNameHasBeenDetermined;
    CKContextCompleter *_cachedContextCompleter;
    WBSHistoryContextController *_contextController;
    struct optional<SearchSuggestionNavigation> _searchSuggestionNavigation;
    NSString *_domainWhereUserDeclinedAutomaticStrongPassword;
    NSMutableDictionary *_domainToPopUpWindowPreferenceValueMap;
    NSMutableArray *_blockedPopUpWindowConfigurations;
    WBSMutableOrderedSet *_allowedPopUpWindowDomainCache;
    unsigned long long _clientsWaitingOnSandboxPresentationControllerBeforeFileLoadBegins;
    _WKRemoteObjectInterface *_extensionGalleryCertificateHandler;
    BOOL _tryingToClose;
    BOOL _webPageIsUnresponsive;
    BOOL _mainDocumentDidFirstLayout;
    BOOL _mainDocumentDidFirstVisuallyNonEmptyLayout;
    BOOL _mainDocumentDidLoad;
    BOOL _webProcessForcePaused;
    BOOL _swapProcessesOnNavigation;
    BOOL _redirectOccurredWhileRecoveringFromWebProcessCrash;
    BOOL _waitingForSamplingProfilerOutput;
    BOOL _mainFrameLoadEndedInError;
    BOOL _shouldDownloadNextPage;
    BOOL _tryingToCloseBeforeCommittingToBackgroundLoad;
    BOOL _hasEverBeenVisible;
    BOOL _sensitiveFormFieldCurrentlyHasFocus;
    BOOL _sensitiveFormFieldHasEverHadFocus;
    BOOL _committedExtendedValidationCertificateOrganizationNameHasBeenDetermined;
    BOOL _restoringFromSessionStateData;
    BOOL _showingSecurityWarningPage;
    BOOL _shouldStartEmpty;
    BOOL _shouldShowOriginalURLInsteadOfExpectedURLInUnifiedField;
    BOOL _shouldBlockAllMouseEvents;
    BOOL _shouldBlockAllKeyEvents;
    BOOL _shouldBlockFirstResponder;
    BOOL _windowFocusDisabled;
    BOOL _movingToAnotherWindow;
    BOOL _wasFormTextEdited;
    BOOL _meetsEditedFormTextWarningCriteria;
    BOOL _preFillFormWasDeferred;
    BOOL _presentingSheetToSaveCredentials;
    BOOL _suppressingBeforeUnloadPrompts;
    BOOL _readerShouldBeShownIfPossible;
    BOOL _readerViewStale;
    BOOL _playingMutableMedia;
    BOOL _mediaCaptureMuted;
    BOOL _showingWebGLPolicyDialog;
    BOOL _inContinuousMode;
    BOOL _blockedFromKeyViewLoop;
    BOOL _pointerLocked;
    BOOL _shouldHideTransientBannerOnNextUserInitiatedNavigation;
    BOOL _shouldHideTransientBannerOnVisuallyNonEmptyLayout;
    BOOL _waitingToContinueUserActivity;
    BOOL _preservePlugInInitializationErrorsOnNextCommittedLoad;
    BOOL _overrideMaintainsInactiveSelectionForVoiceOver;
    BOOL _suppressJavaScriptDialogPresentation;
    BOOL _showingPromptToUsePlugIn;
    BOOL _didShowManagePlugInPrompt;
    BOOL _waitingForBytecodeProfile;
    BOOL _skipAnimationsWhenDismissingPendingTabDialogs;
    unsigned int _tabIdentifier;
    int _loadingStatus;
    int _lastUsedStartPageMode;
    StartPageViewController *_startPageViewController;
    NSString *_authenticationHost;
    BrowserDocument *_document;
    BrowserViewController *_originatingContentViewControllerWithPossibleJavaScriptAccess;
    NSString *_originalURLString;
    NSString *_provisionalOriginalURLString;
    CKContextResponse *_contextResponse;
    NSString *_readerText;
    CDUnknownBlockType _backgroundDocumentFirstVisuallyNonEmptyLayoutHandler;
    double _bestWidthForCurrentPage;
    id <SandboxExtensionToken> _sandboxExtensionToken;
    NSURL *_originalRequestURL;
    long long _lastBackgroundTerminationReason;
    BackgroundLoad *_backgroundNavigationBackgroundLoad;
    BrowserTabPersistentState *_pendingTabStateToRestore;
    NSURL *_unifiedFieldFallbackURLForAboutBlank;
    WBSFluidProgressState *_fluidProgressState;
    WBSMultiRoundAutoFillManager *_multiRoundAutoFillManager;
    StatusMessage *_statusMessage;
    JavaScriptDialogSuppressionManager *_javaScriptDialogSuppressionManager;
    WBSSameDocumentNavigationToHistoryVisitCorrelator *_sameDocumentNavigationToHistoryVisitCorrelator;
    WBSHistoryVisit *_lastVisit;
    NSURL *_urlOfLoadingTopSite;
    NSDictionary *_initialReaderArticleScrollPositionAsDictionary;
    PagePreviewAnimationController *_parentPagePreviewAnimationController;
    NSString *_requestedTabLabel;
    NSString *_provisionalTabLabel;
    NSString *_committedTabLabel;
    unsigned long long _mutableMediaState;
    long long _mutedState;
    BrowserTabViewItem *_parentTab;
    struct BackForwardListItem _backForwardListItemForReturningToParentTab;
    ReadingListItem *_currentlyLoadedReadingListItem;
    unsigned long long _currentlyLoadedReadingListItemPageNumber;
    NSURL *_webFeedURL;
    NSString *_webFeedTitle;
    NSArray *_siteIconURLs;
    ContinuousReadingListPageItem *_readingListPageItemToLoadInContinuousMode;
    UnresponsiveWebProcessHandler *_unresponsiveWebProcessHandler;
    PointerLockBanner *_pointerLockBanner;
    BrowserViewController *_originatingModalDialogContentViewController;
    BrowserViewController *_blockingModalDialogContentViewController;
    struct PageLoadTestViewController *_pageLoadTestViewController;
    id <AuthenticationSessionNavigationHandling> _authenticationSessionNavigationHandler;
    Vector_81153489 _ancestorTabIdentifiers;
}

+ (id)resourceDirectoryURLForToken:(id)arg1;
+ (id)test_javaScriptDialogTitleForSecurityOrigin:(const struct SecurityOrigin *)arg1;
+ (id)javaScriptDialogTitleForURL:(id)arg1;
+ (void)enumerateBrowserContentViewControllersSharingWebProcessWithPID:(int)arg1 skippingContentViewController:(id)arg2 usingBlock:(CDUnknownBlockType)arg3;
+ (void)enumerateBrowserViewControllersUsingBlock:(CDUnknownBlockType)arg1;
+ (id)findBrowserViewControllerForSafariPage:(id)arg1;
+ (id)findAutoSelectableBrowserViewControllerWithURL:(id)arg1 windowPolicy:(long long)arg2 tabPlacementHint:(const struct TabPlacementHint *)arg3;
+ (id)browserViewControllerForPage:(const struct Page *)arg1;
@property(nonatomic) BOOL skipAnimationsWhenDismissingPendingTabDialogs; // @synthesize skipAnimationsWhenDismissingPendingTabDialogs=_skipAnimationsWhenDismissingPendingTabDialogs;
@property(nonatomic) __weak id <AuthenticationSessionNavigationHandling> authenticationSessionNavigationHandler; // @synthesize authenticationSessionNavigationHandler=_authenticationSessionNavigationHandler;
@property(nonatomic) struct PageLoadTestViewController *pageLoadTestViewController; // @synthesize pageLoadTestViewController=_pageLoadTestViewController;
@property(nonatomic, getter=isWaitingForBytecodeProfile) BOOL waitingForBytecodeProfile; // @synthesize waitingForBytecodeProfile=_waitingForBytecodeProfile;
@property(nonatomic) BOOL didShowManagePlugInPrompt; // @synthesize didShowManagePlugInPrompt=_didShowManagePlugInPrompt;
@property(nonatomic, getter=isShowingPromptToUsePlugIn) BOOL showingPromptToUsePlugIn; // @synthesize showingPromptToUsePlugIn=_showingPromptToUsePlugIn;
@property(nonatomic) __weak BrowserViewController *blockingModalDialogContentViewController; // @synthesize blockingModalDialogContentViewController=_blockingModalDialogContentViewController;
@property(nonatomic) __weak BrowserViewController *originatingModalDialogContentViewController; // @synthesize originatingModalDialogContentViewController=_originatingModalDialogContentViewController;
@property(nonatomic) BOOL suppressJavaScriptDialogPresentation; // @synthesize suppressJavaScriptDialogPresentation=_suppressJavaScriptDialogPresentation;
@property(nonatomic) BOOL overrideMaintainsInactiveSelectionForVoiceOver; // @synthesize overrideMaintainsInactiveSelectionForVoiceOver=_overrideMaintainsInactiveSelectionForVoiceOver;
@property(readonly, nonatomic) WebClipBanner *webClipBanner; // @synthesize webClipBanner=_webClipBanner;
@property(nonatomic) BOOL preservePlugInInitializationErrorsOnNextCommittedLoad; // @synthesize preservePlugInInitializationErrorsOnNextCommittedLoad=_preservePlugInInitializationErrorsOnNextCommittedLoad;
@property(nonatomic, getter=isWaitingToContinueUserActivity) BOOL waitingToContinueUserActivity; // @synthesize waitingToContinueUserActivity=_waitingToContinueUserActivity;
@property(readonly, nonatomic) PrivateBrowsingExplanationBanner *privateBrowsingExplanationBanner; // @synthesize privateBrowsingExplanationBanner=_privateBrowsingExplanationBanner;
@property(nonatomic) BOOL shouldHideTransientBannerOnVisuallyNonEmptyLayout; // @synthesize shouldHideTransientBannerOnVisuallyNonEmptyLayout=_shouldHideTransientBannerOnVisuallyNonEmptyLayout;
@property(readonly, nonatomic) BOOL shouldHideTransientBannerOnNextUserInitiatedNavigation; // @synthesize shouldHideTransientBannerOnNextUserInitiatedNavigation=_shouldHideTransientBannerOnNextUserInitiatedNavigation;
@property(readonly, nonatomic) WebCrashBanner *webCrashBanner; // @synthesize webCrashBanner=_webCrashBanner;
@property(nonatomic, getter=isPointerLocked) BOOL pointerLocked; // @synthesize pointerLocked=_pointerLocked;
@property(readonly, nonatomic) PointerLockBanner *pointerLockBanner; // @synthesize pointerLockBanner=_pointerLockBanner;
@property(readonly, nonatomic) UnresponsiveWebProcessHandler *unresponsiveWebProcessHandler; // @synthesize unresponsiveWebProcessHandler=_unresponsiveWebProcessHandler;
@property(nonatomic, getter=isBlockedFromKeyViewLoop) BOOL blockedFromKeyViewLoop; // @synthesize blockedFromKeyViewLoop=_blockedFromKeyViewLoop;
@property(nonatomic) BOOL alwaysInitiateLoadsInContinuousModeUsingCurrentController; // @synthesize alwaysInitiateLoadsInContinuousModeUsingCurrentController=_alwaysInitiateLoadsInContinuousModeUsingCurrentController;
@property(readonly, nonatomic) ContinuousReadingListPageItem *readingListPageItemToLoadInContinuousMode; // @synthesize readingListPageItemToLoadInContinuousMode=_readingListPageItemToLoadInContinuousMode;
@property(nonatomic, getter=isInContinuousMode) BOOL inContinuousMode; // @synthesize inContinuousMode=_inContinuousMode;
@property(copy, nonatomic) NSArray *siteIconURLs; // @synthesize siteIconURLs=_siteIconURLs;
@property(copy, nonatomic) NSString *webFeedTitle; // @synthesize webFeedTitle=_webFeedTitle;
@property(retain, nonatomic) NSURL *webFeedURL; // @synthesize webFeedURL=_webFeedURL;
@property(readonly, nonatomic) unsigned long long currentlyLoadedReadingListItemPageNumber; // @synthesize currentlyLoadedReadingListItemPageNumber=_currentlyLoadedReadingListItemPageNumber;
@property(readonly, nonatomic) ReadingListItem *currentlyLoadedReadingListItem; // @synthesize currentlyLoadedReadingListItem=_currentlyLoadedReadingListItem;
@property(nonatomic, getter=isShowingWebGLPolicyDialog) BOOL showingWebGLPolicyDialog; // @synthesize showingWebGLPolicyDialog=_showingWebGLPolicyDialog;
@property(nonatomic) struct BackForwardListItem backForwardListItemForReturningToParentTab; // @synthesize backForwardListItemForReturningToParentTab=_backForwardListItemForReturningToParentTab;
@property(readonly, nonatomic) __weak BrowserTabViewItem *parentTab; // @synthesize parentTab=_parentTab;
@property(nonatomic, getter=isMediaCaptureMuted) BOOL mediaCaptureMuted; // @synthesize mediaCaptureMuted=_mediaCaptureMuted;
@property(nonatomic) long long mutedState; // @synthesize mutedState=_mutedState;
@property(readonly, nonatomic, getter=isPlayingMutableMedia) BOOL playingMutableMedia; // @synthesize playingMutableMedia=_playingMutableMedia;
@property(readonly, nonatomic) unsigned long long mutableMediaState; // @synthesize mutableMediaState=_mutableMediaState;
@property(copy, nonatomic, setter=_setCommittedTabLabel:) NSString *committedTabLabel; // @synthesize committedTabLabel=_committedTabLabel;
@property(copy, nonatomic) NSString *provisionalTabLabel; // @synthesize provisionalTabLabel=_provisionalTabLabel;
@property(copy, nonatomic) NSString *requestedTabLabel; // @synthesize requestedTabLabel=_requestedTabLabel;
@property(nonatomic) __weak PagePreviewAnimationController *parentPagePreviewAnimationController; // @synthesize parentPagePreviewAnimationController=_parentPagePreviewAnimationController;
@property(nonatomic, getter=isReaderViewStale) BOOL readerViewStale; // @synthesize readerViewStale=_readerViewStale;
@property(copy, nonatomic) NSDictionary *initialReaderArticleScrollPositionAsDictionary; // @synthesize initialReaderArticleScrollPositionAsDictionary=_initialReaderArticleScrollPositionAsDictionary;
@property(nonatomic) BOOL readerShouldBeShownIfPossible; // @synthesize readerShouldBeShownIfPossible=_readerShouldBeShownIfPossible;
@property(retain, nonatomic) NSURL *urlOfLoadingTopSite; // @synthesize urlOfLoadingTopSite=_urlOfLoadingTopSite;
@property(nonatomic) int lastUsedStartPageMode; // @synthesize lastUsedStartPageMode=_lastUsedStartPageMode;
@property(retain, nonatomic) WBSHistoryVisit *lastVisit; // @synthesize lastVisit=_lastVisit;
@property(readonly, nonatomic) WBSSameDocumentNavigationToHistoryVisitCorrelator *sameDocumentNavigationToHistoryVisitCorrelator; // @synthesize sameDocumentNavigationToHistoryVisitCorrelator=_sameDocumentNavigationToHistoryVisitCorrelator;
@property(nonatomic, getter=isSuppressingBeforeUnloadPrompts) BOOL suppressingBeforeUnloadPrompts; // @synthesize suppressingBeforeUnloadPrompts=_suppressingBeforeUnloadPrompts;
@property(readonly, nonatomic) JavaScriptDialogSuppressionManager *javaScriptDialogSuppressionManager; // @synthesize javaScriptDialogSuppressionManager=_javaScriptDialogSuppressionManager;
@property(retain, nonatomic, setter=_setStatusMessage:) StatusMessage *statusMessage; // @synthesize statusMessage=_statusMessage;
@property(nonatomic, getter=isPresentingSheetToSaveCredentials) BOOL presentingSheetToSaveCredentials; // @synthesize presentingSheetToSaveCredentials=_presentingSheetToSaveCredentials;
@property(nonatomic) BOOL preFillFormWasDeferred; // @synthesize preFillFormWasDeferred=_preFillFormWasDeferred;
@property(readonly, nonatomic) WBSMultiRoundAutoFillManager *multiRoundAutoFillManager; // @synthesize multiRoundAutoFillManager=_multiRoundAutoFillManager;
@property(readonly, nonatomic) BOOL meetsEditedFormTextWarningCriteria; // @synthesize meetsEditedFormTextWarningCriteria=_meetsEditedFormTextWarningCriteria;
@property(readonly, nonatomic) BOOL wasFormTextEdited; // @synthesize wasFormTextEdited=_wasFormTextEdited;
@property(readonly, nonatomic) WBSFluidProgressState *fluidProgressState; // @synthesize fluidProgressState=_fluidProgressState;
@property(nonatomic, getter=isMovingToAnotherWindow) BOOL movingToAnotherWindow; // @synthesize movingToAnotherWindow=_movingToAnotherWindow;
@property(nonatomic, getter=isWindowFocusDisabled) BOOL windowFocusDisabled; // @synthesize windowFocusDisabled=_windowFocusDisabled;
@property(nonatomic) BOOL shouldBlockFirstResponder; // @synthesize shouldBlockFirstResponder=_shouldBlockFirstResponder;
@property(nonatomic) BOOL shouldBlockAllKeyEvents; // @synthesize shouldBlockAllKeyEvents=_shouldBlockAllKeyEvents;
@property(nonatomic) BOOL shouldBlockAllMouseEvents; // @synthesize shouldBlockAllMouseEvents=_shouldBlockAllMouseEvents;
@property(nonatomic) BOOL shouldShowOriginalURLInsteadOfExpectedURLInUnifiedField; // @synthesize shouldShowOriginalURLInsteadOfExpectedURLInUnifiedField=_shouldShowOriginalURLInsteadOfExpectedURLInUnifiedField;
@property(retain, nonatomic) NSURL *unifiedFieldFallbackURLForAboutBlank; // @synthesize unifiedFieldFallbackURLForAboutBlank=_unifiedFieldFallbackURLForAboutBlank;
@property(nonatomic) BOOL shouldStartEmpty; // @synthesize shouldStartEmpty=_shouldStartEmpty;
@property(readonly, nonatomic, getter=isShowingSecurityWarningPage) BOOL showingSecurityWarningPage; // @synthesize showingSecurityWarningPage=_showingSecurityWarningPage;
@property(readonly, nonatomic) BrowserTabPersistentState *pendingTabStateToRestore; // @synthesize pendingTabStateToRestore=_pendingTabStateToRestore;
@property(nonatomic, getter=isRestoringFromSessionStateData) BOOL restoringFromSessionStateData; // @synthesize restoringFromSessionStateData=_restoringFromSessionStateData;
@property(readonly, nonatomic) BOOL committedExtendedValidationCertificateOrganizationNameHasBeenDetermined; // @synthesize committedExtendedValidationCertificateOrganizationNameHasBeenDetermined=_committedExtendedValidationCertificateOrganizationNameHasBeenDetermined;
@property(readonly, nonatomic) BOOL sensitiveFormFieldHasEverHadFocus; // @synthesize sensitiveFormFieldHasEverHadFocus=_sensitiveFormFieldHasEverHadFocus;
@property(readonly, nonatomic) BOOL sensitiveFormFieldCurrentlyHasFocus; // @synthesize sensitiveFormFieldCurrentlyHasFocus=_sensitiveFormFieldCurrentlyHasFocus;
@property(readonly, nonatomic) __weak BackgroundLoad *backgroundNavigationBackgroundLoad; // @synthesize backgroundNavigationBackgroundLoad=_backgroundNavigationBackgroundLoad;
@property(nonatomic) BOOL hasEverBeenVisible; // @synthesize hasEverBeenVisible=_hasEverBeenVisible;
@property(nonatomic) long long lastBackgroundTerminationReason; // @synthesize lastBackgroundTerminationReason=_lastBackgroundTerminationReason;
@property(nonatomic, getter=isTryingToCloseBeforeCommittingToBackgroundLoad) BOOL tryingToCloseBeforeCommittingToBackgroundLoad; // @synthesize tryingToCloseBeforeCommittingToBackgroundLoad=_tryingToCloseBeforeCommittingToBackgroundLoad;
@property(readonly, nonatomic) NSURL *originalRequestURL; // @synthesize originalRequestURL=_originalRequestURL;
@property(retain, nonatomic) id <SandboxExtensionToken> sandboxExtensionToken; // @synthesize sandboxExtensionToken=_sandboxExtensionToken;
@property(nonatomic, setter=_setShouldDownloadNextPage:) BOOL shouldDownloadNextPage; // @synthesize shouldDownloadNextPage=_shouldDownloadNextPage;
@property(nonatomic) BOOL mainFrameLoadEndedInError; // @synthesize mainFrameLoadEndedInError=_mainFrameLoadEndedInError;
@property(readonly, nonatomic) int loadingStatus; // @synthesize loadingStatus=_loadingStatus;
@property(nonatomic, getter=isWaitingForSamplingProfilerOutput) BOOL waitingForSamplingProfilerOutput; // @synthesize waitingForSamplingProfilerOutput=_waitingForSamplingProfilerOutput;
@property(nonatomic) BOOL redirectOccurredWhileRecoveringFromWebProcessCrash; // @synthesize redirectOccurredWhileRecoveringFromWebProcessCrash=_redirectOccurredWhileRecoveringFromWebProcessCrash;
@property(nonatomic) BOOL swapProcessesOnNavigation; // @synthesize swapProcessesOnNavigation=_swapProcessesOnNavigation;
@property(nonatomic, getter=isWebProcessForcePaused) BOOL webProcessForcePaused; // @synthesize webProcessForcePaused=_webProcessForcePaused;
@property(readonly, nonatomic) double bestWidthForCurrentPage; // @synthesize bestWidthForCurrentPage=_bestWidthForCurrentPage;
@property(copy, nonatomic) CDUnknownBlockType backgroundDocumentFirstVisuallyNonEmptyLayoutHandler; // @synthesize backgroundDocumentFirstVisuallyNonEmptyLayoutHandler=_backgroundDocumentFirstVisuallyNonEmptyLayoutHandler;
@property(nonatomic) BOOL mainDocumentDidLoad; // @synthesize mainDocumentDidLoad=_mainDocumentDidLoad;
@property(nonatomic) BOOL mainDocumentDidFirstVisuallyNonEmptyLayout; // @synthesize mainDocumentDidFirstVisuallyNonEmptyLayout=_mainDocumentDidFirstVisuallyNonEmptyLayout;
@property(nonatomic) BOOL mainDocumentDidFirstLayout; // @synthesize mainDocumentDidFirstLayout=_mainDocumentDidFirstLayout;
@property(readonly, nonatomic) NSString *readerText; // @synthesize readerText=_readerText;
@property(retain, nonatomic) CKContextResponse *contextResponse; // @synthesize contextResponse=_contextResponse;
@property(copy, nonatomic) NSString *provisionalOriginalURLString; // @synthesize provisionalOriginalURLString=_provisionalOriginalURLString;
@property(copy, nonatomic, setter=_setOriginalURLString:) NSString *originalURLString; // @synthesize originalURLString=_originalURLString;
@property(nonatomic) BOOL webPageIsUnresponsive; // @synthesize webPageIsUnresponsive=_webPageIsUnresponsive;
@property(nonatomic) __weak BrowserViewController *originatingContentViewControllerWithPossibleJavaScriptAccess; // @synthesize originatingContentViewControllerWithPossibleJavaScriptAccess=_originatingContentViewControllerWithPossibleJavaScriptAccess;
@property(readonly, nonatomic) Vector_81153489 ancestorTabIdentifiers; // @synthesize ancestorTabIdentifiers=_ancestorTabIdentifiers;
@property(readonly, nonatomic) unsigned int tabIdentifier; // @synthesize tabIdentifier=_tabIdentifier;
@property(readonly, nonatomic) __weak BrowserDocument *document; // @synthesize document=_document;
@property(nonatomic, getter=isTryingToClose) BOOL tryingToClose; // @synthesize tryingToClose=_tryingToClose;
@property(readonly, copy, nonatomic) NSString *authenticationHost; // @synthesize authenticationHost=_authenticationHost;
- (id).cxx_construct;
- (void).cxx_destruct;
- (BOOL)handleAuthenticationSessionNavigationToURL:(id)arg1;
- (id)sandboxExtensionPresentationController:(id)arg1 windowForURL:(id)arg2;
- (void)sandboxExtensionPresentationController:(id)arg1 configureOpenPanel:(id)arg2 forURL:(id)arg3;
- (void)deferredLoadingWatchdogTimerFired;
- (void)defersPageLoadingCountDidUnderflow;
- (void)openClockSettings;
- (void)showCertificateInformation;
- (void)visitInsecureWebsite;
- (void)visitInsecureWebsiteWithTemporaryBypass;
- (void)goBackButtonClicked;
- (void)agentDidUnregisterRemoteNotificationsWithDisallowedDomains:(id)arg1 forPermissionRequest:(unsigned long long)arg2;
- (void)agentDidRegisterRemoteNotificationsWithAllowedDomains:(id)arg1 deviceToken:(id)arg2 forPermissionRequest:(unsigned long long)arg3;
- (void)agentDidVerifyRemoteNotificationProvider:(BOOL)arg1 withWebsiteName:(id)arg2 lowResolutionIconData:(id)arg3 highResolutionIconData:(id)arg4 forPermissionRequest:(unsigned long long)arg5;
- (void)_decidePolicyForRemoteNotificationPermissionRequestWithID:(unsigned long long)arg1 websiteName:(id)arg2 lowResIconData:(id)arg3 highResIconData:(id)arg4;
- (void)userDidDecideRemoteNotificationPolicy:(BOOL)arg1 forPermissionRequest:(unsigned long long)arg2;
- (void)requestRemoteNotificationPermissionForAPIURL:(id)arg1 websiteIdentifier:(id)arg2 processingUserGesture:(BOOL)arg3 queryParameters:(id)arg4;
- (id)_remoteNotificationStateObserver;
- (void)setContextMenuUserInfo:(id)arg1 forExtensionWithIdentifier:(id)arg2;
- (void)dispatchMessageWithName:(id)arg1 toExtensionWithIdentifier:(id)arg2 userInfo:(id)arg3;
@property(readonly, nonatomic) id <AppExtensionMessageReceiver> appExtensionMessageReceiver;
- (void)_processOpenSearchURL:(id)arg1;
- (void)processOpenSearchURLAfterBackgroundLoadHasBeenCommittedIfNecessary;
- (void)didCollectOpenSearchURL:(id)arg1;
@property(readonly, nonatomic) TabDialogViewController *tabDialogViewController;
@property(readonly, nonatomic) BOOL isUnresponsiveDueToJavaScriptDialogRunningInProcess;
- (void)showJavaScriptPromptWithMessage:(id)arg1 defaultResponse:(id)arg2 origin:(const struct SecurityOrigin *)arg3 responseHandler:(CDUnknownBlockType)arg4;
- (void)showJavaScriptConfirmWithMessage:(id)arg1 origin:(const struct SecurityOrigin *)arg2 responseHandler:(CDUnknownBlockType)arg3;
- (void)showJavaScriptAlertWithMessage:(id)arg1 origin:(const struct SecurityOrigin *)arg2 responseHandler:(CDUnknownBlockType)arg3;
@property(readonly, nonatomic) long long currentTabDialogType;
@property(readonly, nonatomic, getter=isShowingTabDialog) BOOL showingTabDialog;
- (void)dismissTabDialog;
- (void)presentTabDialogWithConfiguration:(id)arg1 dismissalBlock:(CDUnknownBlockType)arg2 blocksWebProcessUntilDismissed:(BOOL)arg3;
- (void)browserView:(id)arg1 didFindIconWithParameters:(id)arg2 downloadHandler:(CDUnknownBlockType)arg3;
- (void)searchableWKViewDidReturnFromFullscreenWindow:(id)arg1;
- (void)searchableWKViewDidEnterFullscreenWindow:(id)arg1;
- (void)searchableWKViewWillEnterFullscreenWindow:(id)arg1;
- (void)clearCachedContextCompleter;
- (id)_cachedContextCompleter;
- (void)logNumberOfDisplayedSiriSuggestions:(unsigned long long)arg1 numberOfSuppressedSuggestions:(unsigned long long)arg2;
- (void)logEngagementWithSiriSuggestion:(id)arg1 forInput:(id)arg2;
- (BOOL)doesPageReferenceSiriSuggestion:(id)arg1;
- (id)querySuggestionsForSearchString:(id)arg1;
- (void)_didDismissTabDialogs;
- (void)_willPresentTabDialog;
- (void)_prepareToCancelOwnDialogs;
- (void)dismissAllDialogs;
- (void)dismissDialogsBlockingNavigation;
- (void)dismissDialogsBlockingActivation;
- (void)didMouseUpOrPerformAccessibilityPressWithDimmingView:(id)arg1;
- (void)didDismissModalDialogContentViewController:(id)arg1;
- (void)didPresentModalDialogContentViewController:(id)arg1;
- (void)willPresentModalDialogContentViewController:(id)arg1;
@property(readonly, nonatomic, getter=isSuppressingJavaScriptShowModalDialogPresentation) BOOL suppressJavaScriptShowModalDialogPresentation;
- (void)_didReceiveNetworkChangeNotification:(id)arg1;
- (void)_stopObservingNetworkChangeNotifications;
- (void)_startObservingNetworkChangeNotifications;
- (void)clearSearchResultsForSnapBack;
- (void)setSearchResultsForSnapBackToCurrentPage;
- (void)snapBackToSearchResults;
@property(readonly, nonatomic) BOOL canSnapBackToSearchResults;
- (void)createWebClipForBanner:(id)arg1;
- (void)hideWebClipOverlayForBanner:(id)arg1;
- (void)showWebClipOverlayForBanner:(id)arg1;
- (void)didCollectWebClipPageSize:(struct CGSize)arg1 clipRect:(struct CGRect)arg2 clipSignature:(const struct Dictionary *)arg3;
- (void)hideWebClipBannerAnimated:(BOOL)arg1;
- (void)showWebClipBannerAnimated:(BOOL)arg1;
@property(readonly, nonatomic, getter=isShowingWebClipBanner) BOOL showingWebClipBanner;
@property(readonly, nonatomic) BOOL canCreateWebClip;
- (void)hideDefaultBrowserBannerAnimated:(BOOL)arg1;
- (void)showDefaultBrowserBannerAnimated:(BOOL)arg1;
@property(readonly, nonatomic, getter=isShowingDefaultBrowserBanner) BOOL showingDefaultBrowserBanner;
- (void)_dispatchBlocksWaitingForVisuallyNonEmptyLayoutAfterQueuedNavigation;
- (void)_cancelPostQueuedNavigationEnqueuedBlockWithToken:(id)arg1;
- (id)_performBlockNowOrOnVisuallyNonEmptyLayoutAfterPerformingQueuedNavigation:(CDUnknownBlockType)arg1;
- (void)_didCreateSnapshot:(id)arg1 forURL:(id)arg2 forRequestWithIdentifier:(unsigned long long)arg3;
- (void)didCreateSnapshot:(id)arg1 forURL:(id)arg2 forRequestWithIdentifier:(unsigned long long)arg3;
- (void)cancelSnapshotRequestWithToken:(id)arg1;
- (void)_requestSnapshotWithMaximumSize:(struct CGSize)arg1 requestIdentifier:(unsigned long long)arg2;
- (id)requestSnapshotWithSize:(struct CGSize)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)cancelPostQueuedNavigationBlockWithToken:(id)arg1;
- (id)performBlockNowOrAfterVisuallyNonEmptyLayoutCommittingQueuedNavigationIfNecessary:(CDUnknownBlockType)arg1;
- (void)didCollectDataForSavingPageInliningOrDiscardingExternalResources:(id)arg1;
- (void)collectDataForSavingPageInliningOrDiscardingExternalResources;
- (void)collectMetadataJSONForActiveFormWithMode:(long long)arg1;
- (void)didChangeContentSize:(struct CGSize)arg1;
- (void)didCollectPageBoundsInformation:(const struct Dictionary *)arg1;
@property(readonly, nonatomic) struct PerformanceTesting *performanceTesting;
@property(readonly, nonatomic) struct PerformanceCollector *performanceCollector;
- (void)showProcessIDsInPageTitlesPreferenceHasChanged;
- (void)confirmDefaultSearchProviderSwitch:(id)arg1;
- (void)didAutoDetectSearchURLTemplateString:(id)arg1 inFrame:(const struct Frame *)arg2;
- (void)didCollectParsecMediaServiceSubscriptionInformation:(id)arg1;
- (void)fetchParsecMediaServiceSubscriptionInformation;
- (void)didCollectTemplateIconMetadataForPageURL:(id)arg1 iconURL:(id)arg2 themeColorComponents:(id)arg3;
- (void)fetchTemplateIconMetadataIfNecessary;
- (void)didCollectTouchIconURLStrings:(id)arg1;
- (void)fetchTouchIconsIfNecessary;
- (void)didDetectContentRequiresPlugIn:(id)arg1;
- (void)detectContentRequiresPlugIn:(id)arg1;
- (BOOL)_showPromptToManagePlugInInPrefsIfNeeded;
- (BOOL)showPromptToClickToUsePlugInInParentTabIfNecessaryWhenNavigatingToURL:(id)arg1;
- (void)didClickUnavailablePlugInButtonOld:(id)arg1 withReason:(unsigned int)arg2;
- (BOOL)showUnavailablePlugInDialogWithPlugInBundleIdentifier:(id)arg1 plugInName:(id)arg2 plugInUpdateIsAvailable:(BOOL)arg3 plugInURLString:(id)arg4 plugInPageAttributeURLString:(id)arg5 plugInMimeType:(id)arg6 plugInLoadPolicy:(unsigned int)arg7 plugInUnavailabilityReason:(unsigned int)arg8;
- (BOOL)showUnavailablePlugInDialogIfNeeded:(id)arg1 withReason:(unsigned int)arg2;
- (void)_enqueuePlugInInfoForInitializationError:(id)arg1;
- (void)handleNextPlugInInitializationError;
- (void)didBlockInsecurePluginVersionWithInformation:(id)arg1;
@property(readonly, nonatomic) BOOL canShowBlockedPageContentDialog;
- (void)_hidePrivateBrowsingExplanationBannerAnimated:(BOOL)arg1;
- (void)showPrivateBrowsingExplanationBannerAnimated:(BOOL)arg1;
@property(readonly, nonatomic, getter=isShowingPrivateBrowsingExplanationBanner) BOOL showingPrivateBrowsingExplanationBanner;
- (void)_hideTransientBannerDueToUserInitiatedNavigationOrVisuallyNonEmptyLayout;
- (void)hideTransientBannerAnimated:(BOOL)arg1;
- (BOOL)_canShowWebCrashBanner;
- (void)didExceedBackgroundResourceLimitWhileInForegroundOldWithLimit:(unsigned int)arg1;
- (void)hideWebCrashBannerAnimated:(BOOL)arg1;
- (void)_showWebCrashBannerAnimated:(BOOL)arg1 type:(long long)arg2;
- (void)showWebCrashBannerAnimated:(BOOL)arg1 terminationReason:(long long)arg2;
@property(readonly, nonatomic, getter=isShowingWebCrashBanner) BOOL showingWebCrashBanner;
- (void)didLosePointerLock;
- (BOOL)requestPointerLock;
- (BOOL)_canShowPointerLockBanner;
- (void)hidePointerLockBannerAnimated:(BOOL)arg1;
- (void)showPointerLockBannerAnimated:(BOOL)arg1;
@property(readonly, nonatomic, getter=isShowingPointerLockBanner) BOOL showingPointerLockBanner;
- (BOOL)handleCancelForSearchableWKView:(id)arg1;
- (void)bannerContainerView:(id)arg1 willUninstallBanner:(id)arg2;
- (void)bannerContainerView:(id)arg1 bannerDidUninstall:(id)arg2;
- (void)bannerContainerView:(id)arg1 didInstallBanner:(id)arg2;
@property(readonly, nonatomic) BOOL isShowingAnyBanner;
- (id)_viewBelowBanner;
- (void)hideAllBannersAnimated:(BOOL)arg1;
- (void)didCompleteAuthenticationSheetRequest:(struct AuthenticationSheetRequest *)arg1;
- (void)_displayInternetAccountSetupPromptIfAppropriate;
- (void)handleInternetAccountSetupForDomain:(id)arg1 shouldPrompt:(BOOL)arg2;
- (void)displayInternetAccountSetupPromptOnNextLoadForDomain:(id)arg1 username:(id)arg2 password:(id)arg3;
- (void)showResponsiveDesignView;
- (void)hideResponsiveDesignView;
@property(readonly, nonatomic) BOOL canShowResponsiveDesignView;
@property(readonly, nonatomic, getter=isShowingResponsiveDesignView) BOOL showingResponsiveDesignView;
- (void)closeWebInspector;
- (void)showWebInspector;
- (void)toggleWebInspector;
@property(readonly, nonatomic, getter=isShowingWebInspector) BOOL showingWebInspector;
- (void)viewSourceForFrame:(const struct Frame *)arg1;
- (void)viewMainFrameSource;
@property(readonly, nonatomic) BOOL canViewSource;
- (BOOL)canShowWebInspector;
@property(readonly, nonatomic) NSView *keyView;
- (void)didFirstFlushForHeaderLayer;
- (void)didCreateSnapshotOfContinuousReadingViewForRubberBandingArea:(const struct Image *)arg1;
- (void)_installContinuousReadingListView;
- (void)saveContinuousReadingListItemForCurrentBackForwardItemIfNecessary:(id)arg1;
- (void)willReloadContinuousReadingViewPage;
- (void)loadReadingListItemInContinuousMode:(id)arg1;
@property(readonly, nonatomic) ContinuousReadingListViewController *continuousReadingListViewController;
- (void)startReadingListAnimationsUsingHopAnimationStartPoint:(struct CGPoint)arg1;
- (void)startReadingListHopAnimationFromMouseLocation;
- (void)addReadingListItemFromMouseLocationWithTitle:(id)arg1 label:(id)arg2 URL:(id)arg3;
- (void)setCurrentlyLoadedReadingListItem:(id)arg1 pageNumber:(unsigned long long)arg2;
@property(readonly, nonatomic, getter=isShowingReadingListItemArchiveURL) BOOL showingReadingListItemArchiveURL;
@property(readonly, nonatomic, getter=isShowingReadingListItemArchive) BOOL showingReadingListItemArchive;
@property(readonly, nonatomic, getter=isCurrentPageLoadedFromReadingList) BOOL currentPageLoadedFromReadingList;
@property(readonly, nonatomic) BOOL canAddReadingListItem;
- (id)makeBookmark;
@property(readonly, nonatomic) NSString *titleForNewBookmark;
@property(readonly, nonatomic) NSURL *urlForNewBookmark;
- (BOOL)_canPerformAnySharingAction;
@property(readonly, nonatomic) BOOL canAddBookmark;
@property(readonly, nonatomic) BOOL isPinnedStateToggleable;
- (void)pinnedTabContentDidMoveFromBrowserTabViewItem:(id)arg1 toBrowserTabViewItem:(id)arg2;
- (void)browserWKViewDidMoveToNewWindow;
- (void)invalidateBackForwardHistoryItem:(const struct BackForwardListItem *)arg1;
- (void)willStartDownloadingURL:(id)arg1;
- (BOOL)shouldSpawnNewTabOnBrowserUIInitiatedNavigationFromPinnedTabWithDestinationURL:(id)arg1;
- (BOOL)shouldSpawnNewTabOnNavigationFromPinnedTabWithDestinationURL:(id)arg1;
- (void)loadStateOfBrowserViewController:(id)arg1;
- (void)transferStateFromBrowserContentViewControllerSpawnedFromPinnedTab:(id)arg1;
@property(readonly, nonatomic, getter=isDisposableAfterNavigation) BOOL disposableAfterNavigation;
- (void)pagePinnedStateDidChange;
- (void)setUpSpawnedTabFromParentTab:(id)arg1 parentTabSnapshot:(id)arg2 snapshotImageScale:(double)arg3;
- (void)restoreParentTabSessionState;
- (void)_addSpawnedTabBrowserViewController:(id)arg1;
- (void)_invalidatedBackForwardItemsDidChange;
- (BOOL)returnToParentTabIfNeededForNavigationToBackForwardListItem:(id)arg1;
- (void)didOpenURLExternally;
- (void)_didRemoveBackForwardHistoryItems:(id)arg1;
- (BOOL)isValidBackForwardItem:(const struct BackForwardListItem *)arg1;
- (void)clearForwardHistory;
@property(readonly, nonatomic, getter=isNavigatingToSpawnedTabParentURL) BOOL navigatingToSpawnedTabParentURL;
- (void)disconnectParentTabFromSpawnedTabs;
- (BOOL)isValidBackHistoryItem:(const struct BackForwardListItem *)arg1;
- (void)updateBackItemAfterSwappingBrowserViewControllerIfNeeded;
- (void)prepareNavigationIfFirstNavigationInTabCreatedFromParentTab;
- (void)clearParentTabIfNecessary;
- (void)_removeSpawnedTabBrowserViewController:(id)arg1;
- (void)clearParentTab;
- (BOOL)_returnToParentTabAndOptionallyCloseTab:(BOOL)arg1;
- (void)preparePageToReturnFromFullscreenToInline;
@property(readonly, nonatomic, getter=isPlayingVideoInPIP) BOOL playingVideoInPIP;
- (unsigned long long)_pageMutableMediaState;
- (void)_updateAudioUINow:(id)arg1;
- (void)_invalidateUpdateAudioUITimer;
- (void)notifyContentMediaPlayingStateChanged;
- (void)mutableMediaPlayingStateDidChange;
@property(readonly, nonatomic, getter=isMuted) BOOL muted;
- (void)_setPageMutedState;
- (void)updatePageMutedState;
- (void)_autoplayPreferenceDidChange:(id)arg1;
- (void)_perSiteContentBlockersPreferenceDidChange:(id)arg1;
- (void)_perSiteAutomaticReaderActivationPreferenceDidChange:(id)arg1;
- (void)createVisibleContentsSnapshotForSharingWithRequestIdentifier:(unsigned long long)arg1;
- (void)runJavaScript:(id)arg1 forSharingExtensionNamed:(id)arg2 requestIdentifier:(unsigned long long)arg3;
- (void)sharePageViaMail;
- (void)showSharingServicePickerAtBottomOfView:(id)arg1;
@property(readonly, nonatomic) BOOL canSharePage;
- (void)_updateTitlesInResponseToLabelChange;
- (id)_tabLabel;
- (id)computeTabLabel;
- (void)setRequestedTabLabel:(id)arg1 lifetime:(long long)arg2;
- (void)dismissPagePreviewAnimationController:(id)arg1;
- (void)pagePreviewAnimationController:(id)arg1 addURLToReadingList:(id)arg2;
- (void)pagePreviewAnimationController:(id)arg1 handleClickInPreviewBrowserViewController:(id)arg2;
- (void)pagePreviewAnimationController:(id)arg1 didFinishPreviewWithBrowserViewController:(id)arg2;
- (id)makePreviewBrowserViewControllerForPagePreviewAnimationController:(id)arg1;
- (void)_previewPageDidLoadMainDocument;
- (void)_previewPageDidFirstVisuallyNonEmptyLayyout;
- (void)commitAllPagePreviewHistoryOperations;
- (void)enqueuePagePreviewHistoryOperation:(id)arg1;
- (id)previewTitleForURL:(id)arg1;
- (void)setPagePreviewNeedsReloadOnTabTransition;
@property(readonly, nonatomic, getter=isForPagePreviews) BOOL forPagePreviews;
@property(readonly, copy, nonatomic) NSSet *pagePreviewBrowserViewControllers;
- (void)hidePagePreviewControllerIfNeeded;
- (id)pagePreviewAnimationControllerWithURL:(id)arg1 originRect:(struct CGRect)arg2 ofView:(id)arg3;
- (BOOL)hasFailedURL;
- (double)estimatedProgress;
- (id)progressState;
- (void)clearFluidProgressState;
- (BOOL)createFluidProgressState;
- (void)readerControllerDidBecomeUnavailableUnexpectedly:(const struct ReaderController *)arg1;
- (void)readerController:(const struct ReaderController *)arg1 didUpdateAvailability:(int)arg2;
- (void)readerControllerDidDeactivate:(const struct ReaderController *)arg1;
- (void)readerControllerWillDeactivate:(const struct ReaderController *)arg1;
- (void)readerControllerDidActivate:(const struct ReaderController *)arg1;
- (void)readerControllerWillActivate:(const struct ReaderController *)arg1;
- (BOOL)readerControllerShouldDeactivateFromUserAction:(const struct ReaderController *)arg1;
- (BOOL)readerControllerShouldActivateUponDeterminingAvailability:(const struct ReaderController *)arg1;
- (id)installationTargetForReaderController:(const struct ReaderController *)arg1;
- (void)_pickCertificateForAuthenticationChallengeSheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)_continueHTTPSConnectionSheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)_loadPageBypassingCertificateWarning:(const struct Dictionary *)arg1;
- (void)_continueHTTPSConnectionWithIdentitySheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)dismissReaderAppearanceCustomizationPopover;
- (void)deactivateReaderAfterAnimationWithDeactivationMode:(int)arg1;
- (void)deactivateReaderNowOnNavigation;
- (void)deactivateReaderFromWebProcessUserAction;
- (void)_requestQueryResultsForText:(id)arg1 contentType:(long long)arg2 pageMetadata:(id)arg3;
- (void)didExtractReaderText:(id)arg1 pageMetadata:(id)arg2 wasDeterminingAvailability:(BOOL)arg3;
- (void)didDetermineReaderAvailability:(BOOL)arg1 dueToSameDocumentNavigation:(BOOL)arg2;
- (void)createReaderControllerIfNeeded;
@property(readonly, nonatomic) struct ReaderController *readerController;
@property(readonly, nonatomic, getter=isShowingReader) BOOL showingReader;
- (void)updateFrequentlyVisitedSiteTitleIfNecessary;
- (void)didCreateSnapshot:(id)arg1 withScaleFactor:(double)arg2 ofTopSiteWithURL:(id)arg3;
- (void)createSnapshotOfTopSiteWithURL:(id)arg1;
- (void)_createStartPageViewControllerIfNeeded;
@property(readonly, nonatomic) StartPageViewController *startPageViewController; // @synthesize startPageViewController=_startPageViewController;
- (void)_showStartPageViewWithMode:(int)arg1;
- (void)_installStartPageFromCommittingLoadWithMode:(int)arg1 preservingFirstResponder:(BOOL)arg2;
- (void)didCommitFavorites;
- (void)didCommitTopSites;
- (void)_installStartPageWithMode:(int)arg1 preservingFirstResponder:(BOOL)arg2;
- (void)_installStartPageWithMode:(int)arg1;
- (void)goToStartPageWithMode:(int)arg1;
- (id)_startPageView;
@property(readonly, nonatomic, getter=isShowingOrWillShowStartPageView) BOOL showingOrWillShowStartPageView;
@property(readonly, nonatomic, getter=isShowingStartPage) BOOL showingStartPage;
- (void)clearVisitedLinks;
@property(readonly, nonatomic) BOOL canSetCurrentPageToHomePage;
- (void)_loadOutlineViewWithHistory;
- (void)_loadOutlineViewWithBookmarks;
- (void)_showOutlineView;
- (void)_focusSearchFieldInOutlineView;
- (void)hideHistory;
- (void)showHistory;
@property(readonly, nonatomic) BOOL isShowingHistory;
@property(readonly, nonatomic) BOOL canShowHistory;
- (void)hideBookmarks;
- (void)showBookmarks;
@property(readonly, nonatomic) BOOL isShowingBookmarks;
@property(readonly, nonatomic) BOOL canShowBookmarks;
- (id)bookmarksViewController;
@property(readonly, nonatomic) BOOL currentPageHasJavaScriptDialogsSuppressed;
- (void)tabDialogPresentationManagerDidDismissTabDialogs:(id)arg1;
- (void)tabDialogPresentationManagerWillPresentTabDialogs:(id)arg1;
- (id)test_hostContentViewControllerForManager:(id)arg1;
- (int)tabDialogPresentationManagerWebProcessID:(id)arg1;
- (id)tabDialogPresentationManagerTabContentViewControllerForDialogInstallation:(id)arg1;
- (BOOL)tabDialogPresentationManagerShouldDisplayDialogs:(id)arg1;
- (BOOL)tabDialogPresentationManagerShouldSkipAnimations:(id)arg1;
- (void)evaluateJavaScript:(id)arg1;
- (void)_completeSidebarAnimationIfNecessary;
- (void)didForceContentRepaintAndCollectPageLayoutInformationForSidebarAnimationAfterResize:(id)arg1;
- (void)didCollectPageLayoutInformationForSidebarAnimationBeforeResize;
- (RetainPtr_fae59704)generateSnapshotFromWindowBackingStore;
- (void)clearAllStatus;
- (void)setStatusForMouseoverOldWithUserData:(const struct Type *)arg1 modifiers:(unsigned int)arg2;
- (void)_updateUnsubmittedFormDataInFrame:(const struct Frame *)arg1 formMetadata:(id)arg2;
- (void)_autocompleteInTextFieldInFrame:(const struct Frame *)arg1 textFieldMetaData:(id)arg2 formMetaData:(id)arg3;
- (void)formAutoFillController:(id)arg1 didRefreshCompletionListItems:(const Vector_9c080eda *)arg2;
- (BOOL)isTextFieldFocused;
- (void)functionBarProvider:(id)arg1 didSelectCompletionListItem:(struct CompletionListItem *)arg2;
- (void)showFunctionBarForProvider:(id)arg1;
- (void)hideFunctionBarForProvider:(id)arg1;
- (struct TabPlacementHint)tabPlacementHintForBookmarksViewController:(id)arg1;
- (id)bookmarksUndoControllerForBookmarksViewController:(id)arg1;
- (void)bookmarksViewControllerDidChangePageTitle:(id)arg1;
- (BOOL)shouldUsePrivateBrowsingInBookmarksViewController:(id)arg1;
- (void)_createFormCompletionControllerAndFunctionBarProviderIfNeededForFrame:(const struct Frame *)arg1 textFieldMetadata:(id)arg2 formMetadata:(id)arg3;
- (void)_createAutoFillFunctionBarProviderIfNeeded;
- (void)_uninstallAlternativeWebViewFunctionBarProvider;
- (void)_installAlternativeWebViewFunctionBarProvider:(id)arg1;
- (BOOL)_shouldTryUsingFormCredentialsCompletionControllerToPerformAction:(unsigned int)arg1 textFieldMetadata:(id)arg2;
- (void)_createFormCompletionControllerIfNeededForFrame:(const struct Frame *)arg1 textFieldMetadata:(id)arg2 formMetadata:(id)arg3;
- (void)_tearDownFormCompletionMachinery;
- (id)_correctControlMetadata:(id)arg1 inFrame:(const struct Frame *)arg2;
- (id)_correctMetadata:(id)arg1 forFormInFrame:(const struct Frame *)arg2;
- (id)_autoFillMetadataCorrectorForFrame:(const struct Frame *)arg1 createIfNeeded:(BOOL)arg2;
- (id)_metadataProviderForForms:(const struct Array *)arg1 inFrames:(const struct Array *)arg2;
- (void)didClearFormMetadataDueToLoadForFrameContainingFocusedTextField;
- (void)modifiedGeneratedPasswordContentInFormOrFieldWithFormMetadata:(const struct Data *)arg1 inFrame:(const struct Frame *)arg2;
- (void)autoFilledFormWithMetadata:(id)arg1 inFrame:(id)arg2;
- (void)didCollectFormsMetadata:(const struct Array *)arg1 forSafeAutoFillConfirmationInFrames:(const struct Array *)arg2 contactProperty:(const struct String *)arg3 contactIdentifier:(const struct String *)arg4 contactLabel:(const struct String *)arg5;
- (void)didCollectFormsMetadata:(const struct Array *)arg1 afterPreFillingFormInFrames:(const struct Array *)arg2;
- (void)didCollectMetadataForPrefillingForm:(const struct Data *)arg1 inFrames:(const struct Array *)arg2 metadataForAllForms:(const struct Array *)arg3 ancestorFramesOfFormToPreFill:(const struct Array *)arg4 isInitialCollectionAtPageLoad:(BOOL)arg5;
- (void)didCollectFormsMetadata:(const struct Array *)arg1 forManualAutoFillInFrames:(const struct Array *)arg2;
- (void)addressBookAutoFillableFieldBlurredInFrame:(id)arg1 textFieldMetadata:(id)arg2;
- (void)oneTimeCodeFieldBlurredInFrame:(id)arg1 textFieldMetadata:(id)arg2;
- (void)oneTimeCodeFieldFocused:(id)arg1 textFieldMetadata:(id)arg2 formMetadata:(id)arg3 inFrame:(id)arg4;
- (void)addressBookAutoFillableFieldFocused:(id)arg1 textFieldMetadata:(id)arg2 formMetadata:(id)arg3 inFrame:(id)arg4;
- (void)_manualAutoFillButtonClickedInAddressBookAutoFillableFieldMetadata:(id)arg1 formMetadata:(id)arg2 inFrame:(const struct Frame *)arg3;
- (void)_manualAutoFillButtonClickedInCredentialFieldMetadata:(id)arg1 formMetadata:(id)arg2 inFrame:(const struct Frame *)arg3;
- (void)manualAutoFillButtonClickedInTextFieldWithMetadataAsData:(const struct Data *)arg1 formMetadataAsData:(const struct Data *)arg2 inFrame:(const struct Frame *)arg3;
@property(readonly, nonatomic) id <FormAutoFiller> formAutoFiller;
- (void)usernameFieldBlurredInFrame:(id)arg1 formMetadata:(id)arg2 usernameFieldMetadata:(id)arg3;
- (void)usernameFieldFocusedInFrame:(id)arg1 formMetadata:(id)arg2 usernameFieldMetadata:(id)arg3;
- (void)creditCardFieldBlurredInFrame:(id)arg1 formMetadata:(id)arg2 creditCardFieldMetadata:(id)arg3;
- (void)creditCardFieldFocusedInFrame:(id)arg1 formMetadata:(id)arg2 creditCardFieldMetadata:(id)arg3;
- (BOOL)_didUserDeclineAutomaticStrongPasswordForCurrentDomain;
- (void)userChoseToUseGeneratedPassword;
- (void)userDeclinedAutomaticStrongPasswordForCurrentDomain;
- (void)removeAutomaticStrongPasswordVisualTreatment;
@property(readonly, nonatomic, getter=isShowingAutomaticStrongPasswordExplanation) BOOL showingAutomaticStrongPasswordExplanation;
- (BOOL)_passwordFieldHasAutomaticStrongPasswordTreatment:(id)arg1 form:(id)arg2 frame:(id)arg3;
- (void)passwordFieldBlurredInFrame:(id)arg1 formMetadata:(id)arg2 passwordFieldMetadata:(id)arg3;
- (void)passwordFieldFocusedInFrame:(id)arg1 formMetadata:(id)arg2 passwordFieldMetadata:(id)arg3;
- (void)sensitiveFieldFocusedInFrame:(id)arg1;
- (void)_sensitiveFormFieldDidBlurOnPage;
- (void)_sensitiveFormFieldDidFocusOnPage;
- (BOOL)hasFrameBeenAutoFilled:(const struct Frame *)arg1;
- (BOOL)hasFrameBeenPreFilled:(const struct Frame *)arg1;
- (void)collectFormMetadataForPreFillingFormIfNecessaryAtURL:(id)arg1;
- (void)preFillFormIfNecessary;
- (void)updateUnsubmittedPasswordGenerationCredentialsWithUsername:(id)arg1 suggestedPassword:(id)arg2;
- (id)_previouslyGeneratedPassword;
- (void)didGeneratePassword:(id)arg1;
- (void)clearMultiRoundAutoFillManager;
- (void)dismissFormCompletionList;
- (void)autoFillWillStart;
- (void)autoFill;
@property(readonly, nonatomic) BOOL canAutoFill;
- (void)handleAutoplayEvent:(unsigned int)arg1 flags:(unsigned int)arg2;
- (void)_clearCurrentUnsubmittedFormInformation;
- (void)_didVerifyEditedFormTextStatus;
- (void)_didEditFormText;
- (void)_usernameFieldTextDidChangeWithMetadata:(id)arg1;
- (void)_passwordFieldTextDidChangeWithMetadata:(id)arg1 inFrame:(id)arg2;
- (void)textDidChangeInTextFieldDelayCompletedForTextFieldWithUniqueID:(id)arg1 inFrame:(id)arg2;
- (void)willSubmitFormInFrame:(const struct Frame *)arg1 targetURL:(id)arg2;
- (BOOL)shouldPerformActionInFormTextFieldWithMetadata:(const struct Data *)arg1 formMetadata:(const struct Data *)arg2 inFrame:(const struct Frame *)arg3 uncheckedActionType:(unsigned long long)arg4;
- (void)textDidChangeInTextFieldWithMetadata:(id)arg1 formMetadata:(id)arg2 inFrame:(id)arg3;
- (struct Frame)_frameFromHandle:(id)arg1;
- (void)textFieldDidEndEditingInFrame:(const struct Frame *)arg1 textFieldMetadata:(const struct Data *)arg2;
- (void)textDidChangeInTextArea;
- (void)saveUnsubmittedFormDataFromRemovedFrameIfNecessaryInFrame:(const struct Frame *)arg1 sourceFrame:(const struct Frame *)arg2;
- (BOOL)shouldDeferLoadingWhileSavingFormDataInFrame:(const struct Frame *)arg1 sourceFrame:(const struct Frame *)arg2;
- (void)clearUnsubmittedInformationInFormWithID:(double)arg1 sourceFrame:(const struct Frame *)arg2;
- (void)warnAboutUnsavedCredentialsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)resetEditedFormTextStatus;
- (void)confirmReloadingWithPIPIfNecessaryWithOption:(long long)arg1;
- (void)confirmReloadingWithEditedFormTextWithOption:(long long)arg1;
- (void)verifyEditedFormTextStatus;
@property(readonly, nonatomic) BOOL shouldWarnAboutUnsavedCredentials;
- (BOOL)_shouldReportProgressForCurrentURL;
- (BOOL)_isFluidProgressAnimating;
- (void)animateProgressForPreloadedDocument;
- (void)_allowUserToPickCertificateForAuthenticationChallengeInfo:(id)arg1;
- (void)_useClientCertificatesForAuthenticationChallengeInfo:(id)arg1;
- (void)_cacheSecIdentityIfNeeded:(struct OpaqueSecIdentityRef *)arg1 forURL:(id)arg2;
- (RetainPtr_45e7c27d)_preferredIdentityForURL:(id)arg1;
- (BOOL)_shouldPersistIdentityPreferencesToKeychain;
- (void)_showHTTPAuthenticationDialogForChallenge:(id)arg1;
- (void)_handleNextAuthenticationChallenge;
- (void)_continueAuthenticationChallenge:(id)arg1 withCertificateIdentity:(struct OpaqueSecIdentityRef *)arg2;
- (void)forgetAllAuthenticationChallenges;
- (void)didReceiveAuthenticationChallenge:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (BOOL)canAuthenticateAgainstProtectionSpace:(id)arg1;
- (void)browserViewDidMoveToWindow;
- (void)browserViewVisibilityChanged;
- (void)browserViewWillMoveToWindow:(id)arg1;
- (void)setDidCrashOrWasTerminatedForBeingUnresponsiveInTheBackground:(BOOL)arg1;
- (void)bringTabAndWindowToFront;
- (void)pageDidScroll;
- (BOOL)willHandleEvent:(id)arg1;
@property(readonly, nonatomic) NSString *titleForUnifiedFieldURL;
@property(readonly, nonatomic) NSURL *committedURLOfEarliestOriginatingContentViewControllerWithPossibleJavaScriptAccess;
@property(readonly, nonatomic) NSURL *unifiedFieldURL;
- (void)didCreateRenderLayerTree:(const struct RenderLayer *)arg1 forRequestWithIdentifier:(unsigned long long)arg2;
- (void)didCreateRenderTree:(const struct RenderObject *)arg1 forRequestWithIdentifier:(unsigned long long)arg2;
- (void)displayInitialContents;
- (struct URLRequest)initialContents;
- (void)setInitialContents:(const struct URLRequest *)arg1;
- (BOOL)isTopContentInsetCurrentlyUsed;
- (struct Frame)_printingMailingFrame;
- (void)printPage;
- (void)_printOperationDidRun:(id)arg1 success:(BOOL)arg2 contextInfo:(void *)arg3;
- (void)_printFrame:(const struct Frame *)arg1 waitUntilDone:(BOOL)arg2;
- (void)_showPrintSheetBlockedDialogForFrame:(const struct Frame *)arg1 waitUntilDone:(BOOL)arg2;
- (void)_handleNextPrintRequest;
- (void)printFrame:(const struct Frame *)arg1 waitUntilDone:(BOOL)arg2 isUserInitiated:(BOOL)arg3;
@property(readonly, nonatomic) NSString *titleOfPrintMenuItem;
- (BOOL)_isCurrentPageSearchable;
- (void)focusContentSearchField;
- (BOOL)canFocusContentSearchField;
- (void)showFindInPageBannerAnimated:(BOOL)arg1;
- (void)clearIgnoredNavigationURL;
- (BOOL)historyClientShouldIgnoreNavigationToURL:(id)arg1;
- (BOOL)_isBackForwardListItemDisposable:(const struct BackForwardListItem *)arg1;
- (id)_previousBackForwardItemTitle;
- (struct BackForwardListItem *)_previousWebPageBackForwardListItem;
- (void)clearBackForwardList;
- (void)updateBackForwardReferencesFromBrowserViewController:(id)arg1 oldBackForwardListItemsToNewBackForwardListItemsMap:(const HashMap_bb21a8a3 *)arg2;
- (void)backForwardListDidChange:(id)arg1;
- (BOOL)shouldSaveBackForwardListItemInTabState:(const struct BackForwardListItem *)arg1;
- (id)displayTitleForBackForwardListItem:(const struct BackForwardListItem *)arg1 showURL:(BOOL)arg2;
- (void)willNavigateToBackForwardListItem:(id)arg1;
- (void)goToBackForwardListItem:(const struct BackForwardListItem *)arg1;
@property(readonly, nonatomic, getter=isNavigatingToCachedPageInBackForwardList) BOOL navigatingToCachedPageInBackForwardList;
@property(readonly, nonatomic, getter=isNavigatingViaBackForwardList) BOOL navigatingViaBackForwardList;
@property(readonly, nonatomic) BOOL hasNonEmptyBackForwardList;
@property(readonly, nonatomic) struct BackForwardList backForwardList;
- (id)createBrowserViewControllerFromWindowConfiguration:(id)arg1;
- (BOOL)_shouldCreateTabForNewPageForWindowFeatures:(id)arg1;
- (BOOL)_shouldLinkSpawnedTabToParentTabForURLRequest:(id)arg1;
- (void)openBlockedPopUpWindows;
- (void)_addDomainToAllowedPopUpWindowDomainCache:(id)arg1;
- (BOOL)_windowCanBeResized:(id)arg1;
- (void)clearPopUpWindowPreferenceAndBlockedWindowConfigurationCaches;
- (void)addBlockedPopUpWindowConfiguration:(id)arg1;
@property(readonly, nonatomic) unsigned long long numberOfBlockedPopUpWindows;
- (BOOL)didAllowPopUpWindowsForDomain:(id)arg1;
- (long long)popUpWindowPreferenceValueForDomain:(id)arg1;
- (void)addPopUpWindowPreferenceValue:(long long)arg1 forDomain:(id)arg2;
- (BOOL)_shouldDisplayRequestedSheet;
- (BOOL)_displayRequestedSheetNowIfAppropriate;
- (void)_setSheetRequest:(RefPtr_55cde54d *)arg1;
- (struct SheetRequest *)_sheetRequest;
- (void)_sheetRequestConditionsChanged:(id)arg1;
- (void)_stopObservingNotificationsThatMightDisplayRequestedSheet;
- (void)_startObservingNotificationsThatMightDisplayRequestedSheet;
- (void)runAlertAsSheet:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)runPageContentInitializationErrorSheet:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (int)_computePageTypeFromURL:(id)arg1;
- (void)_updateCachedPageTypesAfterCommit;
- (void)_updateExpectedPageType;
- (BOOL)_isPageTypeSameAsPreviousPage;
- (BOOL)_mainContentViewDiffersFromPreviousPage;
@property(readonly, nonatomic, getter=isShowingInitialPage) BOOL showingInitialPage;
@property(readonly, nonatomic, getter=isShowingWebContent) BOOL showingWebContent;
@property(readonly, nonatomic, getter=isShowingWebArchive) BOOL showingWebArchive;
@property(readonly, nonatomic, getter=isShowingPDFDocument) BOOL showingPDFDocument;
@property(readonly, nonatomic, getter=isShowingSecurePage) BOOL showingSecurePage;
@property(readonly, nonatomic, getter=isShowingOtherPage) BOOL showingOtherPage;
@property(readonly, nonatomic, getter=isShowingLoadErrorPage) BOOL showingLoadErrorPage;
@property(readonly, nonatomic, getter=isShowingHTMLPage) BOOL showingHTMLPage;
@property(readonly, nonatomic, getter=isShowingExtensionPage) BOOL showingExtensionPage;
@property(readonly, nonatomic, getter=isShowingEmptyPage) BOOL showingEmptyPage;
@property(readonly, nonatomic, getter=isShowingWebView) BOOL showingWebView;
- (void)_removeQueuedNavigation;
- (void)_setDeferredNavigation:(unique_ptr_60e845e1)arg1 shouldInformQueuedNavigationController:(BOOL)arg2;
- (void)_initiateQueuedNavigation;
- (void)clearQueuedNavigation:(struct QueuedNavigation *)arg1;
- (void)_enqueueRestoredNavigation:(id)arg1 withTabState:(id)arg2;
@property(readonly, nonatomic) struct QueuedNavigation *queuedNavigation;
@property(readonly, nonatomic) BOOL hasQueuedNavigation;
- (void)_checkIfPageContainsCalendarEvent;
- (void)_cancelCheckForConfirmationPage;
- (void)checkIfPageContainsCalendarEvent;
- (void)_restoreTabIdentifiersWithPersistentTabState:(id)arg1;
- (void)restorePersistentState:(id)arg1 allowJavaScript:(BOOL)arg2 waitInQueue:(BOOL)arg3;
- (void)_restorePendingState;
- (void)enqueuePendingNavigationIfNeeded;
- (void)_beginPendingNavigation;
- (void)beginPendingNavigation;
@property(readonly, nonatomic) BOOL shouldDeferRestorationUntilSelected;
@property(readonly, nonatomic, getter=isSuppressingDownloads) BOOL suppressingDownloads;
- (int)_urlSecurityProviderForResult:(id)arg1;
- (int)_urlSecurityAssessmentForResult:(id)arg1;
- (struct URLSecurityManager)_urlSecurityManagerForResult:(id)arg1;
- (int)_urlSecurityProviderForSSBProvider:(id)arg1;
- (int)_urlSecurityAssessmentForServiceLookupResult:(id)arg1;
- (void)_ignoreSafeBrowsingWarning;
- (void)_showSafeBrowsingWarningPage;
- (int)_wbsAnalyticsSafeBrowsingProviderFromURLSecurityProvider:(int)arg1;
- (id)_stringFromURLSecurityProvider:(int)arg1;
- (struct SecurityInfo *)_securityInfoCreatingIfAbsent:(BOOL)arg1;
- (void)responseToSafeBrowsingWarningSelected:(unsigned long long)arg1;
- (void)urlPassedSafeBrowsingCheckForURL:(id)arg1 canGoInCacheOrNot:(int)arg2;
- (void)urlCheckDidCompleteforURL:(id)arg1 withSecurityAssessment:(int)arg2 securityProvider:(int)arg3;
- (void)performSafeBrowsingCheckForURL:(id)arg1 frameType:(long long)arg2;
- (void)_loadCertificateWarningPageForError:(id)arg1 failingTrust:(struct __SecTrust *)arg2 failingURL:(id)arg3 certificateWarningContext:(const struct Dictionary *)arg4;
- (id)_certificateWarningPagePresenterProxy;
@property(readonly, nonatomic, getter=isShowingCertificateWarning) BOOL showingCertificateWarning;
- (BOOL)_getCertificateErrorTitle:(id *)arg1 andMessage:(id *)arg2 forErrorCode:(int)arg3 host:(id)arg4 trustIncludesRevokedCertificate:(BOOL)arg5;
- (void)_logInvalidCertificateErrorWithErrorCode:(long long)arg1 trustIncludesRevokedCertificate:(BOOL)arg2;
- (BOOL)_handleCertificateError:(id)arg1 forWebViewInProcessPool:(id)arg2 frameType:(long long)arg3;
- (id)_computeExtendedValidationCertificateOrganizationName;
- (void)locationChangeDoneForWebViewInProcessPool:(id)arg1 frameType:(long long)arg2 pageLoadType:(int)arg3 error:(id)arg4;
- (void)getEVCertificateOrganizationNameWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)getExtendedValidationCertificateOrganizationNameWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)getCommittedExtendedValidationCertificateOrganizationNameWithCompletionHandler:(CDUnknownBlockType)arg1;
@property(copy, nonatomic) NSString *extendedValidationCertificateOrganizationName;
@property(readonly, nonatomic) BOOL extendedValidationCertificateAvailableForPage;
@property(readonly, nonatomic) struct __SecTrust *serverTrust;
@property(readonly, nonatomic) struct CertificateInfo certificateInfo;
@property(readonly, nonatomic) NSArray *certificateChain;
@property(readonly, nonatomic, getter=isSecureEnoughToShowLock) BOOL secureEnoughToShowLock;
@property(readonly, nonatomic) BOOL isPageEligibileToShowNotSecureWarning;
- (void)extensionWithIdentifier:(id)arg1 flaggedURL:(id)arg2 asUnsafeWithAssessment:(int)arg3;
- (void)didRunJavaScriptForSharingExtension:(id)arg1 forRequestWithIdentifier:(unsigned long long)arg2;
- (void)didCreateVisibleContentsSnapshotForSharing:(id)arg1 forRequestWithIdentifier:(unsigned long long)arg2;
- (void)didCreateVisibleContentsSnapshot:(const struct Image *)arg1 forRequestWithIdentifier:(unsigned long long)arg2;
- (void)didGetVisibleContentsAsDataURLString:(id)arg1 forRequestWithIdentifier:(unsigned long long)arg2;
- (void)_requestVisibleContentsSnapshotAsDataURLString:(unsigned long long)arg1;
- (void)getVisibleContentsAsDataURLStringWithCompletionHandler:(CDUnknownBlockType)arg1;
- (BOOL)dispatchBeforeNavigateEventForURL:(id)arg1;
- (void)generatePDFDataForExport;
- (void)_presentSaveDialog;
- (BOOL)_isSavingAsWebArchive;
@property(readonly, nonatomic) BOOL canSaveAsPDF;
@property(readonly, nonatomic) BOOL canSaveAsWebArchive;
- (BOOL)canSave;
- (unsigned long long)didExceedDatabaseQuotaForURL:(id)arg1 withOriginDisplayName:(id)arg2 databaseIdentifier:(id)arg3 databaseDisplayName:(id)arg4 currentQuota:(unsigned long long)arg5 currentOriginUsage:(unsigned long long)arg6 currentDatabaseUsage:(unsigned long long)arg7 expectedUsage:(unsigned long long)arg8;
- (unsigned long long)_defaultDatabaseQuota;
- (void)confirmUnloadingPageWithPIPDuringNavigationWithCompletionHandler:(CDUnknownBlockType)arg1 isReload:(BOOL)arg2;
- (BOOL)shouldConfirmUnloadingPageWithPIPDuringNavigation;
- (void)updateCustomSwipeViews;
- (void)didCancelClientRedirectForFrame:(const struct Frame *)arg1;
- (void)willPerformClientRedirectForFrame:(const struct Frame *)arg1 toURL:(id)arg2;
- (id)browserContentViewControllerForNavigationPurposes;
- (BOOL)isNavigatingToURLFromClientRedirectDuringPageNavigation:(id)arg1;
- (BOOL)dispatchNavigateEventIfNecessary;
- (void)goHome;
- (void)goForward;
- (void)goBack;
@property(readonly, nonatomic) BOOL canGoForward;
@property(readonly, nonatomic) BOOL canGoBack;
- (void)showErrorPageWithTemplate:(int)arg1 pageURL:(id)arg2 title:(id)arg3 messageHTML:(id)arg4;
- (void)showErrorPageForJavaScriptInUnifiedField:(id)arg1;
- (id)_generatePageHTMLForErrorTemplate:(int)arg1 withTitle:(id)arg2 messageHTML:(id)arg3;
- (id)_templateStringForPageLoadErrorTemplate:(int)arg1;
- (int)_computeErrorPageTemplateForError:(id)arg1;
- (id)_computeEscapedErrorPageMessageForError:(id)arg1;
- (id)_computeErrorPageTitleForError:(id)arg1;
- (void)_handleErrorForWebViewInProcessPool:(id)arg1 frameType:(long long)arg2 pageLoadType:(int)arg3 error:(id)arg4 getIsTryingFallbackURLs:(char *)arg5;
- (void)commitOrCancelBackgroundNavigationLoadAsAppropriate;
- (void)cancelBackgroundNavigation;
- (id)startSpawnedTabBackgroundNavigationWithURL:(id)arg1 shouldGoBackAfterBackgroundNavigationIsCommitted:(BOOL)arg2;
- (void)triedToCloseBeforeCommittingToBackgroundLoadWithResult:(long long)arg1;
- (BOOL)tryToCloseBeforeCommittingToBackgroundLoadWithDeferredCompletionHandler:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) BOOL isBackgroundLoadContentViewController;
@property(readonly, nonatomic) BackgroundLoad *backgroundLoad;
- (BOOL)_supportsNetworkDiagnostics;
- (int)_computeLoadingStatus;
- (id)_loadNextFallbackURL;
- (void)_clearFallbackURLs;
- (BOOL)_hasFallbackURLs;
- (void)_didStartBrowserInitiatedLoadUsingBackForwardList:(BOOL)arg1;
- (void)_stopLoadingPage;
- (id)_loadURLRequest:(const struct URLRequest *)arg1 tabLabel:(id)arg2 lifetime:(long long)arg3 allowJavaScript:(BOOL)arg4 waitInQueue:(BOOL)arg5 clearFallbackURLs:(BOOL)arg6;
- (void)scheduleCorrectButAbandonedParsecFeedbackIfPossible;
- (void)noteNavigationFromSearchSuggestionsIncludingParsecResults:(BOOL)arg1 queryID:(unsigned long long)arg2;
- (void)restoreFromSessionStateData:(const struct Data *)arg1 expectedURL:(id)arg2;
@property(readonly, nonatomic) NSData *sessionStateDataFilteringURLs;
@property(readonly, nonatomic) struct SessionState sessionState;
- (void)didCommitLoadForFrame:(const struct Frame *)arg1;
- (void)didFinishNavigationProgressForURL:(id)arg1;
- (void)reportCurrentAutoplaySignal;
- (void)didReplaceNavigationState;
- (void)didFailProvisionalLoad;
- (void)sessionStateDidChange;
- (void)loadingStatusHasChanged;
- (void)reloadWithOption:(long long)arg1;
- (void)performReloadWithoutContentBlockers;
- (void)reloadWithoutContentBlockers;
- (void)reloadFromOrigin;
- (void)reloadIfShowingErrorPage;
- (void)reload;
- (void)_willReload;
- (void)stopLoading;
- (void)clearPendingBrowserInitiatedLoad;
- (id)_unresponsiveWebProcessDialogTitleForSingleOtherPageWithName:(id)arg1;
- (id)_unresponsiveWebProcessDialogTitleWithNumberOfOtherPages:(unsigned long long)arg1;
- (id)_unresponsiveWebProcessDialogTitle;
- (id)_unresponsiveWebProcessDialogTerminateButtonTitle;
- (BOOL)_pageLoadOperationUsesBackForwardList:(long long)arg1;
- (void)_abortInitiateLoad;
- (void)_initiateLoad;
- (id)_tryToInitiateLoad:(long long)arg1 initiateLoadBlock:(CDUnknownBlockType)arg2;
- (id)tryDownloadWithMultipleURLs:(unique_ptr_aba2cdfe)arg1 httpReferrer:(id)arg2;
- (id)tryMultipleURLs:(unique_ptr_aba2cdfe)arg1 httpReferrer:(id)arg2;
- (void)reuseForURLRequest:(id)arg1;
- (void)loadURLRequest:(const struct URLRequest *)arg1 tabLabel:(id)arg2 lifetime:(long long)arg3 allowJavaScript:(BOOL)arg4 waitInQueue:(BOOL)arg5;
- (void)loadURLTryingToReuseBackForwardItem:(id)arg1;
- (void)loadURLRequest:(const struct URLRequest *)arg1;
- (void)loadURLRequest:(const struct URLRequest *)arg1 tabLabel:(id)arg2;
- (void)loadURL:(id)arg1 tabLabel:(id)arg2 httpReferrer:(id)arg3;
- (void)loadURL:(id)arg1;
@property(readonly, nonatomic) BOOL shouldSuppressOpenPanelDueToProvisionalLoad;
@property(readonly, nonatomic) BOOL shouldSuppressJavaScriptDialogsDueToProvisionalLoad;
@property(readonly, nonatomic) BOOL canReload;
@property(readonly, nonatomic) BOOL isLoadingProvisionally;
@property(readonly, nonatomic) BOOL isLoadingOrWaitingToLoadPage;
@property(readonly, nonatomic) BOOL isLoadingSingleResource;
- (id)_otherContentViewControllersThatAreShowingWebContent;
- (BOOL)_isOnlyTabInWebProcessThatIsShowingWebContent;
- (void)_terminateSafariFromWebProcessCrashIfNeededForError:(id)arg1;
- (void)_setWebProcessForcePaused:(BOOL)arg1;
- (void)_reloadAfterWebProcessExit;
- (void)recoverFromWebProcessExit;
- (void)forceCrashWebProcess;
@property(copy, nonatomic) NSString *customTextEncodingName;
@property(readonly, nonatomic) BOOL supportsTextEncoding;
- (id)_displayNameForFileURL:(id)arg1;
- (id)_emptyPageName;
- (void)_currentURLHasChanged;
- (void)provisionalURLHasChanged;
- (void)pageTitleHasChanged;
- (void)didCalculateBestWidthForPage:(double)arg1;
- (void)calculateBestWidthForCurrentPage;
- (void)hasOnlySecureContentDidChange;
@property(readonly, nonatomic) BOOL hasOnlySecureContent;
@property(readonly, nonatomic) NSURL *currentBackForwardItemURL;
@property(readonly, nonatomic) NSString *currentPageHostName;
@property(readonly, nonatomic) NSURL *failedOrCurrentURL;
@property(readonly, nonatomic) NSURL *failedURL;
@property(readonly, nonatomic) NSURL *expectedOrCurrentURLOrLastActiveURLIfCrashed;
@property(readonly, nonatomic) NSURL *expectedOrCurrentURL;
@property(readonly, nonatomic) NSURL *expectedURL;
@property(readonly, nonatomic) NSString *expectedOrCurrentOriginalURLString;
@property(readonly, nonatomic) NSString *mediaMenuItemTitle;
@property(readonly, nonatomic) NSString *displayName;
@property(readonly, nonatomic) NSString *pageName;
@property(readonly, nonatomic) NSString *currentPageTitle;
- (void)runModal;
- (void)_clearWebKitPageClients;
- (void)_installWebKitPageClients;
@property(readonly, nonatomic) struct PageUIClient *pageUIClient;
@property(readonly, nonatomic) struct BrowserPageContextMenuClient *pageContextMenuClient;
@property(readonly, nonatomic) struct BrowserPageNavigationClient *pageNavigationClient;
- (void)_installWebView;
- (void)_updateWKViewLayoutModeForWindow:(id)arg1;
- (void)updateWKViewLayoutMode;
- (void)disableFrameSizeUpdates;
- (void)enableFrameSizeUpdates;
@property(readonly, nonatomic) BOOL usesPrivateBrowsing;
@property(readonly, nonatomic) unsigned long long browsingMode;
@property(readonly, nonatomic) SearchableWKView *frontmostContentView;
@property(readonly, nonatomic) TabContentView *tabContentView;
@property(readonly, nonatomic) BrowserTabViewItem *tabViewItem;
@property(readonly, nonatomic) id <BrowserContentLoaderDelegate> contentLoaderDelegate;
@property(readonly, nonatomic) struct BrowserViewControllerWKAdapter *browserViewControllerWKAdapter;
@property(readonly, nonatomic) BrowserWindowController *browserWindowController;
@property(readonly, nonatomic) BOOL isDisposable;
@property(readonly, nonatomic) NSWindow *hostWindow;
- (BOOL)hasAncestorWithTabIdentifier:(unsigned int)arg1;
- (void)setAncestorTabIdentifiersWithParent:(id)arg1;
- (void)didMoveToDocument:(id)arg1;
@property(readonly, nonatomic) BrowserWKView *browserView;
- (BOOL)contentIsCapableOfZoom;
- (void)terminateWithoutReloadingPageDueToUnresponsiveWebProcess;
- (void)terminateAndReloadPageDueToUnresponsiveWebProcess;
- (void)_close;
- (void)invalidate;
- (BOOL)tryClose;
- (void)close;
- (void)transferStateFromBrowserContentViewController:(id)arg1;
- (Ref_a0637525)createContentViewController;
- (void)loadViewIfNeeded;
- (void)viewDidLoad;
- (void)_commonInitializationWithDocument:(id)arg1;
- (id)_createWebViewWithConfigurationRef:(struct OpaqueWKPageConfiguration *)arg1;
- (id)initWithDocument:(id)arg1 context:(const struct Context *)arg2 pageGroup:(const struct PageGroup *)arg3 relatedToPage:(const struct Page *)arg4 browsingMode:(unsigned long long)arg5 websiteDataStore:(id)arg6;
- (id)initWithDocument:(id)arg1 context:(const struct Context *)arg2 pageGroup:(const struct PageGroup *)arg3 relatedToPage:(const struct Page *)arg4 browsingMode:(unsigned long long)arg5;
- (BOOL)_isAutoSelectableWithURL:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

