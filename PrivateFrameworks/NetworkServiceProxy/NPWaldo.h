//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "NSCopying.h"
#import "NSSecureCoding.h"

@class NPKeyBag, NPLocation, NPTuscanyEdge, NPWaldoLocationManager, NSArray, NSData, NSDate, NSDictionary, NSMutableDictionary, NSNumber, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_source>, NSPNetworkAgent, NSString, NSURL, NSUUID, NWNetworkAgentRegistration;

@interface NPWaldo : NSObject <NSSecureCoding, NSCopying>
{
    NSDictionary *_currentNetworkCharacteristics;
    NSArray *_edges;
    NSArray *_allOnRamps;
    BOOL _shouldSave;
    BOOL _reprocessPending;
    BOOL _daypassRefreshInProgress;
    BOOL _reprocessCancelled;
    unsigned int _generation;
    NSString *_identifier;
    long long _source;
    NSNumber *_timestamp;
    NSNumber *_version;
    NSString *_dayPassHostname;
    NSNumber *_dayPassHostnamePrependLabel;
    NSNumber *_dayPassPort;
    NSNumber *_dayPassRequestTimeout;
    NSString *_dayPassLeafOID;
    NSNumber *_dayPassRevocationFailClosed;
    NSNumber *_dayPassExtendedValidation;
    NSNumber *_dayPassEnableSessionTicket;
    NSArray *_dayPassSoftExpiry;
    NSNumber *_enableLatencyDerivation;
    NSNumber *_latencyFactorA;
    NSNumber *_latencyFactorB;
    NSNumber *_latencyFactorX;
    NSNumber *_edgeFairnessFactor;
    NSNumber *_locationCheckInterval;
    NSNumber *_locationTTL;
    NSNumber *_locationToleranceDistance;
    NSNumber *_viewSize;
    NSNumber *_probePause;
    NSNumber *_probeTFO;
    NSNumber *_probeNoTFOCookie;
    NSNumber *_probeTimeout;
    NSNumber *_probeUseTFOHeuristics;
    NSNumber *_retryPause;
    NSNumber *_signatureLimit;
    NSNumber *_observedRTTSampleSize;
    NSNumber *_reprocessSamplingInterval;
    NSNumber *_reprocessSampleSize;
    NSNumber *_connectionIdleTimeoutMaximum;
    NSString *_tag;
    NSURL *_telemetryURL;
    NSString *_telemetryService;
    NSNumber *_useGeohashFromServer;
    NSNumber *_edgeSelectionEnabled;
    NSNumber *_edgeSelectionAlpha;
    NSNumber *_edgeSelectionWindowSize;
    NSNumber *_enableIPv6;
    NSNumber *_requireTFO;
    NSNumber *_TFOLeeway;
    NSNumber *_edgesGeneration;
    NSNumber *_usedEdgesGeneration;
    long long _currentEdgeIndex;
    NSString *_hostname;
    id <NPWaldoDelegate> _delegate;
    NPLocation *_cachedLocation;
    NSDate *_locationCheckTimestamp;
    NSDate *_locationExpiration;
    NPWaldo *_defaults;
    NSPNetworkAgent *_agent;
    NPKeyBag *_keybag;
    NPWaldoLocationManager *_locationManager;
    NSMutableDictionary *_networkInformation;
    NSArray *_currentEdges;
    NPTuscanyEdge *_nextEdge;
    NSObject<OS_dispatch_source> *_reprocessSamplingTimer;
    NWNetworkAgentRegistration *_agentRegistration;
    NSUUID *_configurationIdentifier;
    NSObject<OS_dispatch_queue> *_reprocessQueue;
    NSData *_updateHash;
}

+ (id)createEndpointFromHostList:(id)arg1 defaultPortString:(id)arg2 allowIPv6:(BOOL)arg3;
+ (BOOL)supportsSecureCoding;
@property(retain) NSData *updateHash; // @synthesize updateHash=_updateHash;
@property(readonly) NSObject<OS_dispatch_queue> *reprocessQueue; // @synthesize reprocessQueue=_reprocessQueue;
@property(retain) NSUUID *configurationIdentifier; // @synthesize configurationIdentifier=_configurationIdentifier;
@property(retain) NWNetworkAgentRegistration *agentRegistration; // @synthesize agentRegistration=_agentRegistration;
@property(retain) NSObject<OS_dispatch_source> *reprocessSamplingTimer; // @synthesize reprocessSamplingTimer=_reprocessSamplingTimer;
@property unsigned int generation; // @synthesize generation=_generation;
@property BOOL reprocessCancelled; // @synthesize reprocessCancelled=_reprocessCancelled;
@property(readonly) NPTuscanyEdge *nextEdge; // @synthesize nextEdge=_nextEdge;
@property(readonly) NSArray *currentEdges; // @synthesize currentEdges=_currentEdges;
@property BOOL daypassRefreshInProgress; // @synthesize daypassRefreshInProgress=_daypassRefreshInProgress;
@property(retain) NSMutableDictionary *networkInformation; // @synthesize networkInformation=_networkInformation;
@property BOOL reprocessPending; // @synthesize reprocessPending=_reprocessPending;
@property(retain) NPWaldoLocationManager *locationManager; // @synthesize locationManager=_locationManager;
@property(retain) NPKeyBag *keybag; // @synthesize keybag=_keybag;
@property(retain) NSPNetworkAgent *agent; // @synthesize agent=_agent;
@property(retain) NPWaldo *defaults; // @synthesize defaults=_defaults;
@property(retain) NSDate *locationExpiration; // @synthesize locationExpiration=_locationExpiration;
@property(retain) NSDate *locationCheckTimestamp; // @synthesize locationCheckTimestamp=_locationCheckTimestamp;
@property(retain) NPLocation *cachedLocation; // @synthesize cachedLocation=_cachedLocation;
@property BOOL shouldSave; // @synthesize shouldSave=_shouldSave;
@property __weak id <NPWaldoDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain) NSString *hostname; // @synthesize hostname=_hostname;
@property long long currentEdgeIndex; // @synthesize currentEdgeIndex=_currentEdgeIndex;
@property(copy) NSNumber *usedEdgesGeneration; // @synthesize usedEdgesGeneration=_usedEdgesGeneration;
@property(copy) NSNumber *edgesGeneration; // @synthesize edgesGeneration=_edgesGeneration;
@property(copy) NSNumber *TFOLeeway; // @synthesize TFOLeeway=_TFOLeeway;
@property(copy) NSNumber *requireTFO; // @synthesize requireTFO=_requireTFO;
@property(copy) NSNumber *enableIPv6; // @synthesize enableIPv6=_enableIPv6;
@property(copy) NSNumber *edgeSelectionWindowSize; // @synthesize edgeSelectionWindowSize=_edgeSelectionWindowSize;
@property(copy) NSNumber *edgeSelectionAlpha; // @synthesize edgeSelectionAlpha=_edgeSelectionAlpha;
@property(copy) NSNumber *edgeSelectionEnabled; // @synthesize edgeSelectionEnabled=_edgeSelectionEnabled;
@property(copy) NSNumber *useGeohashFromServer; // @synthesize useGeohashFromServer=_useGeohashFromServer;
@property(copy) NSString *telemetryService; // @synthesize telemetryService=_telemetryService;
@property(copy) NSURL *telemetryURL; // @synthesize telemetryURL=_telemetryURL;
@property(copy) NSString *tag; // @synthesize tag=_tag;
@property(copy) NSNumber *connectionIdleTimeoutMaximum; // @synthesize connectionIdleTimeoutMaximum=_connectionIdleTimeoutMaximum;
@property(copy) NSNumber *reprocessSampleSize; // @synthesize reprocessSampleSize=_reprocessSampleSize;
@property(copy) NSNumber *reprocessSamplingInterval; // @synthesize reprocessSamplingInterval=_reprocessSamplingInterval;
@property(copy) NSNumber *observedRTTSampleSize; // @synthesize observedRTTSampleSize=_observedRTTSampleSize;
@property(copy) NSNumber *signatureLimit; // @synthesize signatureLimit=_signatureLimit;
@property(copy) NSNumber *retryPause; // @synthesize retryPause=_retryPause;
@property(copy) NSNumber *probeUseTFOHeuristics; // @synthesize probeUseTFOHeuristics=_probeUseTFOHeuristics;
@property(copy) NSNumber *probeTimeout; // @synthesize probeTimeout=_probeTimeout;
@property(copy) NSNumber *probeNoTFOCookie; // @synthesize probeNoTFOCookie=_probeNoTFOCookie;
@property(copy) NSNumber *probeTFO; // @synthesize probeTFO=_probeTFO;
@property(copy) NSNumber *probePause; // @synthesize probePause=_probePause;
@property(copy) NSNumber *viewSize; // @synthesize viewSize=_viewSize;
@property(copy) NSNumber *locationToleranceDistance; // @synthesize locationToleranceDistance=_locationToleranceDistance;
@property(copy) NSNumber *locationTTL; // @synthesize locationTTL=_locationTTL;
@property(copy) NSNumber *locationCheckInterval; // @synthesize locationCheckInterval=_locationCheckInterval;
@property(copy) NSNumber *edgeFairnessFactor; // @synthesize edgeFairnessFactor=_edgeFairnessFactor;
@property(copy) NSNumber *latencyFactorX; // @synthesize latencyFactorX=_latencyFactorX;
@property(copy) NSNumber *latencyFactorB; // @synthesize latencyFactorB=_latencyFactorB;
@property(copy) NSNumber *latencyFactorA; // @synthesize latencyFactorA=_latencyFactorA;
@property(copy) NSNumber *enableLatencyDerivation; // @synthesize enableLatencyDerivation=_enableLatencyDerivation;
@property(copy) NSArray *dayPassSoftExpiry; // @synthesize dayPassSoftExpiry=_dayPassSoftExpiry;
@property(copy) NSNumber *dayPassEnableSessionTicket; // @synthesize dayPassEnableSessionTicket=_dayPassEnableSessionTicket;
@property(copy) NSNumber *dayPassExtendedValidation; // @synthesize dayPassExtendedValidation=_dayPassExtendedValidation;
@property(copy) NSNumber *dayPassRevocationFailClosed; // @synthesize dayPassRevocationFailClosed=_dayPassRevocationFailClosed;
@property(copy) NSString *dayPassLeafOID; // @synthesize dayPassLeafOID=_dayPassLeafOID;
@property(copy) NSNumber *dayPassRequestTimeout; // @synthesize dayPassRequestTimeout=_dayPassRequestTimeout;
@property(copy) NSNumber *dayPassPort; // @synthesize dayPassPort=_dayPassPort;
@property(copy) NSNumber *dayPassHostnamePrependLabel; // @synthesize dayPassHostnamePrependLabel=_dayPassHostnamePrependLabel;
@property(copy) NSString *dayPassHostname; // @synthesize dayPassHostname=_dayPassHostname;
@property(copy) NSNumber *version; // @synthesize version=_version;
@property(copy) NSNumber *timestamp; // @synthesize timestamp=_timestamp;
@property(readonly) long long source; // @synthesize source=_source;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
- (void).cxx_destruct;
- (void)incrementSessionCounters;
- (void)cleanupStaleKeys;
@property(readonly) CDUnknownBlockType latencyComparator;
- (id)onRampForIndex:(id)arg1;
@property(readonly) BOOL isIPv6Enabled;
- (id)copyStateIncludeDistance:(BOOL)arg1;
- (id)edgeContainingOnRamp:(id)arg1;
@property(readonly) NSDate *currentNetworkLastUsed;
@property(readonly) NSDate *expirationDate;
- (id)copyLatencyInfoDictionary:(BOOL)arg1 copyAll:(BOOL)arg2;
- (void)logLatencyInfoToStdout:(BOOL)arg1 logAll:(BOOL)arg2 logEdgeSelection:(BOOL)arg3;
- (void)refreshDayPassesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)getDayPassRTT;
@property(readonly) BOOL hasEdges;
@property(readonly) unsigned long long edgeCount;
- (id)edgeAtIndex:(long long)arg1;
- (void)mergeEdgeList:(id)arg1 forNetworkSignature:(id)arg2;
- (void)rebuildLatencyMapAllSignatures:(BOOL)arg1;
- (void)resortEdgeListForCurrentNetworkSignature;
- (id)currentNetworkInfo;
@property(readonly) NSArray *currentEdgeList;
@property(readonly) unsigned long long probeSize;
- (BOOL)shouldFetchWaldo;
- (void)loadObservedRTTSamples:(id)arg1;
- (BOOL)validateEdgeList:(id)arg1;
- (id)copyEdgeListRTTAverage:(id)arg1 observed:(BOOL)arg2 shortDescription:(BOOL)arg3;
- (id)copyEdgeList:(id)arg1;
- (void)logEdgeList:(id)arg1 debug:(BOOL)arg2 toStdout:(BOOL)arg3;
- (void)startProbingEdges:(id)arg1 atIndex:(unsigned long long)arg2 doneCount:(unsigned long long)arg3 sampleCount:(unsigned long long)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (BOOL)reprocessWithNewRTT:(unsigned long long)arg1 reProbe:(char *)arg2;
- (long long)getFallbackReasonForLatencies:(id)arg1;
- (void)reprocessLatencies:(id)arg1 sampleCount:(unsigned long long)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)createEdgeLatenciesToProbeWithEdgeIndex:(unsigned long long)arg1 startSampleCount:(unsigned long long *)arg2;
- (BOOL)isEndpointProbed:(id)arg1 parameters:(struct networkParameters *)arg2 latencies:(id)arg3 checkSampleSize:(BOOL)arg4 incompleteLatency:(id *)arg5;
- (void)reprocessEdgeAtIndex:(unsigned long long)arg1 networkSignature:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)reprocessAdHocWithEdgeIndex:(unsigned long long)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)reprocessWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)copyEdgeSelectionTelemetry;
- (void)updateEdgeSelection:(unsigned long long)arg1;
- (void)initializeEdgeSelection;
- (void)cancelProbes;
- (long long)getCurrentNetworkInterfaceType;
- (void)setCurrentNetworkCharacteristics:(id)arg1;
- (void)timestampNetworkSignature:(id)arg1;
- (BOOL)shouldPerformDayPassRefresh;
@property(readonly) NPTuscanyEdge *currentEdge;
@property(readonly) long long dayPassFetchCount;
- (long long)indexOfBestEdge;
- (void)updateMetaDataNeedProbe:(BOOL)arg1 refresh:(BOOL)arg2 push:(BOOL)arg3 minRTT:(unsigned long long)arg4;
- (void)handleUsageReport:(id)arg1;
- (BOOL)isLatenciesCompleteForNetwork:(id)arg1;
- (void)ageOutLatencyMap;
- (void)removeDayPassesFromKernel;
- (void)pushKeybagToKernelCanReuse:(BOOL)arg1;
- (void)pushKeybagToKernel;
- (void)pushKeybagToKernelUpdateGeneration:(BOOL)arg1;
- (void)establishTrustWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)removeFromKeychain;
- (void)saveToKeychain;
- (id)initFromKeychainWithIdentifier:(id)arg1;
- (id)description;
- (void)teardownNetworkAgent;
- (void)updateNetworkAgentWithKeybag:(id)arg1 networkInfo:(id)arg2;
@property(retain) NSArray *allOnRamps;
@property(copy) NSArray *edges;
- (void)merge:(id)arg1 missingSettingsOnly:(BOOL)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)linkAllSignatures:(BOOL)arg1;
- (void)link;
- (void)linkLatenciesAllSignatures:(BOOL)arg1;
@property BOOL reResolve;
- (void)resolveWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)initWithIdentifier:(id)arg1 timestamp:(id)arg2 fromDictionary:(id)arg3 source:(long long)arg4;
- (id)init;

@end

