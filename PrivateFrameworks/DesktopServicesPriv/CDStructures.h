//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

@class AMPDevice, DS_TKeyValueObserverGlue, DeviceCollection, FITNode, NSArray, NSIndexSet, NSMetadataQuery, NSMutableArray, NSObject, NSProgress;

#pragma mark Named Structures

struct AuthorizationOpaqueRef;

struct TConditionVariable {
    struct condition_variable_any _field1;
    int _field2;
};

struct TDSHelperContext {
    CDUnknownFunctionPointerType *_field1;
    struct mutex _field2;
    struct TConditionVariable _field3;
    _Bool _field4;
    unsigned int _field5;
    struct TRef<NSObject<OS_xpc_object>*, TRetainReleasePolicy<xpc_object_t>> _field6;
    struct TString _field7;
    unsigned char _field8[16];
    struct AuthorizationOpaqueRef *_field9;
    struct TRef<NSObject<OS_xpc_object>*, TRetainReleasePolicy<xpc_object_t>> _field10;
    struct TNSRef<DS_TDSHelperConnectionHandler, void> _field11;
};

struct TDSMutex {
    struct _opaque_pthread_mutex_t fMutex;
};

struct TKeyValueObserver {
    struct TNSRef<DS_TKeyValueObserverGlue, void> fObserver;
    NSObject *fObjectToObserve;
    NSArray *fArrayOfObjectsToObserve;
    struct TNSRef<NSIndexSet, void> fIndexesOfObjectsToObserve;
    struct TString fKeyPathToObserve;
};

struct TNSRef<AMPDevice, void> {
    AMPDevice *fRef;
};

struct TNSRef<DS_TDSHelperConnectionHandler, void> {
    id _field1;
};

struct TNSRef<DS_TKeyValueObserverGlue, void> {
    DS_TKeyValueObserverGlue *fRef;
};

struct TNSRef<DeviceCollection, void> {
    DeviceCollection *fRef;
};

struct TNSRef<FITNode, void> {
    FITNode *fRef;
};

struct TNSRef<NSArray<AMPDevice *>, void> {
    id _field1;
};

struct TNSRef<NSIndexSet, void> {
    NSIndexSet *fRef;
};

struct TNSRef<NSMetadataQuery, void> {
    NSMetadataQuery *fRef;
};

struct TNSRef<NSMutableArray<AMPDevice *>, void> {
    NSMutableArray *fRef;
};

struct TNSRef<NSProgress, void> {
    NSProgress *fRef;
};

struct TNode;

struct TNodePtr {
    struct TNode *fCountedNode;
};

struct TRef<NSObject<OS_xpc_object>*, TRetainReleasePolicy<xpc_object_t>> {
    id _field1;
};

struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> {
    struct __CFString *fRef;
};

struct TString {
    struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> fString;
};

struct __hash_node_base<std::__1::__hash_node<NSObject *, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<NSObject *, void *>*> *__next_;
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct condition_variable {
    struct _opaque_pthread_cond_t {
        long long _field1;
        char _field2[40];
    } _field1;
};

struct condition_variable_any {
    struct condition_variable _field1;
    struct shared_ptr<std::__1::mutex> _field2;
};

struct function<void ()> {
    struct type __buf_;
    struct __base<void ()> *__f_;
};

struct function<void (NSDictionary<NSString *, NSObject *>*)> {
    struct type __buf_;
    struct __base<void (NSDictionary<NSString *, NSObject *>*)> *__f_;
};

struct mutex {
    struct _opaque_pthread_mutex_t _field1;
};

struct shared_ptr<std::__1::mutex> {
    struct mutex *_field1;
    struct __shared_weak_count *_field2;
};

struct type {
    unsigned char __lx[32];
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<NSObject *, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_set<NSObject *, std::__1::hash<NSObject *>, std::__1::equal_to<NSObject *>, std::__1::allocator<NSObject *>> {
    struct __hash_table<NSObject *, std::__1::hash<NSObject *>, std::__1::equal_to<NSObject *>, std::__1::allocator<NSObject *>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>, std::__1::allocator<std::__1::__hash_node<NSObject *, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<NSObject *, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<NSObject *>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<NSObject *>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<TKeyValueObserver, std::__1::allocator<TKeyValueObserver>> {
    struct TKeyValueObserver *__begin_;
    struct TKeyValueObserver *__end_;
    struct __compressed_pair<TKeyValueObserver *, std::__1::allocator<TKeyValueObserver>> {
        struct TKeyValueObserver *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct TNSRef<NSArray<AMPDevice *>, void> {
    id _field1;
} TNSRef_16a0d36a;

typedef struct TNSRef<NSProgress, void> {
    NSProgress *fRef;
} TNSRef_b16f0fdb;

typedef struct function<void ()> {
    struct type __buf_;
    struct __base<void ()> *__f_;
} function_b1fce659;

typedef struct function<void (NSDictionary<NSString *, NSObject *>*)> {
    struct type __buf_;
    struct __base<void (NSDictionary<NSString *, NSObject *>*)> *__f_;
} function_e1076a84;

typedef struct unordered_set<NSObject *, std::__1::hash<NSObject *>, std::__1::equal_to<NSObject *>, std::__1::allocator<NSObject *>> {
    struct __hash_table<NSObject *, std::__1::hash<NSObject *>, std::__1::equal_to<NSObject *>, std::__1::allocator<NSObject *>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>, std::__1::allocator<std::__1::__hash_node<NSObject *, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<NSObject *, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<NSObject *>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<NSObject *>> {
            float __value_;
        } __p3_;
    } __table_;
} unordered_set_24e1661d;

