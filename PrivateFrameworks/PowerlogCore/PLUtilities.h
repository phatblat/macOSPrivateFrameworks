//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@interface PLUtilities : NSObject
{
}

+ (id)MavRevStringQuery;
+ (void)refreshBUI;
+ (BOOL)isValidString:(id)arg1;
+ (id)JSONSanitizeDictionary:(id)arg1;
+ (id)shortUUIDString;
+ (long long)roundToSigFig:(int)arg1 withSigFig:(int)arg2;
+ (id)allSubClassesForClass:(Class)arg1;
+ (BOOL)isPingPongChargingWith:(BOOL)arg1 andBatteryLevelPercent:(double)arg2;
+ (id)modeForEntryKey:(id)arg1 withKeyName:(id)arg2;
+ (short)logModeForEntryKey:(id)arg1 withKey:(id)arg2 andValue:(id)arg3;
+ (short)canLogMode:(id)arg1 fullMode:(BOOL)arg2;
+ (BOOL)shouldLogForEntryKey:(id)arg1;
+ (id)getWhiteblacklist;
+ (id)hashString:(id)arg1;
+ (BOOL)isALSCurveHigherThanDefault;
+ (BOOL)isEduMode;
+ (BOOL)isAppAnalyticsEnabled;
+ (BOOL)isSiriEnabled;
+ (BOOL)isHeySiriEnabled;
+ (double)defaultBatteryEnergyCapacity;
+ (BOOL)hasBatteryUI;
+ (BOOL)hasGasGauge;
+ (BOOL)gasGaugeEnabled;
+ (id)runningAsUser;
+ (BOOL)runningAsMobileUser;
+ (BOOL)isPowerlogHelperd;
+ (BOOL)isFullModeDaemon;
+ (id)fullModeDaemonName;
+ (BOOL)isLiteModeDaemon;
+ (id)liteModeDaemonName;
+ (BOOL)isUserProcess;
+ (id)processNameForPid:(int)arg1;
+ (id)bundleIDFromURL:(id)arg1;
+ (id)bundleIDFromPid:(int)arg1;
+ (id)launchdNameToProcessName:(id)arg1;
+ (id)getIdentifierFromEntry:(id)arg1;
+ (void)exitSafe:(int)arg1;
+ (void)exitWithReasonSync:(short)arg1;
+ (void)exitWithReason:(short)arg1;
+ (id)deviceBootTime;
+ (id)dateFromTimevalSystemTime:(struct timeval)arg1;
+ (id)dateFromTimeval:(struct timeval)arg1;
+ (double)secondsFromMachTime:(unsigned long long)arg1;
+ (void)postNotificationName:(id)arg1 object:(id)arg2 userInfo:(id)arg3;
+ (void)dispatchSyncWithoutDeadlockOnQueue:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
+ (unsigned long long)dispatchTimeInSeconds:(double)arg1;
+ (id)workQueue;
+ (id)transactionWorkQueue;
+ (id)workQueueForKey:(id)arg1;
+ (id)workQueueForClass:(Class)arg1;
+ (id)extractDateStringAndUUIDStringFromFilePath:(id)arg1;
+ (int)compressWithSource:(struct __sFILE *)arg1 withDestination:(struct __sFILE *)arg2 withLevel:(int)arg3;
+ (void)setMobileOwnerForFile:(id)arg1;
+ (BOOL)createAndChownDirectoryIfDirectoryDoesNotExist:(id)arg1;
+ (BOOL)createAndChownDirectory:(id)arg1;
+ (BOOL)moveItemAtPath:(id)arg1 toPath:(id)arg2 error:(id *)arg3;
+ (id)containerPath;

@end

