//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class NSMutableDictionary, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_semaphore>, NSString;

@interface PLSQLiteConnection : NSObject
{
    int _transactionInProgress;
    int _entryCacheStorageSize;
    NSString *_filePath;
    struct sqlite3 *_dbConnection;
    NSObject<OS_dispatch_semaphore> *_dbSem;
    NSMutableDictionary *_preparedStatements;
    NSMutableDictionary *_preparedUpdateStatements;
    NSMutableDictionary *_preparedDynamicStatements;
    NSString *_transactionLock;
    NSString *_cachedClassName;
    long long _cacheSize;
}

+ (id)versionForTable:(id)arg1;
+ (id)masterTableForTable:(id)arg1 andType:(id)arg2;
+ (double)periodicIntegrityCheckInterval;
+ (id)tableHasTimestampColumnSem;
+ (id)tableHasTimestampColumn;
+ (void)removeDBAtFilePath:(id)arg1;
+ (id)sharedSQLiteConnection;
@property long long cacheSize; // @synthesize cacheSize=_cacheSize;
@property int entryCacheStorageSize; // @synthesize entryCacheStorageSize=_entryCacheStorageSize;
@property(retain) NSString *cachedClassName; // @synthesize cachedClassName=_cachedClassName;
@property(retain) NSString *transactionLock; // @synthesize transactionLock=_transactionLock;
@property int transactionInProgress; // @synthesize transactionInProgress=_transactionInProgress;
@property(retain) NSMutableDictionary *preparedDynamicStatements; // @synthesize preparedDynamicStatements=_preparedDynamicStatements;
@property(retain) NSMutableDictionary *preparedUpdateStatements; // @synthesize preparedUpdateStatements=_preparedUpdateStatements;
@property(retain) NSMutableDictionary *preparedStatements; // @synthesize preparedStatements=_preparedStatements;
@property(retain) NSObject<OS_dispatch_semaphore> *dbSem; // @synthesize dbSem=_dbSem;
@property struct sqlite3 *dbConnection; // @synthesize dbConnection=_dbConnection;
@property(copy, nonatomic) NSString *filePath; // @synthesize filePath=_filePath;
- (void).cxx_destruct;
- (BOOL)copyDatabaseToPath:(id)arg1 fromDate:(id)arg2 toDate:(id)arg3 withTableFilters:(id)arg4 vacuumDB:(BOOL)arg5 withCacheSize:(long long)arg6;
- (BOOL)copyDatabaseToPath:(id)arg1 fromDate:(id)arg2 toDate:(id)arg3 withTableFilters:(id)arg4 vacuumDB:(BOOL)arg5;
- (BOOL)copyDatabaseToPath:(id)arg1 fromDate:(id)arg2 toDate:(id)arg3;
- (BOOL)copyDatabaseToPath:(id)arg1;
- (void)setJournalMode:(short)arg1;
- (BOOL)passesIntegrityCheck;
- (void)vacuum;
- (void)closeConnection;
- (void)moveToPath:(id)arg1;
- (void)loadArrayValuesIntoEntry:(id)arg1;
- (void)loadDynamicValuesIntoEntry:(id)arg1;
- (id)entriesForKey:(id)arg1 withQuery:(id)arg2;
- (id)entriesForKey:(id)arg1 withProperties:(id)arg2;
- (void)setAllNullValuesForEntryKey:(id)arg1 forKey:(id)arg2 toValue:(id)arg3 withFilters:(id)arg4;
- (void)deleteAllEntriesForKey:(id)arg1 withFilters:(id)arg2;
- (void)deleteArrayEntriesForKey:(id)arg1 withRowID:(long long)arg2;
- (void)deleteDynamicEntriesForKey:(id)arg1 withRowID:(long long)arg2;
- (void)deleteEntryForKey:(id)arg1 withRowID:(long long)arg2;
- (void)updateEntry:(id)arg1;
- (void)writeArrayEntries:(id)arg1;
- (void)writeDynamicEntries:(id)arg1;
- (long long)writeEntry:(id)arg1;
- (int)bindEntry:(id)arg1 toPreparedStatement:(id)arg2 atBindPosition:(int)arg3;
- (void)buildColumnInsert:(id *)arg1 andValueInsert:(id *)arg2 forEntry:(id)arg3;
- (void)endTransaction;
- (void)beginTransaction;
- (BOOL)isTransactionInProgress;
- (void)createCoveringIndexOnTable:(id)arg1 forColumns:(id)arg2;
- (void)createIndexOnTable:(id)arg1 forColumn:(id)arg2;
- (void)createTableName:(id)arg1 withColumns:(id)arg2;
- (double)schemaVersionForTable:(id)arg1;
- (void)setSchemaVersion:(double)arg1 forTableName:(id)arg2;
- (id)tableInfo:(id)arg1;
- (BOOL)tableExistsForTableName:(id)arg1;
- (id)performQuery:(id)arg1;
- (void)displaySchema:(id)arg1;
- (id)performStatement:(id)arg1;
@property(readonly) NSObject<OS_dispatch_queue> *workQueue;
- (void)hashEntryKeyKeys:(id)arg1;
- (void)dropTables:(id)arg1;
- (void)dropTable:(id)arg1;
- (void)removeEmptyOldTables;
- (void)removeIDIndexes;
- (BOOL)checkEmptyMasterTable:(id)arg1;
- (void)trimTable:(id)arg1 fromDate:(id)arg2 withFilter:(id)arg3 withTrimLimit:(long long)arg4;
- (void)runTrimQuery:(id)arg1;
- (void)trimAllTablesFromDate:(id)arg1 toDate:(id)arg2 withTableFilters:(id)arg3;
- (void)trimAllTablesFromDate:(id)arg1 toDate:(id)arg2;
- (void)enumerateAllTablesWithBlock:(CDUnknownBlockType)arg1;
- (void)removeTableNameFromMergeDB:(id)arg1;
- (id)sqlFormatedColumnNamesForTable:(id)arg1 withQuoteChar:(BOOL)arg2;
- (id)sqlFormatedColumnNamesForTableSelect:(id)arg1;
- (id)sqlFormatedColumnNamesForTableInsert:(id)arg1;
- (int)rowCountForTable:(id)arg1;
- (void)clearTableHasTimestampColumnCache;
- (BOOL)tableHasTimestampColumn:(id)arg1;
- (void)printDBStatusString;
- (BOOL)openCurrentFileWithCacheSize:(long long)arg1 withFlags:(id)arg2;
- (BOOL)openCurrentFileWithCacheSize:(long long)arg1;
- (BOOL)openCurrentFile;
- (void)dealloc;
- (void)scheduleIntegrityCheck;
- (id)getIntegrityCheckCriteria;
- (id)initWithFilePath:(id)arg1 withCacheSize:(long long)arg2 withFlags:(id)arg3;
- (id)initWithFilePath:(id)arg1 withCacheSize:(long long)arg2;
- (BOOL)commonInitProcessWithFilePath:(id)arg1 withCacheSize:(long long)arg2;
- (id)initWithFilePath:(id)arg1 withFlags:(id)arg2;
- (id)initWithFilePath:(id)arg1;
- (id)init;

@end

