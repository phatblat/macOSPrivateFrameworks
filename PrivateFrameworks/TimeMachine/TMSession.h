//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class NSArray, NSDictionary, NSURL;

@interface TMSession : NSObject
{
    NSArray *_backupXIDs;
    NSDictionary *_backupDeviceByXID;
    NSURL *_dataVolumeMountPoint;
    id _daSession;
    id _sessionRunLoop;
    NSURL *_sidecarMountPoint;
    NSArray *_backups;
}

+ (id)testBackupProxy;
+ (void)setTestBackupProxy:(id)arg1;
+ (BOOL)_connectToBackupd:(id *)arg1 connectionBlock:(CDUnknownBlockType)arg2;
+ (long long)volumeTypeForMountPoint:(id)arg1;
+ (id)browsingSessionForTMVolumeMountPoint:(id)arg1 error:(id *)arg2;
+ (id)spotlightIndexLocationForURL:(id)arg1 error:(id *)arg2;
+ (id)dataVolumeUUIDForURL:(id)arg1 error:(id *)arg2;
+ (long long)indexTypeForMountPoint:(id)arg1;
+ (BOOL)volumeTypeSupportsStoringSpotlightIndex:(long long)arg1;
+ (id)migrationSessionForTMVolumeMountPoint:(id)arg1 error:(id *)arg2;
+ (void)setNextVolumeStoreVolumeUUID:(id)arg1;
+ (void)setCurrentROSPDataVolumeMountPoint:(id)arg1;
+ (void)setCurrentROSPDataVolumeUUID:(id)arg1;
+ (id)_synthesizedDirectoryPathForBackupPath:(id)arg1 backupMountPoint:(id)arg2;
+ (id)_originalLocationForBackedUpItem:(id)arg1 error:(id *)arg2;
+ (struct TMBackupPathRanges)_backupPathRangesInPath:(id)arg1;
+ (id)_volumeUUIDForVolumeStoreAtURL:(id)arg1;
+ (BOOL)checkAndSetIsInCurrentSystemDataVolumeForPath:(id)arg1 ranges:(struct TMBackupPathRanges)arg2;
+ (id)_inferBackupRootPathFromBackedUpItemPath:(id)arg1;
+ (id)_inferOriginalPathFromBackedUpItemPath:(id)arg1;
+ (id)_pathInBackupForVolumeRelativePath:(id)arg1 volumeName:(id)arg2 volumeUUID:(id)arg3 pathToBackup:(id)arg4;
+ (id)_mountDestinationForDestinationID:(id)arg1 error:(id *)arg2;
+ (id)_browsingSessionForDestinationID:(id)arg1 error:(id *)arg2;
+ (id)currentDataVolumeMountPoint;
+ (id)currentDataVolumeUUID;
+ (id)currentDataVolume;
+ (id)currentSystemVolume;
+ (void)clearROSPCache;
+ (id)ROSPVolumeStoreInfoCache;
@property(copy) NSArray *backups; // @synthesize backups=_backups;
@property(retain) NSURL *sidecarMountPoint; // @synthesize sidecarMountPoint=_sidecarMountPoint;
@property(retain) id sessionRunLoop; // @synthesize sessionRunLoop=_sessionRunLoop;
@property(retain) id daSession; // @synthesize daSession=_daSession;
@property(readonly, retain) NSURL *dataVolumeMountPoint; // @synthesize dataVolumeMountPoint=_dataVolumeMountPoint;
@property(readonly, retain) NSDictionary *backupDeviceByXID; // @synthesize backupDeviceByXID=_backupDeviceByXID;
@property(readonly, retain) NSArray *backupXIDs; // @synthesize backupXIDs=_backupXIDs;
- (const struct __DADissenter *)_copyUnmountDissenterForDisk:(struct __DADisk *)arg1;
- (id)volumeGroupUUIDForVolumeStoreAtURL:(id)arg1 error:(id *)arg2;
- (long long)ROSPTypeForVolumeStoreAtURL:(id)arg1;
- (id)fileIDsLastSeenInBackup:(id)arg1 error:(id *)arg2;
- (BOOL)deleteBackupForDate:(id)arg1 error:(id *)arg2;
- (id)backupURLForDate:(id)arg1 error:(id *)arg2;
- (id)browsableBackupEnumerator:(id *)arg1;
- (id)completedBackupEnumerator:(id *)arg1;
@property(readonly) NSArray *browsableBackupDates;
- (void)dealloc;
- (BOOL)finishSession:(id *)arg1;
- (id)initWithLiveVolumeMountPoint:(id)arg1;
- (BOOL)_prepareBackupsForTMVolumeMountPoint:(id)arg1 error:(id *)arg2;
- (id)firstPathInBackupsWithFileID:(unsigned long long)arg1 error:(id *)arg2;
@property(readonly) NSURL *spotlightIndexLocation;
- (id)latestVolumeStoreInfoEnumeratorForMachineStoreInfo:(id)arg1 error:(id *)arg2;
- (id)_urlOfLatestBackupForMachineStoreInfo:(id)arg1;
- (id)machineStoreInfoEnumerator:(id *)arg1;
- (id)_synthesizeLegacyBackupDB:(id *)arg1;

@end

