//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "FlexSongProtocol.h"

@class NSArray, NSDictionary, NSImage, NSSet, NSString;

@interface FlexSongBackend : NSObject <FlexSongProtocol>
{
    BOOL _hidden;
    BOOL _recalled;
    NSImage *_cachedArtwork;
    NSString *_uid;
    NSString *_audioEncoderPresetName;
    NSString *_songName;
    NSString *_artistName;
    NSSet *_tagIDs;
    NSSet *_keywords;
    NSArray *_assets;
    NSString *_songFormat;
    long long _sampleRate;
    long long _metadataVersion;
    NSDictionary *_customOptions;
}

@property(retain, nonatomic) NSDictionary *customOptions; // @synthesize customOptions=_customOptions;
@property(nonatomic) long long metadataVersion; // @synthesize metadataVersion=_metadataVersion;
@property(nonatomic) BOOL recalled; // @synthesize recalled=_recalled;
@property(nonatomic) BOOL hidden; // @synthesize hidden=_hidden;
@property(nonatomic) long long sampleRate; // @synthesize sampleRate=_sampleRate;
@property(retain, nonatomic) NSString *songFormat; // @synthesize songFormat=_songFormat;
@property(retain, nonatomic) NSArray *assets; // @synthesize assets=_assets;
@property(retain, nonatomic) NSSet *keywords; // @synthesize keywords=_keywords;
@property(retain, nonatomic) NSSet *tagIDs; // @synthesize tagIDs=_tagIDs;
@property(retain, nonatomic) NSString *artistName; // @synthesize artistName=_artistName;
@property(retain, nonatomic) NSString *songName; // @synthesize songName=_songName;
@property(retain, nonatomic) NSString *audioEncoderPresetName; // @synthesize audioEncoderPresetName=_audioEncoderPresetName;
@property(retain, nonatomic) NSString *uid; // @synthesize uid=_uid;
@property(retain, nonatomic) NSImage *artwork; // @synthesize artwork=_cachedArtwork;
- (void).cxx_destruct;
- (BOOL)_verifyKeyFrames:(id)arg1 failureReason:(id *)arg2;
- (BOOL)_verifyClips:(id)arg1 inRendition:(id)arg2 failureReason:(id *)arg3;
- (BOOL)verifyRendition:(id)arg1 forDuration:(CDStruct_1b6d18a9)arg2 failureReason:(id *)arg3;
- (void)updateSongArtist:(id)arg1 title:(id)arg2 tags:(id)arg3 keywords:(id)arg4 hidden:(BOOL)arg5 recalled:(BOOL)arg6 metadataVersion:(long long)arg7;
- (id)renditionForDuration:(CDStruct_1b6d18a9)arg1 withOptions:(id)arg2 testingContext:(id)arg3;
- (id)timedMetadataItemsWithIdentifier:(id)arg1 forRendition:(id)arg2;
- (CDStruct_1b6d18a9)minimumDuration;
- (id)idealDurations;
- (CDStruct_1b6d18a9)naturalDuration;
- (BOOL)isLoaded;
- (BOOL)canPlay;
- (id)existingAssetWithID:(id)arg1;
- (id)assetWithID:(id)arg1;
- (void)updateAssets:(id)arg1;
- (void)updateSampleRate:(long long)arg1;
- (id)_loadArtworkImage;
- (id)initWithUID:(id)arg1 songName:(id)arg2 artistName:(id)arg3 tagIDs:(id)arg4 keywords:(id)arg5 hidden:(BOOL)arg6 recalled:(BOOL)arg7 audioEncoderPresetName:(id)arg8 metadataVersion:(long long)arg9 songFormat:(id)arg10 sampleRate:(long long)arg11 customOptions:(id)arg12;

@end

