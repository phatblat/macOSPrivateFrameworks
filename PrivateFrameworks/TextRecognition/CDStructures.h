//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct BinarySearchTree<int> {
    CDUnknownFunctionPointerType *_field1;
    struct vector<BinarySearchTree<int>::Node, std::__1::allocator<BinarySearchTree<int>::Node>> _field2;
    unsigned long long _field3;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CHNeuralNetwork {
    struct vector<int, std::__1::allocator<int>> _field1;
    struct vector<std::__1::pair<int, int>, std::__1::allocator<std::__1::pair<int, int>>> _field2;
    struct set<int, std::__1::less<int>, std::__1::allocator<int>> _field3;
    struct set<int, std::__1::less<int>, std::__1::allocator<int>> _field4;
    _Bool _field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    CDStruct_183601bc *_field10;
    int _field11;
    int _field12;
    struct Matrix<short> *_field13;
    short *_field14;
    struct Matrix<short> *_field15;
    short *_field16;
    int *_field17;
};

struct CRCHNetwork {
    CDStruct_183601bc *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field2;
    unsigned long long _field3;
    struct vector<CRCHNetworkNode, std::__1::allocator<CRCHNetworkNode>> _field4;
    struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long>> _field5;
    struct vector<NetworkEdge, std::__1::allocator<NetworkEdge>> _field6;
    struct vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *>> _field7;
    struct CRCHSymbolMap _field8;
    _Bool _field9;
    struct map<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long>>>, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long>>>>>> _field10;
    struct set<CRCHuint128, std::__1::less<CRCHuint128>, std::__1::allocator<CRCHuint128>> _field11;
    unsigned int *_field12;
    unsigned long long _field13;
};

struct CRCHNetworkNode;

struct CRCHSymbolMap {
    CDUnknownFunctionPointerType *_field1;
    struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> _field2;
    struct map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long>>> _field3;
};

struct CRCTCPriorityQueue {
    struct priority_queue<CRCtcCandidate, std::__1::vector<CRCtcCandidate, std::__1::allocator<CRCtcCandidate>>, CRCTCPriorityQueue::QueueComparison> _field1;
    _Bool _field2;
    vector_cdb6db61 _field3;
};

struct CRCtcCandidate {
    int symbol;
    float prob;
};

struct CRTextDetectorQuadFeature;

struct Character;

struct Document {
    CDUnknownFunctionPointerType *_field1;
    struct Mat _field2;
    struct vector<TextDetector::Stroke, std::__1::allocator<TextDetector::Stroke>> _field3[2];
    struct vector<TextDetector::Character, std::__1::allocator<TextDetector::Character>> _field4[2];
    vector_7d154506 _field5;
    struct RectangleTree _field6[2];
    int _field7[3];
    _Bool _field8;
};

struct Interval;

struct IntervalTree<int> {
    CDUnknownFunctionPointerType *_field1;
    struct vector<IntervalTree<int>::Interval, std::__1::allocator<IntervalTree<int>::Interval>> _field2;
    struct vector<IntervalTree<int>::Node, std::__1::allocator<IntervalTree<int>::Node>> _field3;
    unsigned long long _field4;
    struct BinarySearchTree<int> _field5;
    struct vector<unsigned long, std::__1::allocator<unsigned long>> _field6;
};

struct Mat {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6[32];
    int _field7[32];
    struct SmartPtr _field8;
    int _field9;
    int _field10;
    int _field11[32];
    int _field12[32];
    unsigned long long _field13;
};

struct Matrix<short>;

struct NetworkEdge;

struct Node;

struct PyramidNMS<unsigned short, float, unsigned char> {
    CDUnknownFunctionPointerType *_vptr$PyramidNMS;
    struct deque<bool, std::__1::allocator<bool>> fullySpecifiedForests;
    struct deque<std::__1::valarray<bool>, std::__1::allocator<std::__1::valarray<bool>>> masksValid;
    struct deque<std::__1::valarray<bool>, std::__1::allocator<std::__1::valarray<bool>>> masksInvalid;
    struct deque<std::__1::valarray<bool>, std::__1::allocator<std::__1::valarray<bool>>> masksPendingInvalid;
    struct deque<std::__1::valarray<float>, std::__1::allocator<std::__1::valarray<float>>> ipus;
    struct deque<std::__1::valarray<unsigned char>, std::__1::allocator<std::__1::valarray<unsigned char>>> histsWordCoincide;
    struct deque<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>>> idxsWordCoincide;
    struct deque<std::__1::valarray<unsigned char>, std::__1::allocator<std::__1::valarray<unsigned char>>> histsWordContain;
    struct deque<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>>> idxsWordContain;
    struct deque<std::__1::valarray<unsigned char>, std::__1::allocator<std::__1::valarray<unsigned char>>> histsWordConstitute;
    struct deque<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>>> idxsWordConstitute;
    struct deque<std::__1::valarray<unsigned char>, std::__1::allocator<std::__1::valarray<unsigned char>>> histsWordOverlap;
    struct deque<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>>> idxsWordOverlap;
    struct deque<std::__1::valarray<unsigned char>, std::__1::allocator<std::__1::valarray<unsigned char>>> histsLineCoincide;
    struct deque<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>>> idxsLineCoincide;
    struct deque<std::__1::valarray<unsigned char>, std::__1::allocator<std::__1::valarray<unsigned char>>> histsLineContain;
    struct deque<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>>> idxsLineContain;
    struct deque<std::__1::valarray<unsigned char>, std::__1::allocator<std::__1::valarray<unsigned char>>> histsLineConstitute;
    struct deque<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>>> idxsLineConstitute;
    struct deque<std::__1::valarray<unsigned char>, std::__1::allocator<std::__1::valarray<unsigned char>>> histsLineOverlap;
    struct deque<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>>> idxsLineOverlap;
    struct deque<nms::RectForest<unsigned short, float>, std::__1::allocator<nms::RectForest<unsigned short, float>>> *pForests;
    struct PyramidNMSConfig config;
};

struct PyramidNMSConfig {
    CDUnknownFunctionPointerType *_vptr$PyramidNMSConfig;
    unsigned long long method;
    unsigned long long ipuNumSamples;
    double ipuValidMinThreshold;
    double ipuUniformityMinThreshold;
    double ipuNegativeHSpacingToWidthRatioMaxThreshold;
    double ipuNumNegativeHSpacingsMaxThreshold;
    _Bool ipuUseNumChars;
    unsigned long long ipuNumCharsUpperClip;
    _Bool ipuUseWidthUniformity;
    _Bool ipuUseAreaUniformoity;
    _Bool ipuUseHSpacingUniformity;
    _Bool ipuUseCenterHeightUniformity;
    _Bool ipuUseScaleIndex;
    double containmentIPUCompetingScaledMinThreshold;
    unsigned long long containmentNumLowerLevelDatumCompetingMinThreshold;
    double containmentContainingDatumCrossLevelIntersectionMaxThreshold;
    double containmentInvalidSubdatumPercentageMaxThreshold;
    double containmentInvalidDatumContainingIOMinMinThreshold;
    _Bool pendingInvalidRejectCompetingDatums;
    _Bool filterByIPUAndUniformity;
    _Bool processCoincidence;
    _Bool processContainment;
    _Bool processOverlap;
    _Bool useOverlappingWordsInProcessingContainment;
    _Bool processPendingInvalid;
    double lineCoincidenceIOUMinThreshold;
    double lineCoincidenceIOMinMinThreshold;
    double lineContainmentIOUMaxThreshold;
    double lineContainmentIOMinMinThreshold;
    double lineConstitutionIOUMaxThreshold;
    double lineConstitutionIOMinMinThreshold;
    double lineOverlapIOUMinThreshold;
    double lineOverlapIOUMaxThreshold;
    double lineOverlapIOMinMinThreshold;
    double lineOverlapIOMinMaxThreshold;
    double wordCoincidenceIOUMinThreshold;
    double wordCoincidenceIOMinMinThreshold;
    double wordContainmentIOUMaxThreshold;
    double wordContainmentIOMinMinThreshold;
    double wordConstitutionIOUMaxThreshold;
    double wordConstitutionIOMinMinThreshold;
    double wordOverlapIOUMinThreshold;
    double wordOverlapIOUMaxThreshold;
    double wordOverlapIOMinMinThreshold;
    double wordOverlapIOMinMaxThreshold;
};

struct PyramidTokenizer<unsigned short, float> {
    CDUnknownFunctionPointerType *_vptr$PyramidTokenizer;
    struct deque<nms::RectForest<unsigned short, float>, std::__1::allocator<nms::RectForest<unsigned short, float>>> *pForests;
    struct PyramidTokenizerConfig config;
};

struct PyramidTokenizerConfig {
    CDUnknownFunctionPointerType *_vptr$PyramidTokenizerConfig;
    _Bool isRecursive;
    double spacingClipMin;
    double spacingUniformityMinThresholdClipMin;
    double spacingUniformityMinThresholdClipMax;
    double spacingUniformityMinThresholdTrueProbability;
    double spacingRatioMultiplier;
    _Bool useAdpativeSpacingRatioMultiplier;
    unsigned long long adpativeSpacingRatioMultiplierMinNumRects;
    double adaptiveSpacingRatioMultiplierMinVariationThreshold;
    double adaptiveSpacingRatioMultiplierLowerBound;
    unsigned long long singleTokenNumCharsMaxThreshold;
    unsigned long long singleTokenNumCutpointCandidatesMaxThreshold;
};

struct QueueComparison;

struct RectForest<unsigned short, float> {
    CDUnknownFunctionPointerType *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    struct deque<std::__1::valarray<float>, std::__1::allocator<std::__1::valarray<float>>> _field4;
    struct deque<std::__1::deque<std::__1::pair<unsigned short, unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, unsigned short>>>, std::__1::allocator<std::__1::deque<std::__1::pair<unsigned short, unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, unsigned short>>>>> _field5;
    struct deque<std::__1::valarray<nms::DocumentEntityInfo>, std::__1::allocator<std::__1::valarray<nms::DocumentEntityInfo>>> _field6;
};

struct Rect_<int> {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
};

struct RectangleTree {
    struct IntervalTree<int> _field1;
    struct IntervalTree<int> _field2;
    struct vector<int, std::__1::allocator<int>> _field3;
};

struct Segmenter {
    struct vector<std::__1::vector<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>, std::__1::allocator<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>, std::__1::allocator<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>>>>> _field1;
    id _field2;
    id _field3;
    id _field4;
    id _field5;
    id _field6;
    vector_8f06c10f _field7;
    vector_8f06c10f _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    int _field14;
};

struct Size_<unsigned long> {
    CDUnknownFunctionPointerType *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
};

struct SmartPtr {
    CDUnknownFunctionPointerType *_field1;
    void *_field2;
    int *_field3;
};

struct Stroke;

struct Word;

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long _field1;
                    unsigned long long _field2;
                    char *_field3;
                } _field1;
                struct __short {
                    union {
                        unsigned char _field1;
                        char _field2;
                    } _field1;
                    char _field2[23];
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct deque<bool, std::__1::allocator<bool>> {
    struct __split_buffer<bool *, std::__1::allocator<bool *>> {
        _Bool **__first_;
        _Bool **__begin_;
        _Bool **__end_;
        struct __compressed_pair<bool **, std::__1::allocator<bool *>> {
            _Bool **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<bool>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<nms::RectForest<unsigned short, float>, std::__1::allocator<nms::RectForest<unsigned short, float>>> {
    struct __split_buffer<nms::RectForest<unsigned short, float>*, std::__1::allocator<nms::RectForest<unsigned short, float>*>> {
        RectForest_e546815d **__first_;
        RectForest_e546815d **__begin_;
        RectForest_e546815d **__end_;
        struct __compressed_pair<nms::RectForest<unsigned short, float>**, std::__1::allocator<nms::RectForest<unsigned short, float>*>> {
            RectForest_e546815d **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<nms::RectForest<unsigned short, float>>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>>> {
    struct __split_buffer<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>*, std::__1::allocator<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>*>> {
        struct deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>> **__first_;
        struct deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>> **__begin_;
        struct deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>> **__end_;
        struct __compressed_pair<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>**, std::__1::allocator<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>*>> {
            struct deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>> **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>, std::__1::allocator<std::__1::deque<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>, std::__1::allocator<std::__1::deque<unsigned short, std::__1::allocator<unsigned short>>>>>>;

struct deque<std::__1::deque<std::__1::pair<unsigned short, unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, unsigned short>>>, std::__1::allocator<std::__1::deque<std::__1::pair<unsigned short, unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, unsigned short>>>>> {
    struct __split_buffer<std::__1::deque<std::__1::pair<unsigned short, unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, unsigned short>>>*, std::__1::allocator<std::__1::deque<std::__1::pair<unsigned short, unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, unsigned short>>>*>> {
        struct deque<std::__1::pair<unsigned short, unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, unsigned short>>> **_field1;
        struct deque<std::__1::pair<unsigned short, unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, unsigned short>>> **_field2;
        struct deque<std::__1::pair<unsigned short, unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, unsigned short>>> **_field3;
        struct __compressed_pair<std::__1::deque<std::__1::pair<unsigned short, unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, unsigned short>>>**, std::__1::allocator<std::__1::deque<std::__1::pair<unsigned short, unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, unsigned short>>>*>> {
            struct deque<std::__1::pair<unsigned short, unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, unsigned short>>> **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::deque<std::__1::pair<unsigned short, unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, unsigned short>>>>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<std::__1::pair<unsigned short, unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, unsigned short>>>;

struct deque<std::__1::valarray<bool>, std::__1::allocator<std::__1::valarray<bool>>> {
    struct __split_buffer<std::__1::valarray<bool>*, std::__1::allocator<std::__1::valarray<bool>*>> {
        struct valarray<bool> **__first_;
        struct valarray<bool> **__begin_;
        struct valarray<bool> **__end_;
        struct __compressed_pair<std::__1::valarray<bool>**, std::__1::allocator<std::__1::valarray<bool>*>> {
            struct valarray<bool> **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::valarray<bool>>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<std::__1::valarray<float>, std::__1::allocator<std::__1::valarray<float>>> {
    struct __split_buffer<std::__1::valarray<float>*, std::__1::allocator<std::__1::valarray<float>*>> {
        valarray_6968ec29 **__first_;
        valarray_6968ec29 **__begin_;
        valarray_6968ec29 **__end_;
        struct __compressed_pair<std::__1::valarray<float>**, std::__1::allocator<std::__1::valarray<float>*>> {
            valarray_6968ec29 **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::valarray<float>>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<std::__1::valarray<nms::DocumentEntityInfo>, std::__1::allocator<std::__1::valarray<nms::DocumentEntityInfo>>> {
    struct __split_buffer<std::__1::valarray<nms::DocumentEntityInfo>*, std::__1::allocator<std::__1::valarray<nms::DocumentEntityInfo>*>> {
        struct valarray<nms::DocumentEntityInfo> **_field1;
        struct valarray<nms::DocumentEntityInfo> **_field2;
        struct valarray<nms::DocumentEntityInfo> **_field3;
        struct __compressed_pair<std::__1::valarray<nms::DocumentEntityInfo>**, std::__1::allocator<std::__1::valarray<nms::DocumentEntityInfo>*>> {
            struct valarray<nms::DocumentEntityInfo> **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::valarray<nms::DocumentEntityInfo>>> {
        unsigned long long _field1;
    } _field3;
};

struct deque<std::__1::valarray<unsigned char>, std::__1::allocator<std::__1::valarray<unsigned char>>> {
    struct __split_buffer<std::__1::valarray<unsigned char>*, std::__1::allocator<std::__1::valarray<unsigned char>*>> {
        struct valarray<unsigned char> **__first_;
        struct valarray<unsigned char> **__begin_;
        struct valarray<unsigned char> **__end_;
        struct __compressed_pair<std::__1::valarray<unsigned char>**, std::__1::allocator<std::__1::valarray<unsigned char>*>> {
            struct valarray<unsigned char> **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::valarray<unsigned char>>> {
        unsigned long long __value_;
    } __size_;
};

struct deque<unsigned short, std::__1::allocator<unsigned short>> {
    struct __split_buffer<unsigned short *, std::__1::allocator<unsigned short *>> {
        unsigned short **_field1;
        unsigned short **_field2;
        unsigned short **_field3;
        struct __compressed_pair<unsigned short **, std::__1::allocator<unsigned short *>> {
            unsigned short **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<unsigned short>> {
        unsigned long long _field1;
    } _field3;
};

struct map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned int, int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>> {
    struct __tree<std::__1::__value_type<unsigned int, int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, int>, std::__1::less<unsigned int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned int, unsigned long, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long>>> {
    struct __tree<std::__1::__value_type<unsigned int, unsigned long>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned long>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned long>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned long>, std::__1::less<unsigned int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long>>>, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long>>>>>> {
    struct __tree<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long>>>>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long>>>>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long>>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long>>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long>>>>, std::__1::less<unsigned long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct pair<int, int>;

struct priority_queue<CRCtcCandidate, std::__1::vector<CRCtcCandidate, std::__1::allocator<CRCtcCandidate>>, CRCTCPriorityQueue::QueueComparison> {
    vector_cdb6db61 _field1;
    struct QueueComparison _field2;
};

struct set<CRCHuint128, std::__1::less<CRCHuint128>, std::__1::allocator<CRCHuint128>> {
    struct __tree<CRCHuint128, std::__1::less<CRCHuint128>, std::__1::allocator<CRCHuint128>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<CRCHuint128, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<CRCHuint128>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<int, std::__1::less<int>, std::__1::allocator<int>> {
    struct __tree<int, std::__1::less<int>, std::__1::allocator<int>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<int, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<int>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long>> {
    struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<unsigned long>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct slice_array<float> {
    float *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
};

struct vImage_Buffer {
    void *data;
    unsigned long long height;
    unsigned long long width;
    unsigned long long rowBytes;
};

struct valarray<bool>;

struct valarray<float> {
    float *_field1;
    float *_field2;
};

struct valarray<nms::DocumentEntityInfo>;

struct valarray<unsigned char>;

struct vector<BinarySearchTree<int>::Node, std::__1::allocator<BinarySearchTree<int>::Node>> {
    struct Node *_field1;
    struct Node *_field2;
    struct __compressed_pair<BinarySearchTree<int>::Node *, std::__1::allocator<BinarySearchTree<int>::Node>> {
        struct Node *_field1;
    } _field3;
};

struct vector<BreakPoint, std::__1::allocator<BreakPoint>>;

struct vector<CGPoint, std::__1::allocator<CGPoint>> {
    struct CGPoint *_field1;
    struct CGPoint *_field2;
    struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint>> {
        struct CGPoint *_field1;
    } _field3;
};

struct vector<CRCHNetworkNode, std::__1::allocator<CRCHNetworkNode>> {
    struct CRCHNetworkNode *_field1;
    struct CRCHNetworkNode *_field2;
    struct __compressed_pair<CRCHNetworkNode *, std::__1::allocator<CRCHNetworkNode>> {
        struct CRCHNetworkNode *_field1;
    } _field3;
};

struct vector<CRCtcCandidate, std::__1::allocator<CRCtcCandidate>> {
    struct CRCtcCandidate *_field1;
    struct CRCtcCandidate *_field2;
    struct __compressed_pair<CRCtcCandidate *, std::__1::allocator<CRCtcCandidate>> {
        struct CRCtcCandidate *_field1;
    } _field3;
};

struct vector<CRTextDetectorPostProcess::CRTextDetectorQuadFeature, std::__1::allocator<CRTextDetectorPostProcess::CRTextDetectorQuadFeature>> {
    struct CRTextDetectorQuadFeature *_field1;
    struct CRTextDetectorQuadFeature *_field2;
    struct __compressed_pair<CRTextDetectorPostProcess::CRTextDetectorQuadFeature *, std::__1::allocator<CRTextDetectorPostProcess::CRTextDetectorQuadFeature>> {
        struct CRTextDetectorQuadFeature *_field1;
    } _field3;
};

struct vector<IntervalTree<int>::Interval, std::__1::allocator<IntervalTree<int>::Interval>> {
    struct Interval *_field1;
    struct Interval *_field2;
    struct __compressed_pair<IntervalTree<int>::Interval *, std::__1::allocator<IntervalTree<int>::Interval>> {
        struct Interval *_field1;
    } _field3;
};

struct vector<IntervalTree<int>::Node, std::__1::allocator<IntervalTree<int>::Node>> {
    struct Node *_field1;
    struct Node *_field2;
    struct __compressed_pair<IntervalTree<int>::Node *, std::__1::allocator<IntervalTree<int>::Node>> {
        struct Node *_field1;
    } _field3;
};

struct vector<NetworkEdge, std::__1::allocator<NetworkEdge>> {
    struct NetworkEdge *_field1;
    struct NetworkEdge *_field2;
    struct __compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge>> {
        struct NetworkEdge *_field1;
    } _field3;
};

struct vector<TextDetector::Character, std::__1::allocator<TextDetector::Character>> {
    struct Character *_field1;
    struct Character *_field2;
    struct __compressed_pair<TextDetector::Character *, std::__1::allocator<TextDetector::Character>> {
        struct Character *_field1;
    } _field3;
};

struct vector<TextDetector::Stroke, std::__1::allocator<TextDetector::Stroke>> {
    struct Stroke *_field1;
    struct Stroke *_field2;
    struct __compressed_pair<TextDetector::Stroke *, std::__1::allocator<TextDetector::Stroke>> {
        struct Stroke *_field1;
    } _field3;
};

struct vector<TextDetector::Word, std::__1::allocator<TextDetector::Word>> {
    struct Word *_field1;
    struct Word *_field2;
    struct __compressed_pair<TextDetector::Word *, std::__1::allocator<TextDetector::Word>> {
        struct Word *_field1;
    } _field3;
};

struct vector<_NSRange, std::__1::allocator<_NSRange>> {
    struct _NSRange *__begin_;
    struct _NSRange *__end_;
    struct __compressed_pair<_NSRange *, std::__1::allocator<_NSRange>> {
        struct _NSRange *__value_;
    } __end_cap_;
};

struct vector<bool, std::__1::allocator<bool>> {
    unsigned long long *_field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<unsigned long>> {
        unsigned long long _field1;
    } _field3;
};

struct vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *>> {
    struct NetworkEdge **_field1;
    struct NetworkEdge **_field2;
    struct __compressed_pair<const NetworkEdge **, std::__1::allocator<const NetworkEdge *>> {
        struct NetworkEdge **_field1;
    } _field3;
};

struct vector<double, std::__1::allocator<double>> {
    double *_field1;
    double *_field2;
    struct __compressed_pair<double *, std::__1::allocator<double>> {
        double *_field1;
    } _field3;
};

struct vector<float, std::__1::allocator<float>> {
    float *_field1;
    float *_field2;
    struct __compressed_pair<float *, std::__1::allocator<float>> {
        float *_field1;
    } _field3;
};

struct vector<int, std::__1::allocator<int>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<int *, std::__1::allocator<int>> {
        int *_field1;
    } _field3;
};

struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_field2;
    struct __compressed_pair<std::__1::basic_string<char>*, std::__1::allocator<std::__1::basic_string<char>>> {
        struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_field1;
    } _field3;
};

struct vector<std::__1::pair<int, int>, std::__1::allocator<std::__1::pair<int, int>>> {
    struct pair<int, int> *_field1;
    struct pair<int, int> *_field2;
    struct __compressed_pair<std::__1::pair<int, int>*, std::__1::allocator<std::__1::pair<int, int>>> {
        struct pair<int, int> *_field1;
    } _field3;
};

struct vector<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>, std::__1::allocator<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>>> {
    struct vector<BreakPoint, std::__1::allocator<BreakPoint>> *_field1;
    struct vector<BreakPoint, std::__1::allocator<BreakPoint>> *_field2;
    struct __compressed_pair<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>*, std::__1::allocator<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>>> {
        struct vector<BreakPoint, std::__1::allocator<BreakPoint>> *_field1;
    } _field3;
};

struct vector<std::__1::vector<float, std::__1::allocator<float>>, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>>;

struct vector<std::__1::vector<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>, std::__1::allocator<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>, std::__1::allocator<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>>>>> {
    vector_e5f6796a *_field1;
    vector_e5f6796a *_field2;
    struct __compressed_pair<std::__1::vector<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>, std::__1::allocator<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>>>*, std::__1::allocator<std::__1::vector<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>, std::__1::allocator<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>>>>> {
        vector_e5f6796a *_field1;
    } _field3;
};

struct vector<std::__1::vector<std::__1::vector<float, std::__1::allocator<float>>, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<float, std::__1::allocator<float>>, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>>>> {
    struct vector<std::__1::vector<float, std::__1::allocator<float>>, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>> *_field1;
    struct vector<std::__1::vector<float, std::__1::allocator<float>>, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>> *_field2;
    struct __compressed_pair<std::__1::vector<std::__1::vector<float, std::__1::allocator<float>>, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>>*, std::__1::allocator<std::__1::vector<std::__1::vector<float, std::__1::allocator<float>>, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>>>> {
        struct vector<std::__1::vector<float, std::__1::allocator<float>>, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>> *_field1;
    } _field3;
};

struct vector<unsigned int, std::__1::allocator<unsigned int>> {
    unsigned int *__begin_;
    unsigned int *__end_;
    struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
        unsigned int *__value_;
    } __end_cap_;
};

struct vector<unsigned long, std::__1::allocator<unsigned long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long>> {
        unsigned long long *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

typedef struct CDStruct_183601bc;

// Template types
typedef struct RectForest<unsigned short, float> {
    CDUnknownFunctionPointerType *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    struct deque<std::__1::valarray<float>, std::__1::allocator<std::__1::valarray<float>>> _field4;
    struct deque<std::__1::deque<std::__1::pair<unsigned short, unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, unsigned short>>>, std::__1::allocator<std::__1::deque<std::__1::pair<unsigned short, unsigned short>, std::__1::allocator<std::__1::pair<unsigned short, unsigned short>>>>> _field5;
    struct deque<std::__1::valarray<nms::DocumentEntityInfo>, std::__1::allocator<std::__1::valarray<nms::DocumentEntityInfo>>> _field6;
} RectForest_e546815d;

typedef struct Rect_<int> {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
} Rect__0538c5d4;

typedef struct Size_<unsigned long> {
    CDUnknownFunctionPointerType *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
} Size__ffdea654;

typedef struct deque<unsigned short, std::__1::allocator<unsigned short>> {
    struct __split_buffer<unsigned short *, std::__1::allocator<unsigned short *>> {
        unsigned short **_field1;
        unsigned short **_field2;
        unsigned short **_field3;
        struct __compressed_pair<unsigned short **, std::__1::allocator<unsigned short *>> {
            unsigned short **_field1;
        } _field4;
    } _field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<unsigned short>> {
        unsigned long long _field1;
    } _field3;
} deque_534810ca;

typedef struct map<unsigned int, int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int>>> {
    struct __tree<std::__1::__value_type<unsigned int, int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, int>, std::__1::less<unsigned int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
} map_fc1db4e5;

typedef struct map<unsigned int, unsigned long, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long>>> {
    struct __tree<std::__1::__value_type<unsigned int, unsigned long>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned long>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned long>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned long>, std::__1::less<unsigned int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
} map_0512c6b1;

typedef struct slice_array<float> {
    float *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
} slice_array_409c861c;

typedef struct valarray<float> {
    float *_field1;
    float *_field2;
} valarray_6968ec29;

typedef struct vector<CGPoint, std::__1::allocator<CGPoint>> {
    struct CGPoint *_field1;
    struct CGPoint *_field2;
    struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint>> {
        struct CGPoint *_field1;
    } _field3;
} vector_e1abc270;

typedef struct vector<CRCtcCandidate, std::__1::allocator<CRCtcCandidate>> {
    struct CRCtcCandidate *_field1;
    struct CRCtcCandidate *_field2;
    struct __compressed_pair<CRCtcCandidate *, std::__1::allocator<CRCtcCandidate>> {
        struct CRCtcCandidate *_field1;
    } _field3;
} vector_cdb6db61;

typedef struct vector<CRTextDetectorPostProcess::CRTextDetectorQuadFeature, std::__1::allocator<CRTextDetectorPostProcess::CRTextDetectorQuadFeature>> {
    struct CRTextDetectorQuadFeature *_field1;
    struct CRTextDetectorQuadFeature *_field2;
    struct __compressed_pair<CRTextDetectorPostProcess::CRTextDetectorQuadFeature *, std::__1::allocator<CRTextDetectorPostProcess::CRTextDetectorQuadFeature>> {
        struct CRTextDetectorQuadFeature *_field1;
    } _field3;
} vector_5c537674;

typedef struct vector<TextDetector::Word, std::__1::allocator<TextDetector::Word>> {
    struct Word *_field1;
    struct Word *_field2;
    struct __compressed_pair<TextDetector::Word *, std::__1::allocator<TextDetector::Word>> {
        struct Word *_field1;
    } _field3;
} vector_7d154506;

typedef struct vector<bool, std::__1::allocator<bool>> {
    unsigned long long *_field1;
    unsigned long long _field2;
    struct __compressed_pair<unsigned long, std::__1::allocator<unsigned long>> {
        unsigned long long _field1;
    } _field3;
} vector_a7cf9eda;

typedef struct vector<double, std::__1::allocator<double>> {
    double *_field1;
    double *_field2;
    struct __compressed_pair<double *, std::__1::allocator<double>> {
        double *_field1;
    } _field3;
} vector_8f06c10f;

typedef struct vector<float, std::__1::allocator<float>> {
    float *_field1;
    float *_field2;
    struct __compressed_pair<float *, std::__1::allocator<float>> {
        float *_field1;
    } _field3;
} vector_f9ed6fc8;

typedef struct vector<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>, std::__1::allocator<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>>> {
    struct vector<BreakPoint, std::__1::allocator<BreakPoint>> *_field1;
    struct vector<BreakPoint, std::__1::allocator<BreakPoint>> *_field2;
    struct __compressed_pair<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>*, std::__1::allocator<std::__1::vector<BreakPoint, std::__1::allocator<BreakPoint>>>> {
        struct vector<BreakPoint, std::__1::allocator<BreakPoint>> *_field1;
    } _field3;
} vector_e5f6796a;

typedef struct vector<std::__1::vector<std::__1::vector<float, std::__1::allocator<float>>, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<float, std::__1::allocator<float>>, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>>>> {
    struct vector<std::__1::vector<float, std::__1::allocator<float>>, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>> *_field1;
    struct vector<std::__1::vector<float, std::__1::allocator<float>>, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>> *_field2;
    struct __compressed_pair<std::__1::vector<std::__1::vector<float, std::__1::allocator<float>>, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>>*, std::__1::allocator<std::__1::vector<std::__1::vector<float, std::__1::allocator<float>>, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>>>> {
        struct vector<std::__1::vector<float, std::__1::allocator<float>>, std::__1::allocator<std::__1::vector<float, std::__1::allocator<float>>>> *_field1;
    } _field3;
} vector_00ef371e;

