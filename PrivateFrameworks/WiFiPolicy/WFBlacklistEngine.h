//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class NSMutableArray;

@interface WFBlacklistEngine : NSObject
{
    unsigned long long _profile;
    NSMutableArray *_blacklist;
    BOOL _enabled;
    id <WFBlacklistDelegate> _blacklistDelegate;
    NSMutableArray *_ssidThresholds;
    NSMutableArray *_bssidThresholds;
    double _wowBlacklistExpiry;
    double _autojoinBlacklistExpiry;
}

+ (id)stringRepresentationWithState:(unsigned long long)arg1;
+ (id)stringRepresentationWithReason:(unsigned long long)arg1;
@property double autojoinBlacklistExpiry; // @synthesize autojoinBlacklistExpiry=_autojoinBlacklistExpiry;
@property double wowBlacklistExpiry; // @synthesize wowBlacklistExpiry=_wowBlacklistExpiry;
@property(retain) NSMutableArray *bssidThresholds; // @synthesize bssidThresholds=_bssidThresholds;
@property(retain) NSMutableArray *ssidThresholds; // @synthesize ssidThresholds=_ssidThresholds;
@property(nonatomic) id <WFBlacklistDelegate> blacklistDelegate; // @synthesize blacklistDelegate=_blacklistDelegate;
- (void).cxx_destruct;
- (id)getNodeFromBlacklist:(id)arg1;
- (id)getBlacklist;
- (void)_printBlacklist;
- (unsigned long long)getBlacklistedNetworkCount;
- (id)retrieveBlacklistedNetworkSsids:(unsigned long long)arg1;
- (BOOL)isNetworkBlacklistedForAutoJoinDueToTrigDisc:(id)arg1 rssi:(long long *)arg2 timestamp:(double *)arg3;
- (long long)getRssiWhenNetworkWasBlacklisted:(id)arg1;
- (BOOL)isNetworkInBlacklistedState:(id)arg1 state:(unsigned long long)arg2;
- (id)retrieveReasonsForNetworkInBlacklistedState:(id)arg1 state:(unsigned long long)arg2 timestamps:(id)arg3 reasonData:(id)arg4;
- (id)retrieveBlacklistedStateHistoryForNetwork:(id)arg1 state:(unsigned long long)arg2 timestamps:(id)arg3 reasonData:(id)arg4;
- (id)retrieveNetworksInBlacklistedStateHistory:(unsigned long long)arg1;
- (id)retrieveNetworksInBlacklistedState:(unsigned long long)arg1;
- (id)_findBlacklistNode:(id)arg1;
- (BOOL)_meetsThresholds:(unsigned long long)arg1 count:(unsigned int)arg2 perSsid:(BOOL)arg3 bssid:(id)arg4 ssid:(id)arg5;
@property BOOL enabled; // @synthesize enabled=_enabled;
- (BOOL)_evaluateTriggersForUnblacklisting:(id)arg1 unblacklistReason:(unsigned long long)arg2 ssid:(id)arg3;
- (void)clearTriggerForNetworkWithUnblacklistReason:(id)arg1 reason:(unsigned long long)arg2;
- (void)removeBlacklistedStates;
- (void)removeExpiredBlacklistedState:(unsigned long long)arg1;
- (void)removeBlacklistedStateWithUnblacklistType:(unsigned long long)arg1;
- (BOOL)removeBlacklistedStateForNetworkWithReason:(id)arg1 state:(unsigned long long)arg2 reason:(unsigned long long)arg3;
- (BOOL)_ignoreTriggersForDeviceProfile:(unsigned long long)arg1 node:(id)arg2;
- (BOOL)_evaluateTriggersForBlacklisting:(id)arg1 reason:(unsigned long long)arg2 reasonData:(long long)arg3 bssid:(id)arg4 ssid:(id)arg5 state:(unsigned long long)arg6;
- (void)setTriggerForNetworkWithReason:(id)arg1 reason:(unsigned long long)arg2 reasonData:(long long)arg3 bssid:(id)arg4;
- (void)setTriggerForNetworkWithReasonAndState:(id)arg1 reason:(unsigned long long)arg2 reasonData:(long long)arg3 bssid:(id)arg4 state:(unsigned long long)arg5;
- (void)_setBlacklistedState:(id)arg1 state:(unsigned long long)arg2 reason:(unsigned long long)arg3 reasonData:(long long)arg4;
- (BOOL)changeBlacklistingThresholds:(unsigned long long)arg1 value:(unsigned int)arg2 perSsid:(BOOL)arg3;
- (void)configureBlacklistedStateExpiryIntervalInSec:(double)arg1 state:(unsigned long long)arg2;
- (void)dealloc;
- (void)setDefaultBlacklistThresholds;
- (id)initWithBlacklistDelegate:(id)arg1 profile:(unsigned long long)arg2;

@end

