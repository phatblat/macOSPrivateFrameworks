//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "GKSessionDelegate.h"

@class GKGame, GKPlayer, GKTurnBasedMatchInternal, GKTurnBasedParticipant, NSArray, NSData, NSDate, NSString;

@interface GKTurnBasedMatch : NSObject <GKSessionDelegate>
{
    unsigned int _state;
    GKTurnBasedMatchInternal *_internal;
    NSArray *_participants;
    NSArray *_exchanges;
}

+ (void)loadTurnBasedMatchWithDetailsForMatchID:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (id)keyPathsForValuesAffectingStatus;
+ (id)_localizableMessageWithKey:(id)arg1 arguments:(id)arg2 defaultMessage:(id)arg3;
+ (BOOL)instancesRespondToSelector:(SEL)arg1;
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (void)loadMatchWithID:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (void)loadTurnBasedMatchDetailsForMatchIDs:(id)arg1 loadGameData:(BOOL)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;
+ (void)loadTurnBasedMatchSummariesIncludingCompatibleBundleID:(BOOL)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (void)loadTurnBasedMatchSummaries:(CDUnknownBlockType)arg1;
+ (void)loadMatchesIncludingCompatibleBundleID:(BOOL)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (void)loadMatchesWithCompletionHandler:(CDUnknownBlockType)arg1;
+ (void)findMatchForRequest:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
+ (id)matchesWithInternalRepresentations:(id)arg1;
+ (void)getTurnBasedBadgeCountWithHandler:(CDUnknownBlockType)arg1;
@property(readonly, retain) NSArray *exchanges; // @synthesize exchanges=_exchanges;
@property(readonly, retain) NSArray *participants; // @synthesize participants=_participants;
- (void)sendReminderToParticipants:(id)arg1 localizableMessageKey:(id)arg2 arguments:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)sendExchangeToParticipants:(id)arg1 data:(id)arg2 localizableMessageKey:(id)arg3 arguments:(id)arg4 timeout:(double)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (void)saveMergedMatchData:(id)arg1 withResolvedExchanges:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)exchangeForID:(id)arg1;
- (void)saveCurrentTurnWithMatchData:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)endMatchInTurnWithMatchData:(id)arg1 scores:(id)arg2 achievements:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)endMatchInTurnWithMatchData:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)participantQuitOutOfTurnWithOutcome:(long long)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (void)participantQuitInTurnWithOutcome:(long long)arg1 nextParticipants:(id)arg2 turnTimeout:(double)arg3 matchData:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)participantQuitInTurnWithOutcome:(long long)arg1 nextParticipant:(id)arg2 matchData:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)endTurnWithNextParticipants:(id)arg1 turnTimeout:(double)arg2 matchData:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (id)indexesForParticipants:(id)arg1;
- (void)endTurnWithNextParticipant:(id)arg1 matchData:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)reserveShareParticipantSlots:(long long)arg1 minPlayerCount:(long long)arg2 maxPlayerCount:(long long)arg3 andInvitePlayers:(id)arg4 withMessage:(id)arg5 handler:(CDUnknownBlockType)arg6;
- (void)loadURLWithMatchRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)loadMatchDataWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)removeWithCompletionHandler:(CDUnknownBlockType)arg1;
@property(readonly, retain) NSArray *completedExchanges;
@property(readonly, retain) NSArray *activeExchanges;
@property(readonly) GKTurnBasedParticipant *firstWinnerOrTiedOrLastLoser;
@property(readonly, nonatomic) GKPlayer *showcasePlayer;
@property(readonly) GKTurnBasedParticipant *localPlayerParticipant;
@property(readonly) GKTurnBasedParticipant *playingWithParticipantOrFirstKnownPlayer;
@property(readonly) GKTurnBasedParticipant *previousParticipantOrFirstKnownPlayer;
@property(readonly) GKTurnBasedParticipant *previousParticipant;
@property(retain) GKTurnBasedParticipant *currentParticipant;
- (void)declineInviteWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)acceptInviteWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)rematchWithCompletionHandler:(CDUnknownBlockType)arg1;
@property(readonly) NSDate *dateSortKey;
- (long long)compare:(id)arg1;
@property(readonly) long long status; // @dynamic status;
@property(readonly, copy) NSString *description;
@property(readonly) GKPlayer *currentPlayer; // @dynamic currentPlayer;
- (void)dealloc;
@property(nonatomic) unsigned int state; // @synthesize state=_state;
- (void)setLocalizableMessageWithKey:(id)arg1 arguments:(id)arg2;
@property(copy) NSString *message;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (id)valueForUndefinedKey:(id)arg1;
- (BOOL)respondsToSelector:(SEL)arg1;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)forwardingTargetForSelector:(SEL)arg1;
@property(readonly, nonatomic) GKGame *game; // @dynamic game;
@property(readonly, nonatomic) BOOL localPlayerHasRecentTurn;
@property(readonly, nonatomic) BOOL isMyTurn; // @dynamic isMyTurn;
- (id)_exchangesForInternalRepresentation:(id)arg1 participants:(id)arg2;
- (id)_participantsForInternalRepresentation:(id)arg1;
- (void)_updateWithInternal:(id)arg1;
@property(retain) GKTurnBasedMatchInternal *internal; // @synthesize internal=_internal;
- (BOOL)isEqual:(id)arg1;
@property(readonly) unsigned long long hash;
- (id)init;
- (id)initWithInternalRepresentation:(id)arg1;
@property(readonly) unsigned long long exchangeMaxInitiatedExchangesPerPlayer; // @dynamic exchangeMaxInitiatedExchangesPerPlayer;
@property(readonly) unsigned long long exchangeDataMaximumSize; // @dynamic exchangeDataMaximumSize;
@property unsigned long long matchDataMaximumSize; // @dynamic matchDataMaximumSize;

// Remaining properties
@property(retain) NSString *bundleID; // @dynamic bundleID;
@property(retain) NSString *bundleVersion; // @dynamic bundleVersion;
@property(readonly, retain) NSDate *creationDate; // @dynamic creationDate;
@property(readonly, copy) NSString *debugDescription;
@property(copy) NSDate *lastTurnDate; // @dynamic lastTurnDate;
@property(readonly, retain) NSData *matchData; // @dynamic matchData;
@property(readonly, retain) NSString *matchID; // @dynamic matchID;
@property(readonly) long long platform; // @dynamic platform;
@property(retain) NSString *shortBundleVersion; // @dynamic shortBundleVersion;
@property(readonly) Class superclass;
@property(readonly) long long turnNumber; // @dynamic turnNumber;

@end

