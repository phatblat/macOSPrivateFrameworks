//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <VideoConference/VideoConferenceController.h>

@interface VideoConferenceMultiController : VideoConferenceController
{
}

+ (id)makeIPAndPortDataFromIP:(id)arg1 port:(unsigned short)arg2;
- (id)IPAndPortDataWithCallerIP:(id)arg1 callerSIPPort:(unsigned int)arg2 shouldFindExternalIP:(BOOL)arg3;
- (id)IPAndPortDataWithCallerIP:(id)arg1 callerSIPPort:(unsigned int)arg2;
- (id)externalIPAddress;
- (unsigned int)externalSIPPort;
- (unsigned int)localSIPPort;
- (BOOL)getRemoteVideoTextureBuffer:(CDStruct_79ad071c *)arg1 forUser:(id)arg2 freezeFlag:(BOOL)arg3;
- (BOOL)getRemoteVideoTextureBuffer:(CDStruct_79ad071c *)arg1 forUser:(id)arg2;
- (BOOL)unlockVideoBufferForUser:(id)arg1 lockID:(int)arg2;
- (BOOL)lockVideoBufferForUser:(id)arg1 lockID:(int *)arg2;
- (BOOL)unlockVideoBufferForUser:(id)arg1;
- (BOOL)lockVideoBufferForUser:(id)arg1;
- (BOOL)isRemoteVideoChangedForUser:(id)arg1;
- (BOOL)isLocalVideoChanged;
- (BOOL)getLocalVideoTextureBuffer:(CDStruct_79ad071c *)arg1;
- (id)audioLevelForUserID:(id)arg1;
- (double)conferenceUptime;
- (id)statistics:(int)arg1;
- (id)statistics;
- (BOOL)startConferenceWithIndex:(int)arg1 userAtIndexIsCaller:(BOOL)arg2 userIDAtIndex:(id)arg3;
- (int)DoVCIncomingConference:(void *)arg1;
- (BOOL)startConferenceWithUserID:(id)arg1;
- (BOOL)isFocus;
- (unsigned long long)vcCapabilitiesOfRouter;
- (unsigned long long)vcCapabilitiesOfNetwork;
- (unsigned long long)vcCapabilitiesOfCPU;
- (unsigned long long)vcCapabilities;
- (void)setReflectorIconForUserID:(id)arg1 icon:(struct __CFData *)arg2;
- (int)reflectorChannelForUserID:(id)arg1;
- (BOOL)stopReflector;
- (BOOL)startReflector;
- (int)endConferenceForUserID:(id)arg1;
- (int)endConference;
- (int)initiateConferenceToUser:(id)arg1 withIPAndPortData:(id)arg2 oneWayOnly:(BOOL)arg3 shouldFindExternalIP:(BOOL)arg4;
- (int)initiateConferenceToUser:(id)arg1 withIPAndPortData:(id)arg2 oneWayOnly:(BOOL)arg3;
- (int)initiateConferenceToUser:(id)arg1 withIPAndPortData:(id)arg2 oneWayOnly:(BOOL)arg3 withValidatedCert:(struct __SecCertificate *)arg4 shouldFindExternalIP:(BOOL)arg5;
- (int)initiateConferenceToUser:(id)arg1 withIPAndPortData:(id)arg2 oneWayOnly:(BOOL)arg3 withValidatedCert:(struct __SecCertificate *)arg4;
- (id)IPAndPortDataWithCallerIPAndPortData:(id)arg1 shouldFindExternalIP:(BOOL)arg2;
- (id)IPAndPortDataWithCallerIPAndPortData:(id)arg1;
- (struct __SecCertificate *)getRemoteCertificateForUser:(id)arg1;
- (BOOL)isSecurityValid;
- (BOOL)isSecurityEnabled;
- (BOOL)isSecurityValidForUser:(id)arg1;
- (BOOL)isSecurityEnabledForUser:(id)arg1;
- (struct __SecIdentity *)getValidatedIdentity;
- (void)setValidatedIdentity:(struct __SecIdentity *)arg1;
- (void)dealloc;
- (id)initWithRectTexture:(int)arg1;
- (id)init;
- (void)launchHangupThread:(int)arg1;
- (void)hangupThreadProc:(id)arg1;
- (struct __SecIdentity *)localSecIdentityRef;
- (int)doPeerToPeerBandwidthDetectionForIndex:(int)arg1 pUpstreamKbits:(int *)arg2 pDownstreamKbits:(int *)arg3 withSNATMAPIP:(unsigned long long)arg4 withCallID:(int)arg5 withUserID:(id)arg6;
- (void)printCapabilities:(unsigned long long)arg1;
- (void)setAudioHalfRate:(BOOL)arg1 forConfIndex:(int)arg2;
- (void)handleCleanupForUser:(id)arg1 withCallID:(int)arg2 endTransmit:(BOOL)arg3 andSendSIPHangup:(BOOL)arg4;
- (void)determineFocusCapabilityOfNetwork:(struct _VCFocusCapability *)arg1;
- (void)determineFocusCapabilityOfCPU:(struct _VCFocusCapability *)arg1;
- (void)determineFocusCapability:(struct _VCFocusCapability *)arg1 isVideoHardwareCapable:(char *)arg2;
- (void)updateFocusCapabilityForBandwidth:(struct _VCFocusCapability *)arg1 upstreamKbits:(int)arg2 downstreamKbits:(int)arg3;
- (void)updateFocusTransmitParameters:(int)arg1;
- (void)determineFocusCapabilityProc:(id)arg1;
- (void)VCChannelExtraPreparationProc:(id)arg1;
- (void)cacheConnectionData:(id)arg1 andCallID:(int)arg2;
- (void)initiateConferenceToUserWithVCConnectionDataProc:(id)arg1;
- (int)initiateConferenceCallUsingConnectionDataWithErrorInfoToUser:(id)arg1 withRemoteVCConnectionData:(id)arg2 withLocalVCConnectionData:(id)arg3 oneWayOnly:(BOOL)arg4 errorInfo:(id *)arg5 shouldFindExternalIP:(BOOL)arg6;
- (struct tagHANDLE *)extractVCChannelHandleFromVCConnectionData:(id)arg1;
- (BOOL)hasVCChannelExtraInVCConnectionData:(id)arg1;
- (id)extractConnectionHelperInfoFromVCConnectionData:(id)arg1;
- (id)extractRelayIDFromVCConnectionData:(id)arg1;
- (id)extractVCChannelExtraFromVCConnectionData:(id)arg1;
- (id)extractBandwidthInfoFromVCConnectionData:(id)arg1;
- (id)extractVersionFromVCConnectionData:(id)arg1;
- (id)extractIPAndPortDataFromVCConnectionData:(id)arg1;
- (id)extractConnectionDataFromVCConnectionData:(id)arg1;
- (id)extractObjectFromVCConnectionData:(id)arg1 byKey:(id)arg2;
- (id)IPAndPortDataForConnectionData:(id)arg1;
- (id)generateVCConnectionDataWithVersion:(int)arg1 SIPICEData:(id)arg2 bandwidthDictionary:(id)arg3 connectionHelper:(id)arg4 VCChannelExtraObj:(id)arg5 relayInfo:(id)arg6;
- (id)SIPICEDataForCallID:(int)arg1 shouldFindExternalIP:(BOOL)arg2 relayInfo:(id)arg3;
- (id)VCChannelExtraDictionary:(id)arg1 withHandle:(struct tagHANDLE *)arg2;
- (id)bandwidthDictionary;
- (id)connectionDataForIPAndPortData:(id)arg1;
- (int)callIDForVCConnectionData:(id)arg1;
- (id)extraChannelsForVCConnectionData:(id)arg1;
- (int)initiateConferenceToUser:(id)arg1 withRemoteVCConnectionData:(id)arg2 withLocalVCConnectionData:(id)arg3 conferenceSettings:(id)arg4 shouldFindExternalIP:(BOOL)arg5;
- (int)initiateConferenceToUser:(id)arg1 withRemoteVCConnectionData:(id)arg2 withLocalVCConnectionData:(id)arg3 conferenceSettings:(id)arg4;
- (void)cancelPreparingConnection:(id)arg1;
- (void)prepareConnectionWithRemoteConnectionData:(id)arg1 localConnectionData:(id)arg2;
- (id)VCConnectionDataWithAttributes:(id)arg1;
- (id)VCConnectionData:(BOOL)arg1;
- (id)VCConnectionData;
- (id)VCConnectionDataWithExtraChannels:(id)arg1;
- (id)VCConnectionDataWithExtraChannels:(id)arg1 shouldFindExternalIP:(BOOL)arg2;
- (id)localIPs;
- (void)registerForNetworkChanges;
- (void)closeNetworkMonitor;
- (void)openNetworkMonitor;

@end

