//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CGAffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct FrameTimeNormalizer {
    CDUnknownFunctionPointerType *_field1;
    vector_0821a7d5 _field2;
    vector_0821a7d5 _field3;
    unsigned int _field4;
    CDStruct_1b6d18a9 _field5;
    CDStruct_1b6d18a9 _field6;
};

struct MetadataFloatVector {
    float _field1;
    float _field2;
};

struct VTDecompressionOutputCallbackRecord {
    CDUnknownFunctionPointerType decompressionOutputCallback;
    void *decompressionOutputRefCon;
};

struct vector<CMTime, std::__1::allocator<CMTime>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<CMTime *, std::__1::allocator<CMTime>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

struct vector<FloatPoint, std::__1::allocator<FloatPoint>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<FloatPoint *, std::__1::allocator<FloatPoint>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

struct vector<SP_FrameInfo, std::__1::allocator<SP_FrameInfo>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<SP_FrameInfo *, std::__1::allocator<SP_FrameInfo>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

struct vector<float, std::__1::allocator<float>> {
    float *_field1;
    float *_field2;
    struct __compressed_pair<float *, std::__1::allocator<float>> {
        float *_field1;
    } _field3;
};

#pragma mark Typedef'd Structures

typedef struct {
    long long value;
    int timescale;
    unsigned int flags;
    long long epoch;
} CDStruct_1b6d18a9;

typedef struct CDStruct_183601bc;

typedef struct {
    float _field1[9];
    CDStruct_1b6d18a9 _field2;
} CDStruct_d7aed2b2;

typedef struct {
    CDStruct_1b6d18a9 start;
    CDStruct_1b6d18a9 duration;
} CDStruct_e83c9415;

// Template types
typedef struct vector<CMTime, std::__1::allocator<CMTime>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<CMTime *, std::__1::allocator<CMTime>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
} vector_0821a7d5;

typedef struct vector<FloatPoint, std::__1::allocator<FloatPoint>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<FloatPoint *, std::__1::allocator<FloatPoint>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
} vector_f72cac12;

typedef struct vector<float, std::__1::allocator<float>> {
    float *_field1;
    float *_field2;
    struct __compressed_pair<float *, std::__1::allocator<float>> {
        float *_field1;
    } _field3;
} vector_f9ed6fc8;

