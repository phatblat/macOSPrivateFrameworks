//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

@class ASCLIENTSessionState;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct Address {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct ChangedObject {
    struct ObjectReference _field1;
    vector_bfad48d9 _field2;
    vector_cc4db96f _field3;
    vector_d60b2a1f _field4;
    vector_d60b2a1f _field5;
    vector_e9f4e6a1 _field6;
};

struct DerivedBehaviors {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
};

struct MicrophoneConfiguration {
    unsigned int _field1;
    struct StringRef _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    struct vector<aura::MicrophonePolarPattern, std::__1::allocator<aura::MicrophonePolarPattern>> _field6;
    _Bool _field7;
};

struct ObjectRef<const __CFString *> {
    struct __CFString *mCFObject;
};

struct ObjectReference {
    id _field1;
    unsigned long long _field2;
    unsigned int _field3;
};

struct ProcessToken {
    unsigned int _field1;
};

struct SessionInterruptionSource {
    unsigned int interruptorToken;
    struct StringRef name;
    unsigned long long state;
    unsigned long long cause;
    _Bool shouldResume;
};

struct SimulatedConfigurationChangeDescription {
    struct map<unsigned int, bool, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, bool>>> _field1;
    struct map<unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>>>> _field2;
    struct map<unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>>>> _field3;
    struct map<unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>>>> _field4;
};

struct SimulatedMicrophoneConfigurationDescription {
    struct MicrophoneConfiguration _field1;
    struct vector<aura::MicrophoneConfiguration, std::__1::allocator<aura::MicrophoneConfiguration>> _field2;
};

struct StringRef {
    struct ObjectRef<const __CFString *> mObject;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
};

struct error_category;

struct error_code {
    int _field1;
    struct error_category *_field2;
};

struct expected<aura::SimulatedConfigurationChangeDescription, std::__1::error_code> {
    union storage<aura::SimulatedConfigurationChangeDescription, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<aura::SimulatedMicrophoneConfigurationDescription, std::__1::error_code> {
    union storage<aura::SimulatedMicrophoneConfigurationDescription, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<std::__1::map<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::less<aura::IOControllerType>, std::__1::allocator<std::__1::pair<const aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>>, std::__1::error_code> {
    union storage<std::__1::map<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::less<aura::IOControllerType>, std::__1::allocator<std::__1::pair<const aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>>, std::__1::error_code> _field1;
    _Bool _field2;
};

struct map<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::less<aura::IOControllerType>, std::__1::allocator<std::__1::pair<const aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>> {
    struct __tree<std::__1::__value_type<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>, std::__1::__map_value_compare<aura::IOControllerType, std::__1::__value_type<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>, std::__1::less<aura::IOControllerType>, true>, std::__1::allocator<std::__1::__value_type<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<aura::IOControllerType, std::__1::__value_type<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>, std::__1::less<aura::IOControllerType>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned int, MXPlayerSession *, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, MXPlayerSession *>>> {
    struct __tree<std::__1::__value_type<unsigned int, MXPlayerSession *>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, MXPlayerSession *>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, MXPlayerSession *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, MXPlayerSession *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, MXPlayerSession *>, std::__1::less<unsigned int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned int, bool, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, bool>>> {
    struct __tree<std::__1::__value_type<unsigned int, bool>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, bool>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, bool>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, bool>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, bool>, std::__1::less<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>>>> {
    struct __tree<std::__1::__value_type<unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>>, std::__1::less<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct reactor<mx::IClientProcess *>;

struct reactor<mx::IProcessManager *>;

struct shared_ptr<caulk::reactor<mx::IClientProcess *>> {
    struct reactor<mx::IClientProcess *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<caulk::reactor<mx::IProcessManager *>> {
    struct reactor<mx::IProcessManager *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct vector<AMCP::Address, std::__1::allocator<AMCP::Address>> {
    struct Address *_field1;
    struct Address *_field2;
    struct __compressed_pair<AMCP::Address *, std::__1::allocator<AMCP::Address>> {
        struct Address *_field1;
    } _field3;
};

struct vector<NSString *, std::__1::allocator<NSString *>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<NSString **, std::__1::allocator<NSString *>> {
        id *_field1;
    } _field3;
};

struct vector<__weak id<aura_Clock>, std::__1::allocator<__weak id<aura_Clock>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_Clock>*, std::__1::allocator<__weak id<aura_Clock>>> {
        id *_field1;
    } _field3;
};

struct vector<__weak id<aura_Device>, std::__1::allocator<__weak id<aura_Device>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_Device>*, std::__1::allocator<__weak id<aura_Device>>> {
        id *_field1;
    } _field3;
};

struct vector<__weak id<aura_IOController>, std::__1::allocator<__weak id<aura_IOController>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__weak id<aura_IOController>*, std::__1::allocator<__weak id<aura_IOController>>> {
        id *__value_;
    } __end_cap_;
};

struct vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__weak id<aura_VirtualPort>*, std::__1::allocator<__weak id<aura_VirtualPort>>> {
        id *__value_;
    } __end_cap_;
};

struct vector<aura::ChangedObject, std::__1::allocator<aura::ChangedObject>> {
    struct ChangedObject *_field1;
    struct ChangedObject *_field2;
    struct __compressed_pair<aura::ChangedObject *, std::__1::allocator<aura::ChangedObject>> {
        struct ChangedObject *_field1;
    } _field3;
};

struct vector<aura::MicrophoneConfiguration, std::__1::allocator<aura::MicrophoneConfiguration>> {
    struct MicrophoneConfiguration *_field1;
    struct MicrophoneConfiguration *_field2;
    struct __compressed_pair<aura::MicrophoneConfiguration *, std::__1::allocator<aura::MicrophoneConfiguration>> {
        struct MicrophoneConfiguration *_field1;
    } _field3;
};

struct vector<aura::MicrophonePolarPattern, std::__1::allocator<aura::MicrophonePolarPattern>> {
    unsigned int *_field1;
    unsigned int *_field2;
    struct __compressed_pair<aura::MicrophonePolarPattern *, std::__1::allocator<aura::MicrophonePolarPattern>> {
        unsigned int *_field1;
    } _field3;
};

struct vector<aura::ObjectReference, std::__1::allocator<aura::ObjectReference>> {
    struct ObjectReference *_field1;
    struct ObjectReference *_field2;
    struct __compressed_pair<aura::ObjectReference *, std::__1::allocator<aura::ObjectReference>> {
        struct ObjectReference *_field1;
    } _field3;
};

struct vector<const MXPlayerSessionState, std::__1::allocator<const MXPlayerSessionState>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<const MXPlayerSessionState *, std::__1::allocator<const MXPlayerSessionState>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<const id<aura_VirtualPort>, std::__1::allocator<const id<aura_VirtualPort>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<const __strong id<aura_VirtualPort>*, std::__1::allocator<const id<aura_VirtualPort>>> {
        id *_field1;
    } _field3;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned int _field1[8];
} CDStruct_6ad76789;

typedef struct CDStruct_183601bc;

typedef struct {
    ASCLIENTSessionState *clientConfig;
    _Bool isActive;
    _Bool wasPlayingWhenInterrupted;
    unsigned long long runningState;
    CDUnknownBlockType interruptionHandler;
    _Bool hasInterruptionSource;
    struct SessionInterruptionSource interruptionSource;
    shared_ptr_b08b739b clientProcessReactor;
} CDStruct_b957a072;

// Template types
typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __value_;
    } __r_;
} basic_string_23d93216;

typedef struct expected<aura::SimulatedConfigurationChangeDescription, std::__1::error_code> {
    union storage<aura::SimulatedConfigurationChangeDescription, std::__1::error_code> _field1;
    _Bool _field2;
} expected_73a2de47;

typedef struct expected<aura::SimulatedMicrophoneConfigurationDescription, std::__1::error_code> {
    union storage<aura::SimulatedMicrophoneConfigurationDescription, std::__1::error_code> _field1;
    _Bool _field2;
} expected_cf04bbb0;

typedef struct expected<std::__1::map<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::less<aura::IOControllerType>, std::__1::allocator<std::__1::pair<const aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>>, std::__1::error_code> {
    union storage<std::__1::map<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::less<aura::IOControllerType>, std::__1::allocator<std::__1::pair<const aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>>, std::__1::error_code> _field1;
    _Bool _field2;
} expected_01e6cd2c;

typedef struct shared_ptr<caulk::reactor<mx::IClientProcess *>> {
    struct reactor<mx::IClientProcess *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_b08b739b;

typedef struct shared_ptr<caulk::reactor<mx::IProcessManager *>> {
    struct reactor<mx::IProcessManager *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_075de5b0;

typedef struct vector<AMCP::Address, std::__1::allocator<AMCP::Address>> {
    struct Address *_field1;
    struct Address *_field2;
    struct __compressed_pair<AMCP::Address *, std::__1::allocator<AMCP::Address>> {
        struct Address *_field1;
    } _field3;
} vector_cc4db96f;

typedef struct vector<NSString *, std::__1::allocator<NSString *>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<NSString **, std::__1::allocator<NSString *>> {
        id *_field1;
    } _field3;
} vector_bfad48d9;

typedef struct vector<__weak id<aura_Clock>, std::__1::allocator<__weak id<aura_Clock>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_Clock>*, std::__1::allocator<__weak id<aura_Clock>>> {
        id *_field1;
    } _field3;
} vector_496cc06a;

typedef struct vector<__weak id<aura_Device>, std::__1::allocator<__weak id<aura_Device>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_Device>*, std::__1::allocator<__weak id<aura_Device>>> {
        id *_field1;
    } _field3;
} vector_999014c4;

typedef struct vector<__weak id<aura_IOController>, std::__1::allocator<__weak id<aura_IOController>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__weak id<aura_IOController>*, std::__1::allocator<__weak id<aura_IOController>>> {
        id *__value_;
    } __end_cap_;
} vector_85eef765;

typedef struct vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__weak id<aura_VirtualPort>*, std::__1::allocator<__weak id<aura_VirtualPort>>> {
        id *__value_;
    } __end_cap_;
} vector_c6bb1d04;

typedef struct vector<aura::ChangedObject, std::__1::allocator<aura::ChangedObject>> {
    struct ChangedObject *_field1;
    struct ChangedObject *_field2;
    struct __compressed_pair<aura::ChangedObject *, std::__1::allocator<aura::ChangedObject>> {
        struct ChangedObject *_field1;
    } _field3;
} vector_e9f4e6a1;

typedef struct vector<aura::ObjectReference, std::__1::allocator<aura::ObjectReference>> {
    struct ObjectReference *_field1;
    struct ObjectReference *_field2;
    struct __compressed_pair<aura::ObjectReference *, std::__1::allocator<aura::ObjectReference>> {
        struct ObjectReference *_field1;
    } _field3;
} vector_d60b2a1f;

typedef struct vector<const MXPlayerSessionState, std::__1::allocator<const MXPlayerSessionState>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<const MXPlayerSessionState *, std::__1::allocator<const MXPlayerSessionState>> {
        CDStruct_183601bc *_field1;
    } _field3;
} vector_017a7f34;

typedef struct vector<const id<aura_VirtualPort>, std::__1::allocator<const id<aura_VirtualPort>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<const __strong id<aura_VirtualPort>*, std::__1::allocator<const id<aura_VirtualPort>>> {
        id *_field1;
    } _field3;
} vector_d24b5ac5;

#pragma mark Named Unions

union storage<aura::SimulatedConfigurationChangeDescription, std::__1::error_code> {
    char _field1;
    struct SimulatedConfigurationChangeDescription _field2;
    struct error_code _field3;
};

union storage<aura::SimulatedMicrophoneConfigurationDescription, std::__1::error_code> {
    char _field1;
    struct SimulatedMicrophoneConfigurationDescription _field2;
    struct error_code _field3;
};

union storage<std::__1::map<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::less<aura::IOControllerType>, std::__1::allocator<std::__1::pair<const aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>>, std::__1::error_code> {
    char _field1;
    struct map<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::less<aura::IOControllerType>, std::__1::allocator<std::__1::pair<const aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>> _field2;
    struct error_code _field3;
};

