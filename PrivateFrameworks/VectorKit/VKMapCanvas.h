//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <VectorKit/VKScreenCanvas.h>

#import "VKInteractiveMap.h"
#import "VKMapDataAccess.h"
#import "VKMapModelDelegate.h"

@class GEOResourceManifestConfiguration, NSArray, NSString, VKAnchorWrapper, VKCamera, VKMapModel, VKSceneConfiguration, VKTimedAnimation;

__attribute__((visibility("hidden")))
@interface VKMapCanvas : VKScreenCanvas <VKMapModelDelegate, VKInteractiveMap, VKMapDataAccess>
{
    VKMapModel *_map;
    struct CGSize _lastCanvasSize;
    VKCamera *_defaultTrackingCamera;
    optional_44235073 _lastValidCanvasSizeZoomLevel;
    VKTimedAnimation *_horizontalOffsetAnimation;
    double _canonicalSkyHeight;
    struct shared_ptr<md::AnchorContext> _anchorContext;
    id <VKInteractiveMapDelegate> _delegate;
}

+ (BOOL)supportsMapType:(long long)arg1 scale:(int)arg2 manifestConfiguration:(id)arg3;
@property(retain, nonatomic) VKCamera *defaultTrackingCamera; // @synthesize defaultTrackingCamera=_defaultTrackingCamera;
@property(nonatomic) double canonicalSkyHeight; // @synthesize canonicalSkyHeight=_canonicalSkyHeight;
@property(nonatomic) id <VKInteractiveMapDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, nonatomic) VKMapModel *map; // @synthesize map=_map;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)tileStatistics;
- (void)populateDebugNode:(shared_ptr_eafb90f9)arg1;
- (id)navigationPuck;
- (double)displayZoomLevel;
- (CameraFrame_406dbd31)rotateCameraFrameAboutCoordinate:(const CameraFrame_406dbd31 *)arg1 coordinate:(Coordinate3D_bc242218)arg2 deltaAngle:(double)arg3;
- (CameraFrame_406dbd31)_lookAtToCameraFrame:(const Matrix_6e1d3589 *)arg1 target:(const Matrix_6e1d3589 *)arg2 up:(const Matrix_6e1d3589 *)arg3;
- (double)unitsPerMeterAtLatitude:(Unit_3d259e8a)arg1;
- (void)setCameraFrame:(const CameraFrame_406dbd31 *)arg1;
- (Matrix_6e1d3589)upForCoordinate:(const Coordinate3D_bc242218 *)arg1;
- (double)heightAtCoordinate:(const Coordinate3D_bc242218 *)arg1;
- (double)fovAdjustment;
- (Matrix_08d701e4)worldViewProjectionMatrix:(const CameraFrame_406dbd31 *)arg1;
- (const Matrix_08d701e4 *)projectionMatrix;
- (RigidTransform_271c3a39)rigidTransformForFrame:(const CameraFrame_406dbd31 *)arg1;
- (Matrix_2bdd42a3)screenPixelForCoordinate:(const Coordinate3D_bc242218 *)arg1 cameraFrame:(const CameraFrame_406dbd31 *)arg2;
- (Coordinate3D_bc242218)groundCoordinateForScreenPixel:(const Matrix_2bdd42a3 *)arg1 cameraFrame:(const CameraFrame_406dbd31 *)arg2;
- (long long)tileSize;
- (float)currentRoadSignOffset;
- (void)setNavCameraIsDetached:(BOOL)arg1;
- (void)setCameraHorizontalOffset:(double)arg1 duration:(double)arg2 timingFunction:(id)arg3;
- (long long)currentMapMode;
- (void)transitionToTracking:(BOOL)arg1 mapMode:(long long)arg2 startLocation:(CDStruct_c3b9c2ee)arg3 startCourse:(double)arg4 cameraController:(id)arg5 pounceCompletionHandler:(CDUnknownBlockType)arg6;
- (shared_ptr_664b6d77)stylesheet;
- (shared_ptr_144c31f6)styleAtScreenPoint:(struct CGPoint)arg1;
- (shared_ptr_144c31f6)styleForFeature:(const shared_ptr_430519ce *)arg1;
- (shared_ptr_430519ce)featureMarkerAtScreenPoint:(struct CGPoint)arg1;
- (shared_ptr_430519ce)buildingMarkerAtScreenPoint:(struct CGPoint)arg1;
- (void)setApplicationState:(unsigned char)arg1;
- (void)removeExternalAnchor:(id)arg1;
- (void)addExternalAnchor:(id)arg1;
@property(readonly, nonatomic) VKAnchorWrapper *externalAnchors;
@property(nonatomic) id <VKRouteMatchedAnnotationPresentation> routeLineSplitAnnotation;
- (id)debugLabelString:(BOOL)arg1;
- (void)clearScene;
- (void)debugHighlightObjectAtPoint:(struct CGPoint)arg1 highlightTarget:(unsigned char)arg2;
- (void)goToTileX:(int)arg1 Y:(int)arg2 Z:(int)arg3 tileSize:(int)arg4;
- (void)mapModelStylesheetDidChange:(id)arg1;
- (void)mapModelDidUpdateMinMaxZoomLevel:(id)arg1;
- (void)mapModelDidReloadStylesheet:(id)arg1;
- (void)mapModel:(id)arg1 didUpdateContainsOverlay:(BOOL)arg2;
- (void)mapModelLabelsDidLayout:(id)arg1;
- (void)mapModel:(id)arg1 labelMarkerDidChangeState:(const shared_ptr_2d33c5e4 *)arg2;
- (void)mapModel:(id)arg1 selectedLabelMarkerWillDisappear:(const shared_ptr_2d33c5e4 *)arg2;
- (void)mapModelDidFailLoadingTiles:(id)arg1 withError:(id)arg2;
- (void)mapModelDidFinishLoadingTiles:(id)arg1;
- (void)mapModelDidStartLoadingTiles:(id)arg1;
- (void)mapModelDidBecomePartiallyDrawn:(id)arg1;
- (void)mapModelDidBecomeFullyDrawn:(id)arg1 hasFailedTiles:(BOOL)arg2;
- (void)mapModelWillBecomeFullyDrawn:(id)arg1;
- (void)mapModel:(id)arg1 willTransitionFrom:(long long)arg2 to:(long long)arg3 duration:(double)arg4;
- (BOOL)isPointValidForGesturing:(struct CGPoint)arg1;
- (void)cameraControllerDidReturnToDefaultZoom:(id)arg1;
- (void)cameraControllerDidLeaveDefaultZoom:(id)arg1;
- (void)cameraControllerHasStoppedPanning:(id)arg1;
- (void)cameraControllerHasStartedPanning:(id)arg1;
- (void)cameraController:(id)arg1 canZoomOutDidChange:(BOOL)arg2;
- (void)cameraController:(id)arg1 canZoomInDidChange:(BOOL)arg2;
- (id)cameraController:(id)arg1 presentationForAnnotation:(id)arg2;
- (void)cameraController:(id)arg1 canEnter3DModeDidChange:(BOOL)arg2;
- (void)cameraController:(id)arg1 didBecomePitched:(BOOL)arg2;
- (void)cameraControllerDidFinishInitialTrackingAnimation:(id)arg1;
- (void)cameraController:(id)arg1 didChangeRegionAnimated:(BOOL)arg2;
- (void)cameraController:(id)arg1 willChangeRegionAnimated:(BOOL)arg2;
- (void)cameraControllerRequestsLayout:(id)arg1;
- (void)cameraControllerDidChangeCameraState:(id)arg1;
@property(nonatomic) BOOL showsVenues;
@property(nonatomic) BOOL showsBuildings;
- (void)setShowsPointsOfInterest:(BOOL)arg1;
- (BOOL)showsPointsOfInterest;
- (id)boundsForSelectedTransitLines;
- (void)deselectTransitLineMarker;
- (void)selectTransitLineMarker:(id)arg1;
- (id)selectedTransitLineIDs;
- (id)transitLineMarkersForSelectionAtPoint:(struct CGPoint)arg1;
- (id)transitLineMarkersInCurrentViewport;
- (struct LabelSettings *)labelSettings;
- (void)debugHighlightFeatureMarker:(const shared_ptr_430519ce *)arg1;
- (BOOL)shouldHideOffscreenSelectedAnnotation;
- (CDUnknownBlockType)annotationCoordinateTest;
- (CDUnknownBlockType)annotationRectTest;
@property(retain, nonatomic) id <GEORoutePreloadSession> routePreloadSession;
- (void)preloadNavigationSceneResourcesWithDevice:(const shared_ptr_807ec9ac *)arg1;
- (void)setRouteContext:(id)arg1;
@property(readonly, nonatomic) NSArray *rasterOverlays;
- (void)insertRasterOverlay:(id)arg1 belowOverlay:(id)arg2;
- (void)insertRasterOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)removeRasterOverlay:(id)arg1;
- (void)addRasterOverlay:(id)arg1;
- (void)removePersistentOverlay:(id)arg1;
- (void)addPersistentOverlay:(id)arg1;
- (id)persistentOverlays;
- (id)overlays;
- (void)removeOverlay:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)setShouldLimitTrackingCameraHeight:(BOOL)arg1;
- (void)didBeginTransitionToTransit;
- (struct CGPoint)convertCoordinateToCameraModelPoint:(CDStruct_c3b9c2ee)arg1;
- (struct CGPoint)convertCoordinateToPoint:(CDStruct_c3b9c2ee)arg1;
- (struct CGPoint)convertMapPointToPoint:(CDStruct_c3b9c2ee)arg1;
- (CDStruct_c3b9c2ee)convertPointToCoordinate:(struct CGPoint)arg1;
- (CDStruct_c3b9c2ee)convertPointToMapPoint:(struct CGPoint)arg1;
- (void)updateCameraForFrameResize;
- (optional_44235073)_zoomLevelForCanvasSize:(struct CGSize)arg1;
- (void)forceSceneLoad;
- (void)gglWillDrawWithTimestamp;
- (void)_updateViewTransform;
- (BOOL)currentSceneRequiresMSAA;
- (id)consoleString:(BOOL)arg1;
- (id)detailedDescriptionDictionaryRepresentation;
- (id)detailedDescription;
- (void)dealloc;
-     // Error parsing type: @28@0:8^{MapEngine=^^?{shared_ptr<md::TaskContext>=^{TaskContext}^{__shared_weak_count}}{_retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}^{Device}{_retain_ptr<_MapEngineRenderQueueSource *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{unique_ptr<ggl::DisplayLink, std::__1::default_delete<ggl::DisplayLink> >={__compressed_pair<ggl::DisplayLink *, std::__1::default_delete<ggl::DisplayLink> >=^{DisplayLink}}}{unique_ptr<ggl::SnapshotRunLoop, std::__1::default_delete<ggl::SnapshotRunLoop> >={__compressed_pair<ggl::SnapshotRunLoop *, std::__1::default_delete<ggl::SnapshotRunLoop> >=^{SnapshotRunLoop}}}^{RunLoop}{unique_ptr<md::AnimationManager, std::__1::default_delete<md::AnimationManager> >={__compressed_pair<md::AnimationManager *, std::__1::default_delete<md::AnimationManager> >=^{AnimationManager}}}{unique_ptr<md::AnimationRunner, std::__1::default_delete<md::AnimationRunner> >={__compressed_pair<md::AnimationRunner *, std::__1::default_delete<md::AnimationRunner> >=^{AnimationRunner}}}{shared_ptr<md::RunLoopController>=^{RunLoopController}^{__shared_weak_count}}@@@@{unique_ptr<md::CartographicRenderer, std::__1::default_delete<md::CartographicRenderer> >={__compressed_pair<md::CartographicRenderer *, std::__1::default_delete<md::CartographicRenderer> >=^{CartographicRenderer}}}{unique_ptr<md::realistic::RealisticRenderer, std::__1::default_delete<md::realistic::RealisticRenderer> >={__compressed_pair<md::realistic::RealisticRenderer *, std::__1::default_delete<md::realistic::RealisticRenderer> >=^{RealisticRenderer}}}^{Renderer}{unique_ptr<md::LayoutContext, std::__1::default_delete<md::LayoutContext> >={__compressed_pair<md::LayoutContext *, std::__1::default_delete<md::LayoutContext> >=^{LayoutContext}}}{_retain_ptr<VKCamera *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>=^^?@{_retain_objc=}{_release_objc=}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{shared_ptr<md::LabelManager>=^{LabelManager}^{__shared_weak_count}}{unique_ptr<md::LogicManager, std::__1::default_delete<md::LogicManager> >={__compressed_pair<md::LogicManager *, std::__1::default_delete<md::LogicManager> >=^{LogicManager}}}{unique_ptr<md::Statistics, std::__1::default_delete<md::Statistics> >={__compressed_pair<md::Statistics *, std::__1::default_delete<md::Statistics> >=^{Statistics}}}BBB{atomic<bool>=AB}{atomic<bool>=AB}B}16c24, name: initWithMapEngine:inBackground:
- (void)resetTileContainers;
- (void)transferStateFromCanvas:(id)arg1;
@property(nonatomic) BOOL shouldLoadMapMargin;
@property(nonatomic) BOOL shouldLoadFallbackTiles;
- (void)setApplicationUILayout:(unsigned char)arg1;
- (unsigned char)applicationUILayout;
- (void)setEmphasis:(unsigned char)arg1;
- (unsigned char)emphasis;
- (void)setVehicleState:(struct VehicleState)arg1;
- (struct VehicleState)vehicleState;
- (void)setTargetDisplay:(unsigned char)arg1;
- (unsigned char)targetDisplay;
- (void)setContentsScale:(double)arg1;
- (void)reloadStylesheet;
- (void)setStylesheetName:(const basic_string_23d93216 *)arg1;
@property(nonatomic) shared_ptr_a3c46825 styleManager;
@property(readonly, nonatomic) VKSceneConfiguration *sceneConfiguration;
- (void)setDesiredMapMode:(long long)arg1 immediate:(BOOL)arg2;
- (void)_setStyleTransitionProgress:(double)arg1 targetStyle:(struct DisplayStyle)arg2 step:(long long)arg3;
- (double)_styleTransitionProgress;
- (void)setStylesheetMapDisplayStyle:(struct DisplayStyle)arg1;
- (struct DisplayStyle)sourceMapDisplayStyle;
- (BOOL)supportsMapDisplayStyle:(struct DisplayStyle)arg1;
- (void)finishStyleBlend;
- (void)stylesheetAnimationDidEnd:(BOOL)arg1;
- (void)stylesheetAnimationDidProgress:(float)arg1;
- (void)stylesheetAnimationWillStartFromStyle:(struct DisplayStyle)arg1 toStyle:(struct DisplayStyle)arg2;
- (void)endStyleAnimationGroup;
- (void)beginStyleAnimationGroup;
- (void)requestStylesheetAnimation:(id)arg1 targetMapDisplayStyle:(struct DisplayStyle)arg2 setupHandler:(CDUnknownBlockType)arg3;
@property(nonatomic) long long mapType;
- (void)setMapType:(long long)arg1 animated:(BOOL)arg2;
@property(retain, nonatomic) GEOResourceManifestConfiguration *additionalManifestConfiguration;
@property(readonly, nonatomic, getter=isFullyDrawn) BOOL fullyDrawn;
@property(nonatomic) BOOL trafficIncidentsEnabled;
@property(nonatomic) BOOL trafficEnabled;
- (BOOL)isShowingNoDataPlaceholders;
- (id)attributionsForCurrentRegion;
@property(readonly, nonatomic) NSArray *visibleTileSets;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

