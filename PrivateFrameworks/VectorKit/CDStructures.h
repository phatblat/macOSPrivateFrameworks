//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

@class GEOFeatureStyleAttributes, VKMapView, VKRouteContext, VKSharedResources;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct ARContext;

struct AdditionalRouteInfo;

struct Allocator;

struct AlphaAtlas {
    _Bool _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    float _field5;
    struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D>> _field6;
};

struct AltitudeDebugSettings {
    char altitudePauseLoading;
    char altitudeFreezeViewNode;
    char altitudeTexturePaging;
    char altitudeShowTileBounds;
    char altitudeThreadDrawing;
    char altitudeHighResSatellite;
    char altitudeMipmapSatellite;
    char altitudeMipmapFlyover;
    char altitudeMipmapObjectTree;
    char altitudeShowNightLight;
    float lodScale;
    float tileQualityThreshold;
    float hideMeshTime;
    float fadeSpeed;
    char tourSpeedup;
    float tourSpeedupFactor;
};

struct AnchorContext;

struct AnchorManager;

struct AnimationRunner {
    struct MapEngine *_field1;
};

struct BalloonMetrics;

struct BaseMesh {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    CDUnknownFunctionPointerType *_field3;
    struct ResourceManager *_field4;
    struct RenderResource *_field5;
    struct MeshCReflection *_field6;
    struct vector<std::__1::shared_ptr<ggl::VertexData>, geo::StdAllocator<std::__1::shared_ptr<ggl::VertexData>, ggl::Allocator>> _field7;
    struct shared_ptr<ggl::IndexData> _field8;
};

struct BasePipelineSetup {
    CDUnknownFunctionPointerType *_field1;
    struct PipelineDataCReflection *_field2;
    struct shared_ptr<ggl::PipelineState> _field3;
    struct vector<ggl::ConstantDataElement, geo::StdAllocator<ggl::ConstantDataElement, ggl::Allocator>> _field4;
    struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator>> _field5;
    struct Mesh *_field6;
};

struct BasePipelineState;

struct Batcher {
    MultiRange_4bdc93a8 _field1;
    struct vector<gm::MultiRange<unsigned long>, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator>> _field2;
    MultiRange_4bdc93a8 _field3;
};

struct BitmapDataBase;

struct Box<double, 2> {
    Matrix_2bdd42a3 _minimum;
    Matrix_2bdd42a3 _maximum;
};

struct Box<float, 2> {
    Matrix_8746f91e _field1;
    Matrix_8746f91e _field2;
};

struct Box<float, 3> {
    Matrix_811b2232 _minimum;
    Matrix_811b2232 _maximum;
};

struct Box<unsigned int, 2> {
    struct Matrix<unsigned int, 2, 1> _field1;
    struct Matrix<unsigned int, 2, 1> _field2;
};

struct BufferData;

struct BufferMemory {
    struct ResourceAccessor *_accessor;
    struct BufferData *_user;
    struct Range<unsigned long> _range;
    int _access;
    int _sync;
    char *_data;
};

struct BuildingMesh;

struct CGColor;

struct CGImage;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CLabelCache;

struct CLabelDebug {
    struct CLabelLayer *_field1;
};

struct CLabelLayer {
    CDUnknownFunctionPointerType *_field1;
    struct CommandBufferIdSet _field2;
    struct map<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>, std::__1::less<md::CommandBufferId>, std::__1::allocator<std::__1::pair<const md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>>> _field3;
    _Bool _field4;
    unsigned int _field5;
    CDUnknownFunctionPointerType *_field6;
    struct CartographicRenderer *_field7;
    unsigned char _field8;
    struct CLabelDebug _field9;
    shared_ptr_e1d4bd06 _field10;
    id _field11;
    struct _retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field12;
    struct unique_ptr<md::LabelSettings, std::__1::default_delete<md::LabelSettings>> _field13;
    struct CLabelCache *_field14;
    unsigned int _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
};

struct CMercatorTerrainHeightCache;

struct COverlayLayer {
    CDUnknownFunctionPointerType *_field1;
    struct CommandBufferIdSet _field2;
    struct map<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>, std::__1::less<md::CommandBufferId>, std::__1::allocator<std::__1::pair<const md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>>> _field3;
    _Bool _field4;
    unsigned int _field5;
    CDUnknownFunctionPointerType *_field6;
    struct CartographicRenderer *_field7;
    unsigned char _field8;
    struct set<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::less<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> _field9;
    struct ZRange _field10;
    int _field11;
    struct CartographicTilesCache *_field12;
    struct COverlayRenderResources *_field13;
    unsigned char _field14;
    struct vector<VKTile *, std::__1::allocator<VKTile *>> _field15;
    int _field16;
};

struct COverlayRenderResources;

struct CPolylineGroupChangeObserver {
    CDUnknownFunctionPointerType *_field1;
};

struct CPuckStyleInfo;

struct CVSMPTETime {
    short _field1;
    short _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    short _field6;
    short _field7;
    short _field8;
    short _field9;
};

struct CameraFrame<geo::Radians, double> {
    Coordinate3D_bc242218 _target;
    struct Unit<MeterUnitDescription, double> _distanceFromTarget;
    Unit_3d259e8a _pitch;
    Unit_3d259e8a _heading;
    Unit_3d259e8a _roll;
};

struct CameraManager {
    CDUnknownFunctionPointerType *_vptr$CameraManager;
    _Bool _panBegin;
    _Bool _panInProgress;
    _Bool _panEnd;
    Matrix_443f5d51 _panCurrentCursor;
    Matrix_443f5d51 _panPreviousCursor;
    Matrix_443f5d51 _panStartCursor;
    Coordinate3D_bc242218 _panStartPosition;
    double _panDistance;
    _Bool _panAtStartPosition;
    _Bool _rotateBegin;
    _Bool _rotateInProgress;
    _Bool _rotateEnd;
    Coordinate3D_bc242218 _rotateStartPosition;
    Matrix_443f5d51 _rotateCurrentCursor;
    double _rotateAngle;
    _Bool _tiltBegin;
    _Bool _tiltInProgress;
    _Bool _tiltEnd;
    Coordinate3D_bc242218 _tiltStartPosition;
    Matrix_443f5d51 _tiltCurrentCursor;
    Matrix_443f5d51 _tiltPreviousCursor;
    double _tiltAngle;
    _Bool _zoomBegin;
    _Bool _zoomInProgress;
    _Bool _zoomEnd;
    Coordinate3D_bc242218 _zoomStartPosition;
    Matrix_443f5d51 _zoomCurrentCursor;
    double _zoomFactor;
    double _zoomStartDistance;
    _Bool _zoomRotateToNorth;
    _Bool _useTiltLimit;
    int _tiltLimitMode;
    _Bool _tiltLimitPushDownEnabled;
    _Bool _tiltLimitTransferInProgress;
    _Bool _tiltLimitPushDown;
    double _startPushDownTilt;
    double _tiltLimitTransferFraction;
    double _startTiltLimitTilt;
    Geocentric_d8fde6f2 _startTiltLimitPosition;
    Matrix_6e1d3589 _startTiltLimitDirection;
    double _fullZoomTiltLimitFactor;
};

struct CartoStyle<gss::PropertyID>;

struct CartographicLayer {
    CDUnknownFunctionPointerType *_field1;
    struct CommandBufferIdSet _field2;
    struct map<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>, std::__1::less<md::CommandBufferId>, std::__1::allocator<std::__1::pair<const md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>>> _field3;
    _Bool _field4;
    unsigned int _field5;
    CDUnknownFunctionPointerType *_field6;
    struct CartographicRenderer *_field7;
    unsigned char _field8;
};

struct CartographicRenderer {
    CDUnknownFunctionPointerType *_field1;
    shared_ptr_e963992e _field2;
    struct unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue>> _field3;
    struct RenderLayer *_field4[28];
    struct RenderLayer *_field5[66];
    struct RunLoopController *_field6;
    struct MapEngine *_field7;
    id _field8;
    id _field9;
    id _field10;
    id _field11;
    shared_ptr_a3c46825 _field12;
    struct CommandBuffer *_field13;
    struct AnimationRunner *_field14;
};

struct CartographicTilesCache;

struct CasedTrafficBatch;

struct CasedTrafficLayer {
    CDUnknownFunctionPointerType *_field1;
    struct vector<md::CasedTrafficBatch *, std::__1::allocator<md::CasedTrafficBatch *>> _field2;
    struct vector<ggl::TrafficBase::BaseMesh *, std::__1::allocator<ggl::TrafficBase::BaseMesh *>> _field3;
    struct RenderState *_field4[1];
    shared_ptr_696716c4 _field5;
    unsigned long long _field6;
    struct TrafficSharedResources *_field7;
};

struct CircleMetrics;

struct ClearItem {
    unsigned char colorMask;
    Matrix_5173352a color;
    _Bool clearDepthBuffer;
    float depth;
    unsigned char clearStencilBuffer;
    unsigned int stencil;
};

struct ClusterTreeClusterNode {
    CDUnknownFunctionPointerType *_field1;
    struct Range<float> _field2;
    Mercator2_57ec32b6 _field3;
    struct ClusterTreeClusterNode *_field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned char _field7;
    _Bool _field8;
    struct _retain_ptr<id<VKCustomFeatureAnnotation>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field9;
    struct ClusterTreeNode *_field10[2];
    struct ClusterTreeFeatureNode *_field11;
    double _field12;
    unsigned int _field13;
    _Bool _field14;
    _Bool _field15;
};

struct ClusterTreeFeatureNode;

struct ClusterTreeNode;

struct CommandBuffer;

struct CommandBufferIdSet {
    struct vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId>> _field1;
};

struct CommonLibrary;

struct ComputeQueue;

struct ComputeShaderEntry;

struct ConstantDataElement;

struct ConstantDataTyped<ggl::Fog::Skyfog>;

struct ConstantDataTyped<ggl::Tile::View>;

struct ConstantDataTyped<ggl::TransitNode::Settings>;

struct Context;

struct ConvexHull2<double> {
    vector_554e3200 _field1;
};

struct Coordinate2D<Degrees, double> {
    Unit_57582783 latitude;
    Unit_57582783 longitude;
};

struct Coordinate2D<Radians, double> {
    Unit_3d259e8a latitude;
    Unit_3d259e8a longitude;
};

struct Coordinate3D<Radians, double> {
    Unit_3d259e8a latitude;
    Unit_3d259e8a longitude;
    struct Unit<MeterUnitDescription, double> altitude;
};

struct CullingGridWithHeight {
    float _heights[16];
};

struct CullingNode;

struct CustomLandmarksContainer;

struct DashTexture;

struct DashTextureCache {
    struct unordered_map<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>, md::DashTextureCache::KeyHasher, std::__1::equal_to<md::DashTextureCache::Key>, std::__1::allocator<std::__1::pair<const md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>>> _field1;
};

struct DataOverrideManager;

struct DataWrite<ggl::BuildingFlatStroke::DefaultVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::ColoredText::My>;

struct DataWrite<ggl::PolygonBase::CompressedVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::PolygonCommonStroke::DefaultVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::Venue3DStroke::HorizontalDefaultVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::Venue3DStroke::VerticalDefaultVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::VenueWall::DefaultVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<ggl::VenueWall::EndCapVbo> {
    struct BufferMemory _memory;
};

struct DataWrite<unsigned short> {
    struct BufferMemory _memory;
};

struct DebugConsole {
    CDUnknownFunctionPointerType *_field1;
    Matrix_8746f91e _field2;
    Matrix_8746f91e _field3;
    Matrix_8746f91e _field4;
    Matrix_8746f91e _field5;
    unsigned long long _field6;
    struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>> _field7;
    struct unique_ptr<ggl::DataWrite<ggl::ColoredText::My>, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My>>> _field8;
    unsigned long long _field9;
    Matrix_8746f91e *_field10;
    struct Matrix<unsigned char, 4, 1> _field11;
    struct Matrix<unsigned char, 4, 1> _field12;
    float _field13;
    struct CommonLibrary *_field14;
    struct RenderTargetFormat _field15;
};

struct DebugConsoleManager;

struct DebugTree {
    VKMapView *_mapView;
    struct vector<std::__1::shared_ptr<md::DebugTreeNode>, std::__1::allocator<std::__1::shared_ptr<md::DebugTreeNode>>> _nodes;
    _Bool _options[4];
};

struct DebugTreeNode;

struct DepthState {
    int _field1;
    int _field2;
    int _field3;
    float _field4;
    float _field5;
};

struct DeviceAPIProperties {
    int _field1;
    double _field2;
};

struct DeviceCapabilities {
    _Bool _field1;
    _Bool _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    struct DeviceSize _field6;
};

struct DeviceSize {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct DeviceVersion {
    unsigned int _field1;
    unsigned int _field2;
};

struct DisplayStyle {
    unsigned char timePeriod;
    unsigned char overlayType;
    unsigned char applicationState;
    unsigned char searchResultsType;
    unsigned char mapHasLabels;
};

struct DistanceAtlas {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D>> _field4;
};

struct Edge;

struct ExtraStyle {
    float _scale;
    float _contentScale;
    float _tailDirection;
    struct Matrix<unsigned int, 2, 1> _glyphImageSize;
    struct Matrix<unsigned int, 2, 1> _landmarkImageSize;
    struct Matrix<unsigned int, 2, 1> _outlineImageSize;
    struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>> _text;
};

struct FeatureAttributePair;

struct FeatureAttributeSet {
    struct vector<gss::FeatureAttributePair, geo::StdAllocator<gss::FeatureAttributePair, gss::Allocator>> _attributes;
};

struct FeatureMarker;

struct FixedPointVector<unsigned char, 4> {
    unsigned char _e[4];
};

struct FlyoverLibrary;

struct FlyoverPolylineOverlayCache;

struct FogInfo {
    struct shared_ptr<ggl::ConstantDataTyped<ggl::Fog::Skyfog>> _fogConstantData;
};

struct FontManager;

struct FunctionEntry;

struct GenericShieldStyleInfo;

struct GeoCoordinates {
    struct Longitude _field1;
    struct Latitude _field2;
};

struct GeoServicesLoadJob;

struct Geocentric<double> {
    double _e[3];
};

struct GlobeAdapter {
    struct shared_ptr<md::GlobeAdapterData> _field1;
    struct GlobeView *_field2;
    struct vector<std::__1::shared_ptr<md::LabelMapTile>, geo::StdAllocator<std::__1::shared_ptr<md::LabelMapTile>, lhp::Allocator>> _field3;
    shared_ptr_e1d4bd06 _field4;
    struct unique_ptr<md::LabelSettings, std::__1::default_delete<md::LabelSettings>> _field5;
    struct _retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field6;
    _Bool _field7;
    _Bool _field8;
};

struct GlobeAdapterData;

struct GlobeDispatch;

struct GlobeOverlayContainer {
    struct GlobeView *_field1;
    struct NSMutableArray *_field2;
    struct mutex _field3;
    double _field4;
};

struct GlobeTileRenderManager;

struct GlobeView;

struct HighlightHelper {
    id _field1;
    Matrix_08d701e4 *_field2;
};

struct IOSurfaceTexture;

struct Incident {
    struct GeoCoordinates _field1;
    struct String _field2;
    struct String _field3;
    int _field4;
    struct String _field5;
    struct String _field6;
    long long _field7;
    long long _field8;
    long long _field9;
    long long _field10;
    int _field11;
    unsigned char _field12;
    _Bool _field13;
    int _field14;
    unsigned char _field15;
    unsigned char _field16;
};

struct IndexData;

struct IndexDataTyped<unsigned short>;

struct IsoAlphaAtlas {
    unsigned int _field1;
    unsigned int _field2;
    float _field3;
    struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D>> _field4;
    shared_ptr_cedd5232 _field5;
};

struct LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long>>;

struct LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long>>;

struct LabelClusterProvider;

struct LabelClusterTree;

struct LabelCustomFeatureProvider {
    struct LabelCustomFeatureSupport *_field1;
    struct LabelManager *_field2;
    struct _retain_ptr<VKCustomFeatureDataSourceObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field3;
    struct _retain_ptr<id<VKCustomFeatureDataSource>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field4;
    struct map<VKTileKey, md::LabelCustomFeatureProvider::TileInfo, md::LabelCustomFeatureProvider::TileKeyLess, geo::StdAllocator<std::__1::pair<const VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, lhp::Allocator>> _field5;
    struct _retain_ptr<id<VKCustomFeatureAnnotation>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field6;
    struct shared_ptr<md::LabelScene> _field7;
    struct map<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo, std::__1::less<id<VKCustomFeatureAnnotation>>, geo::StdAllocator<std::__1::pair<const id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, lhp::Allocator>> _field8;
    struct unique_ptr<md::LabelClusterProvider, std::__1::default_delete<md::LabelClusterProvider>> _field9;
    _Bool _field10;
    unsigned char _field11;
    unsigned char _field12;
};

struct LabelCustomFeatureSupport;

struct LabelExternalIconRenderer;

struct LabelExternalObjectsModerator {
    struct shared_ptr<md::weak_interface_ptr<md::LabelExternalObjectsModerator>> _field1;
    struct LabelExternalIconRenderer *_field2;
    struct vector<std::__1::shared_ptr<md::LabelCreateExternalIconRequest>, geo::StdAllocator<std::__1::shared_ptr<md::LabelCreateExternalIconRequest>, lhp::Allocator>> _field3;
    struct unordered_set<std::__1::shared_ptr<md::LabelExternalIcon>, std::__1::hash<std::__1::shared_ptr<md::LabelExternalIcon>>, std::__1::equal_to<std::__1::shared_ptr<md::LabelExternalIcon>>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalIcon>>> _field4;
    struct set<unsigned long long, std::__1::less<unsigned long long>, geo::StdAllocator<unsigned long long, lhp::Allocator>> _field5;
    struct set<unsigned long long, std::__1::less<unsigned long long>, geo::StdAllocator<unsigned long long, lhp::Allocator>> _field6;
    struct unordered_map<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>, std::__1::hash<const GEOTransitLink *>, std::__1::equal_to<const GEOTransitLink *>, geo::StdAllocator<std::__1::pair<const GEOTransitLink *const, std::__1::weak_ptr<md::LabelExternalTransitLink>>, lhp::Allocator>> _field7;
    struct unordered_map<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, geo::StdAllocator<std::__1::pair<const unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, lhp::Allocator>> _field8;
    struct mutex _field9;
    struct mutex _field10;
    _Bool _field11;
    _Bool _field12;
};

struct LabelExternalPointFeature;

struct LabelImageKey;

struct LabelLayoutContext;

struct LabelManager;

struct LabelMapTile;

struct LabelMarker;

struct LabelMarkerFeatureHandle {
    unsigned char featureType;
    long long featureIndex;
    struct VKTileKey key;
    int tileStyle;
    unsigned int tileVersion;
    GEOFeatureStyleAttributes *styleAttributes;
};

struct LabelNavJunctionInfo;

struct LabelNavLayoutContext;

struct LabelScene;

struct LabelSettings {
    struct LabelSettings_Presentation _field1;
    struct LabelSettings_Navigation _field2;
    struct LabelSettings_Markers _field3;
    shared_ptr_e1d4bd06 _field4;
    struct unique_ptr<md::LabelSettingsData, std::__1::default_delete<md::LabelSettingsData>> _field5;
};

struct LabelSettingsData;

struct LabelSettings_Markers {
    struct LabelSettings *_field1;
};

struct LabelSettings_Navigation {
    struct LabelSettings *_field1;
};

struct LabelSettings_Presentation {
    struct LabelSettings *_field1;
};

struct LabelStyle;

struct LabelTile;

struct LabelTransitRoute;

struct LabelTransitRouteLine;

struct LabelTransitSupport {
    struct LabelManager *_field1;
    shared_ptr_887a193f _field2;
    struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field3;
    struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field4;
    struct _retain_ptr<VKRouteContextObserverThunk *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    double _field10;
    struct vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalPointFeature>, lhp::Allocator>> _field11;
    struct vector<std::__1::shared_ptr<md::LabelFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelFeature>, lhp::Allocator>> _field12;
    unordered_set_bb7a56cc _field13;
    struct vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>, lhp::Allocator>> _field14;
    struct vector<std::__1::shared_ptr<md::LabelFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelFeature>, lhp::Allocator>> _field15;
    struct map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, geo::StdAllocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>>, lhp::Allocator>> _field16;
    struct _retain_ptr<VKRouteLineObserver *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
        CDUnknownFunctionPointerType *_field1;
        id _field2;
        struct _retain_objc _field3;
        struct _release_objc _field4;
    } _field17;
    struct shared_ptr<md::LabelTransitRoute> _field18;
    struct shared_ptr<md::LabelTransitRouteLine> _field19;
    unsigned int _field20;
    struct unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool>>, geo::StdAllocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, lhp::Allocator>> _field21;
};

struct Latitude {
    unsigned int _field1;
};

struct LayoutContext {
    id _field1;
    struct shared_ptr<md::ViewTransform> _field2;
    struct shared_ptr<md::AnchorContext> _field3;
    id _field4;
    id _field5;
    shared_ptr_a3c46825 _field6;
    shared_ptr_c37d6e02 _field7;
    struct VKEdgeInsets _field8;
    struct VKEdgeInsets _field9;
    unsigned char _field10;
    struct shared_ptr<ggl::PolygonBase::MeshMesh> _field11;
    struct shared_ptr<ggl::PolygonBase::MeshMesh> _field12;
    struct shared_ptr<ggl::TextureMesh::MeshMesh> _field13;
    struct StencilManager _field14;
    shared_ptr_807ec9ac _field15;
    struct Loader _field16;
    double _field17;
    double _field18;
    _Bool _field19;
    _Bool _field20;
    _Bool _field21;
    _Bool _field22;
    _Bool _field23;
    Coordinate3D_bc242218 _field24;
    float _field25;
    float _field26;
    float _field27;
    int _field28;
    struct View *_field29;
    struct View *_field30;
    struct Viewport *_field31;
    struct ARContext *_field32;
    struct array<std::__1::unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext>>, 4> _field33;
};

struct Loader {
    struct unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl>> _field1;
};

struct LoaderImpl;

struct Logic;

struct LogicContext;

struct LogicManager {
    CDUnknownFunctionPointerType *_field1;
    struct Logic *_field2[4];
};

struct Longitude {
    unsigned int _field1;
};

struct ManeuverArrowCoordinates {
    struct vector<md::ManeuverArrowInfo, std::__1::allocator<md::ManeuverArrowInfo>> _maneuverArrows;
};

struct ManeuverArrowInfo;

struct ManeveuverDistancesRange {
    double _immediate;
    double _extremlyNear;
    double _veryNear;
    double _near;
    double _medium;
    double _far;
    double _veryFar;
};

struct MapEngine;

struct Matrix<double, 2, 1> {
    double _e[2];
};

struct Matrix<double, 3, 1> {
    double _e[3];
};

struct Matrix<double, 4, 4> {
    double _e[16];
};

struct Matrix<float, 2, 1> {
    float _e[2];
};

struct Matrix<float, 3, 1> {
    float _e[3];
};

struct Matrix<float, 4, 1> {
    float _e[4];
};

struct Matrix<float, 4, 4> {
    float _e[16];
};

struct Matrix<int, 2, 1> {
    int _e[2];
};

struct Matrix<unsigned char, 4, 1> {
    unsigned char _field1[4];
};

struct Matrix<unsigned int, 2, 1> {
    unsigned int _e[2];
};

struct Mercator2<double> {
    double _e[2];
};

struct Mercator3<double> {
    double _field1[3];
};

struct MercatorTile {
    unsigned char _field1;
    int _field2;
    int _field3;
};

struct Mesh {
    CDUnknownFunctionPointerType *_field1;
    char *_field2;
    CDUnknownFunctionPointerType *_field3;
    struct ResourceManager *_field4;
    struct RenderResource *_field5;
    struct MeshCReflection *_field6;
    struct vector<std::__1::shared_ptr<ggl::VertexData>, geo::StdAllocator<std::__1::shared_ptr<ggl::VertexData>, ggl::Allocator>> _field7;
    struct shared_ptr<ggl::IndexData> _field8;
};

struct MeshCReflection;

struct MeshMesh;

struct MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_4080291d _meshes;
    struct DataWrite<ggl::BuildingFlatStroke::DefaultVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_74364602 _meshes;
    struct DataWrite<ggl::PolygonBase::CompressedVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_d473a3e0 _meshes;
    struct DataWrite<ggl::PolygonCommonStroke::DefaultVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_8c4a3c5e _meshes;
    struct DataWrite<ggl::Venue3DStroke::HorizontalDefaultVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_5b05785e _meshes;
    struct DataWrite<ggl::Venue3DStroke::VerticalDefaultVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_da5ada59 _meshes;
    struct DataWrite<ggl::VenueWall::EndCapVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo> {
    struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> _vertexAndIndexCounts;
    vector_e4fc2931 _meshes;
    struct DataWrite<ggl::VenueWall::DefaultVbo> _vertexDataWrite;
    struct DataWrite<unsigned short> _indexDataWrite;
    unsigned char _meshIndex;
    unsigned short _meshVertexOffset;
    unsigned int _meshIndexOffset;
};

struct MeshVendor<ggl::BuildingFacade::BuildingMesh> {
    struct vector<ggl::BuildingFacade::BuildingMesh *, geo::StdAllocator<ggl::BuildingFacade::BuildingMesh *, ggl::Allocator>> _field1;
    struct BuildingMesh *_field2;
};

struct MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> {
    struct vector<ggl::BuildingPointyRoof::BuildingMesh *, geo::StdAllocator<ggl::BuildingPointyRoof::BuildingMesh *, ggl::Allocator>> _field1;
    struct BuildingMesh *_field2;
};

struct MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> {
    struct vector<ggl::PrefilteredLine::PrefilteredLineMesh *, geo::StdAllocator<ggl::PrefilteredLine::PrefilteredLineMesh *, ggl::Allocator>> _field1;
    struct PrefilteredLineMesh *_field2;
};

struct MetalDevice;

struct MultiRange<unsigned long> {
    struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long>>> _field1;
};

struct MultiRectRegion {
    struct set<gm::Box<double, 2>, md::MultiRectSetCompare, std::__1::allocator<gm::Box<double, 2>>> _rects;
};

struct Mutex {
    void *mMutex;
};

struct NSDictionary {
    Class _field1;
};

struct NSMutableArray;

struct NavContext {
    CDUnknownFunctionPointerType *_field1;
    struct LabelManager *_field2;
    struct LabelLayoutContext *_field3;
    struct LabelNavLayoutContext *_field4;
};

struct NavCurrentRoadSign {
    CDUnknownFunctionPointerType *_field1;
    struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>> _field2;
    struct shared_ptr<md::LabelStyle> _field3;
    _Bool _field4;
    shared_ptr_c5d816ee _field5;
    struct {
        _Bool _field1;
        _Bool _field2;
        float _field3;
        float _field4;
    } _field6;
    struct unique_ptr<md::NavLabelPart, std::__1::default_delete<md::NavLabelPart>> _field7;
    Mercator2_57ec32b6 _field8;
    shared_ptr_2fc78ff4 _field9;
    Matrix_8746f91e _field10;
    Matrix_8746f91e _field11;
    Box_3fb92e00 _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    float _field16;
    _Bool _field17;
    _Bool _field18;
    float _field19;
    float _field20;
};

struct NavLabel;

struct NavLabelPart;

struct NavigationPuck {
    struct CPuckStyleInfo *_field1;
    Coordinate3D_bc242218 _field2;
    Unit_3d259e8a _field3;
    float _field4;
    float _field5;
    int _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
};

struct OGLContext;

struct OGLDevice;

struct Pass;

struct PatternedBasePipelineSetup;

struct PatternedBasePipelineState;

struct PatternedBatch;

struct PatternedLayer {
    CDUnknownFunctionPointerType *_field1;
    struct vector<md::PatternedBatch *, std::__1::allocator<md::PatternedBatch *>> _field2;
    struct vector<ggl::PatternedRibbon::BaseMesh *, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *>> _field3;
    struct RenderState *_field4[4];
    shared_ptr_696716c4 _field5;
    unsigned long long _field6;
    struct PatternedSharedResources *_field7;
};

struct PatternedLineSetup {
    struct shared_ptr<ggl::TransitLineRibbon::PatternedBasePipelineSetup> _field1;
    struct shared_ptr<md::DashTexture> _field2;
};

struct PatternedSharedResources;

struct PerspectiveView<double> {
    RigidTransform_271c3a39 _transform;
    Matrix_08d701e4 _projectionMatrix;
    Matrix_08d701e4 _inverseProjection;
    double _ndcZNear;
    struct ViewSize _size;
    int _type;
    double _verticalFOV;
    double _near;
    double _far;
};

struct PilledTrafficBatch;

struct PilledTrafficLayer {
    CDUnknownFunctionPointerType *_field1;
    struct vector<md::PilledTrafficBatch *, std::__1::allocator<md::PilledTrafficBatch *>> _field2;
    struct vector<ggl::OptimizedTraffic::BaseMesh *, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *>> _field3;
    struct RenderState *_field4[1];
    shared_ptr_696716c4 _field5;
    unsigned long long _field6;
    struct TrafficSharedResources *_field7;
};

struct PipelineDataCReflection;

struct PipelineSetup;

struct PipelineState;

struct Polygon2<double> {
    vector_554e3200 _field1;
};

struct PolygonRouteAttributes {
    unsigned int routeSignificance;
    unsigned char routeProximity;
    _Bool hasRouteSignificance;
};

struct PolygonSection {
    Matrix_8746f91e *_field1;
    Matrix_8746f91e *_field2;
    Matrix_8746f91e *_field3;
    _Bool *_field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    struct vector<unsigned int, std::__1::allocator<unsigned int>> _field8;
    float _field9;
};

struct PolylineCoordinate {
    unsigned int index;
    float offset;
};

struct Pos2DUVPipelineSetup;

struct Pos2DUVPipelineState;

struct PrefilteredLineMesh;

struct Quaternion<double> {
    Matrix_6e1d3589 _imaginary;
    double _scalar;
};

struct QueryOverrides {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    unsigned char _field8;
    struct DisplayStyle _field9;
    unsigned char _field10;
    _Bool _field11;
    unsigned char _field12;
    basic_string_23d93216 _field13;
    _Bool _field14;
};

struct Range<float> {
    float _field1;
    float _field2;
};

struct Range<unsigned int>;

struct Range<unsigned long> {
    unsigned long long _min;
    unsigned long long _max;
};

struct RasterOverlayData;

struct RasterizerState {
    int _field1;
    int _field2;
    unsigned int _field3;
    Box_55c4a776 _field4;
};

struct RealisticRenderer {
    CDUnknownFunctionPointerType *_field1;
    shared_ptr_e963992e _field2;
    struct unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue>> _field3;
    struct RenderLayer *_field4[28];
    struct RenderLayer *_field5[66];
    struct RunLoopController *_field6;
    struct MapEngine *_field7;
    id _field8;
    struct Device *_field9;
    struct GlobeView *_field10;
    struct Context *_field11;
    struct StencilManager *_field12;
    struct GlobeDispatch *_field13;
    struct CullingNode *_field14;
    struct GlobeTileRenderManager *_field15;
    struct TexturePager *_field16;
    struct shared_ptr<md::GlobeOverlayContainer> _field17;
    struct shared_ptr<ggl::FlyoverLibrary> _field18;
    id _field19;
};

struct RenderBuffer;

struct RenderItem {
    CDUnknownFunctionPointerType *_vptr$RenderItem;
    char *_name;
    struct RenderState *_renderState;
    struct PipelineSetup *_pipelineSetup;
    unsigned int _stencilRefValue;
    unsigned long long _renderOrder;
    float _lineWidth;
    struct Mesh *_mesh;
    struct Range<unsigned long> _range;
    struct Range<unsigned long> *_ranges;
    unsigned long long _rangeCount;
};

struct RenderLayer;

struct RenderResource;

struct RenderResourceFences;

struct RenderState {
    CDUnknownFunctionPointerType *_field1;
    struct ResourceManager *_field2;
    struct RenderResource *_field3;
    struct DepthState _field4;
    struct StencilState _field5;
    struct RasterizerState _field6;
    _Bool _field7;
};

struct RenderTarget {
    CDUnknownFunctionPointerType *_field1;
    struct ResourceManager *_field2;
    struct RenderResource *_field3;
    CDUnknownFunctionPointerType *_field4;
    char *_field5;
    struct RenderTargetFormat _field6;
    struct Texture *_field7[4];
    struct Texture *_field8[4];
    struct Texture *_field9;
    unsigned int _field10;
    unsigned int _field11;
    _Bool _field12;
    _Bool _field13;
};

struct RenderTargetFormat {
    int colorFormats[4];
    unsigned long long colorFormatsCount;
    unsigned int samples;
    int depthStencilFormat;
};

struct RenderTransaction;

struct ResourceAccessor {
    CDUnknownFunctionPointerType *_field1;
};

struct ResourceInfo;

struct ResourceManager;

struct RibbonBatch<md::Ribbons::TransitRibbonDescriptor>;

struct RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>;

struct RibbonLayer<md::Ribbons::TransitRibbonDescriptor> {
    CDUnknownFunctionPointerType *_field1;
    struct vector<md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>*, std::__1::allocator<md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>*>> _field2;
    struct vector<ggl::TransitLineRibbon::BaseMesh *, std::__1::allocator<ggl::TransitLineRibbon::BaseMesh *>> _field3;
    struct RenderState *_field4[2];
};

struct RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor> {
    CDUnknownFunctionPointerType *_field1;
    struct vector<md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>*, std::__1::allocator<md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>*>> _field2;
    struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *>> _field3;
    struct RenderState *_field4[2];
};

struct RigidTransform<double> {
    Quaternion_febf9140 _rotation;
    Matrix_6e1d3589 _translation;
};

struct RoadBatch;

struct RoadLayer {
    CDUnknownFunctionPointerType *_field1;
    struct vector<md::RoadBatch *, std::__1::allocator<md::RoadBatch *>> _field2;
    struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *>> _field3;
    struct RenderState *_field4[8];
    shared_ptr_696716c4 _field5;
    unsigned long long _field6;
    struct RoadSharedResources *_field7;
};

struct RoadSharedResources;

struct RoadSignColoring {
    _Bool _hasFillColor;
    _Bool _hasStrokeColor;
    _Bool _hasShadowColor;
    _Bool _hasTextColor;
    struct array<double, 4> _fillColorComponents;
    struct array<double, 4> _strokeColorComponents;
    struct array<double, 4> _shadowColorComponents;
    struct array<double, 4> _textColorComponents;
};

struct RoadSignGeneratedMetrics {
    struct RoadSignPartMetrics _leftRoadSignPartMetrics;
    struct RoadSignPartMetrics _rightRoadSignPartMetrics;
    struct RoadSignPartMetrics _stretchedRoadSignPartMetrics;
    struct RoadSignPartMetrics _middleRoadSignPartMetrics;
    _Bool _hasMiddleSignPart;
    struct CGSize _imageSize;
    struct CGRect _signBaseRect;
    struct CGRect _glyphRect;
    double _stretchedRoadSignPartWidth;
    struct CGPoint _arrowTipPosition;
    struct CGPoint _textPosition;
    struct CGRect _textBounds;
    struct CGRect _leftPartRect;
    struct CGRect _rightPartRect;
    struct CGRect _stretchedPartRect;
    struct CGRect _middlePartRect;
    struct CGRect _middleLeftStretchedPartRect;
    struct CGRect _middleRightStretchedPartRect;
};

struct RoadSignMetrics {
    unsigned char _orientation;
    double _scale;
    double _contentScale;
    double _arrowWeight;
    double _arrowLength;
    struct CGSize _shadowOffset;
    double _shadowRadius;
    double _strokeWeight;
    double _signHeight;
    double _signMargin;
    double _horizontalMargin;
    double _verticalMargin;
    double _cornerRadius;
    struct CGSize _glyphSize;
};

struct RoadSignPartMetrics {
    unsigned char _type;
    struct CGSize _imageSize;
    struct CGRect _signBaseRect;
    double _topEmptySpaceHeight;
    double _bottomEmptySpaceHeight;
    double _leftEmptySpaceWidth;
    double _rightEmptySpaceWidth;
    double _outsideImagePathExtension;
    _Bool _hasArrows;
    struct CGPoint _arrowWingMin;
    struct CGPoint _arrowWingMax;
    struct CGPoint _arrowTip;
};

struct RoadSignTextMetrics {
    double _scale;
    double _contentScale;
    double _horizontalMargin;
    double _verticalMargin;
    double _verticalOffset;
    double _textSize;
    struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>> _fontFamily;
    double _textDrawWidth;
    double _textWrapWidth;
};

struct RouteContextChangeObserver {
    CDUnknownFunctionPointerType *_field1;
};

struct RouteJunctionInfo;

struct RouteSegment;

struct RunLoopController {
    struct MapEngine *_field1;
};

struct SamplerState;

struct ShaderEntry;

struct ShaderLibraryData;

struct ShaderLibraryDescriptor;

struct SharedDeviceResources;

struct SolidTrafficBatch;

struct SolidTrafficLayer {
    CDUnknownFunctionPointerType *_field1;
    struct vector<md::SolidTrafficBatch *, std::__1::allocator<md::SolidTrafficBatch *>> _field2;
    struct vector<ggl::TrafficBase::BaseMesh *, std::__1::allocator<ggl::TrafficBase::BaseMesh *>> _field3;
    struct RenderState *_field4[2];
    shared_ptr_696716c4 _field5;
    unsigned long long _field6;
    struct TrafficSharedResources *_field7;
};

struct Spring<double, 1, md::SpringType::Angular> {
    double _position;
    double _velocity;
    double _restingPosition;
    double _kSpring;
    double _kDamper;
};

struct Spring<double, 1, md::SpringType::Linear> {
    double _position;
    double _velocity;
    double _restingPosition;
    double _kSpring;
    double _kDamper;
};

struct Spring<double, 2, md::SpringType::Linear> {
    Matrix_2bdd42a3 _position;
    Matrix_2bdd42a3 _velocity;
    Matrix_2bdd42a3 _restingPosition;
    double _kSpring;
    double _kDamper;
};

struct StandardLibrary {
    CDUnknownFunctionPointerType *_field1;
    struct ResourceManager *_field2;
    struct RenderResource *_field3;
    struct ShaderLibraryDescriptor *_field4;
    struct vector<ggl::ShaderLibrary::FunctionEntry, geo::StdAllocator<ggl::ShaderLibrary::FunctionEntry, ggl::Allocator>> _field5;
    struct vector<ggl::ShaderLibrary::ShaderEntry, geo::StdAllocator<ggl::ShaderLibrary::ShaderEntry, ggl::Allocator>> _field6;
    struct vector<ggl::ShaderLibrary::ComputeShaderEntry, geo::StdAllocator<ggl::ShaderLibrary::ComputeShaderEntry, ggl::Allocator>> _field7;
    struct vector<std::__1::shared_ptr<ggl::Shader>, geo::StdAllocator<std::__1::shared_ptr<ggl::Shader>, ggl::Allocator>> _field8;
    struct shared_ptr<ggl::ShaderLibraryData> _field9;
};

struct StdAllocator<LabelNavJunctionInfo, lhp::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<RouteJunctionInfo, lhp::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<RouteSegment, lhp::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<VKLabelNavRoadLabel *, lhp::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<char, gss::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<char, lhp::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, lhp::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<ggl::BuildingFacade::BuildingMesh *, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<ggl::BuildingPointyRoof::BuildingMesh *, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<ggl::CommandBuffer *, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<ggl::ComputeQueue *, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<ggl::ConstantDataElement, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<ggl::PrefilteredLine::PrefilteredLineMesh *, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<ggl::ShaderLibrary::ComputeShaderEntry, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<ggl::ShaderLibrary::FunctionEntry, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<ggl::ShaderLibrary::ShaderEntry, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<ggl::Texture *, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<gm::Matrix<double, 2, 1>, lhp::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<gss::FeatureAttributePair, gss::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<md::IconImage::IconLayer, lhp::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>, lhp::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>, lhp::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>, lhp::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>, lhp::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>*, lhp::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*, lhp::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>*, lhp::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>*, lhp::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, void *>, lhp::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, void *>, lhp::Allocator> {
    struct Allocator *_allocator;
};

struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, void *>, lhp::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>>, void *>, lhp::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::__tree_node<unsigned long long, void *>, lhp::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::shared_ptr<ggl::DebugRenderer>, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::shared_ptr<ggl::Shader>, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::shared_ptr<ggl::VertexData>, ggl::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::shared_ptr<md::LabelCreateExternalIconRequest>, lhp::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::shared_ptr<md::LabelExternalPointFeature>, lhp::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>, lhp::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::shared_ptr<md::LabelFeature>, lhp::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::shared_ptr<md::LabelMapTile>, lhp::Allocator> {
    struct Allocator *_field1;
};

struct StdAllocator<std::__1::shared_ptr<md::NavLabel>, lhp::Allocator> {
    struct Allocator *_allocator;
};

struct StencilManager {
    unsigned char _field1;
    unsigned char _field2;
    unsigned char _field3;
    struct ClearItem _field4;
};

struct StencilState {
    int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
};

struct String {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> _field1;
};

struct StrokeBufferSizing {
    unsigned long long _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
};

struct Style {
    struct optional<gss::IconStyle> _iconStyle;
    struct vector<md::IconImage::IconLayer, geo::StdAllocator<md::IconImage::IconLayer, lhp::Allocator>> _iconLayers;
    float _scale;
    float _contentScale;
    float _fillWeight;
    float _strokeWeight;
    float _shadowWeight;
    float _cornerRadius;
    Matrix_8746f91e _glyphMargin;
    Matrix_8746f91e _shadowOffset;
    FixedPointVector_f041f768 _fillColor;
    FixedPointVector_f041f768 _strokeColor;
    FixedPointVector_f041f768 _shadowColor;
    FixedPointVector_f041f768 _glyphColor;
    FixedPointVector_f041f768 _gradientTop;
    FixedPointVector_f041f768 _gradientBottom;
    FixedPointVector_f041f768 _overlayColor;
    unsigned char _glyphBlendMode;
    unsigned char _glyphStyle;
    struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>> _shieldID;
};

struct StyleSheet<gss::PropertyID>;

struct StyleTexture<md::TransitLineSegment::StylePixel>;

struct StylesheetManager<gss::PropertyID>;

struct StylesheetManager<gss::ScenePropertyID>;

struct StylesheetQuery<gss::PropertyID>;

struct StylesheetVendor;

struct TaskContext {
    id _field1;
    id _field2;
    struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> _field3;
    id _field4;
    struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> _field5;
    struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> _field6;
    struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> _field7;
    struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> _field8;
    struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> _field9;
};

struct TaskQueue {
    _Bool _field1;
    id _field2;
    _Bool _field3;
    id _field4;
    unsigned char _field5;
};

struct TexelRun {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
};

struct Texture {
    CDUnknownFunctionPointerType *_field1;
    struct ResourceManager *_field2;
    struct RenderResource *_field3;
    CDUnknownFunctionPointerType *_field4;
    char *_field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
};

struct Texture2D {
    CDUnknownFunctionPointerType *_field1;
    struct ResourceManager *_field2;
    struct RenderResource *_field3;
    CDUnknownFunctionPointerType *_field4;
    char *_field5;
    int _field6;
    int _field7;
    int _field8;
    int _field9;
    _Bool _field10;
    unsigned int _field11;
    struct shared_ptr<const ggl::TextureDataAbstract> _field12;
    _Bool _field13;
    _Bool _field14;
    unsigned int _field15;
    unsigned int _field16;
    _Bool _field17;
    shared_ptr_cedd5232 _field18;
};

struct TextureData2D;

struct TextureDataAbstract;

struct TexturePager;

struct TileExclusionArea;

struct TileSelectionProfile;

struct TileSelector;

struct TrafficDynamicTile;

struct TrafficMeshStyle {
    int _style[4];
};

struct TrafficSegment {
    unsigned int _field1;
    unsigned char _field2;
};

struct TrafficSegmentsAlongRoute {
    struct vector<md::TrafficSegment, std::__1::allocator<md::TrafficSegment>> _field1;
};

struct TrafficSharedPipelineStates {
    struct shared_ptr<ggl::SolidTraffic::BasePipelineState> _field1;
    struct shared_ptr<ggl::TrafficGlow::BasePipelineState> _field2;
    struct shared_ptr<ggl::OptimizedTraffic::BasePipelineState> _field3;
};

struct TrafficSharedRenderStates {
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field1;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field2;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field3;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field4;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field5;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field6;
};

struct TrafficSharedResources {
    struct TrafficSharedPipelineStates _field1;
    struct TrafficSharedRenderStates _field2;
    struct IsoAlphaAtlas *_field3;
};

struct TrafficSkeletonTile;

struct TrafficStream {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    float _field4;
    struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D>> _field5;
    float _field6;
    struct TexelRun _field7;
    struct unordered_map<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun, md::TrafficStream::SectionKeyHash, std::__1::equal_to<md::TrafficStream::SectionKey>, std::__1::allocator<std::__1::pair<const md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>>> _field8;
};

struct TransitInterTileMediator;

struct TransitItemMarker;

struct TransitJunctionManager;

struct TransitLine;

struct TransitLineSharedResources {
    struct shared_ptr<ggl::TransitLineRibbon::BasePipelineState> _field1;
    struct shared_ptr<ggl::TransitLineRibbon::PatternedBasePipelineState> _field2;
    struct shared_ptr<ggl::SolidRibbon::PipelineState> _field3;
};

struct TransitLink;

struct TransitNodeFeaturePool {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    struct vector<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> _field3;
    struct vector<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> _field4;
    struct fast_shared_ptr<md::unsynchronized_weak_interface_ptr<md::TransitNodeFeaturePool>, std::allocator> _field5;
    struct LabelExternalObjectsModerator *_field6;
    struct unordered_map<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>>> _field7;
    struct unordered_map<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>>> _field8;
    struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> _field9;
    struct unique_ptr<md::TransitNodeTextureAtlas, std::__1::default_delete<md::TransitNodeTextureAtlas>> _field10;
    struct unique_ptr<md::TransitNodeTextureAtlas, std::__1::default_delete<md::TransitNodeTextureAtlas>> _field11;
    struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>> _field12[4];
    struct unique_ptr<ggl::TransitNode::BaseMesh, std::__1::default_delete<ggl::TransitNode::BaseMesh>> _field13[4];
    struct shared_ptr<ggl::ConstantDataTyped<ggl::TransitNode::Settings>> _field14;
    struct unique_ptr<ggl::TransitNodeColorized::BasePipelineSetup, std::__1::default_delete<ggl::TransitNodeColorized::BasePipelineSetup>> _field15;
    struct unique_ptr<ggl::TransitNodeRGB::BasePipelineSetup, std::__1::default_delete<ggl::TransitNodeRGB::BasePipelineSetup>> _field16;
    struct shared_ptr<ggl::IndexDataTyped<unsigned short>> _field17;
    struct shared_ptr<ggl::IndexDataTyped<unsigned short>> _field18;
    float _field19;
    struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field20;
};

struct TransitNodeTextureAtlas;

struct Unit<DegreeUnitDescription, double> {
    double _value;
};

struct Unit<MeterUnitDescription, double> {
    double _value;
};

struct Unit<RadianUnitDescription, double> {
    double _value;
};

struct VKCacheKey {
    unsigned int a;
    unsigned int b;
    unsigned int c;
    unsigned int d;
};

struct VKCameraState {
    RigidTransform_271c3a39 transform;
    double aspectRatio;
    double verticalFieldOfView;
    double horizontalOffset;
};

struct VKEdgeInsets {
    float top;
    float left;
    float bottom;
    float right;
};

struct VKFootprintConvexHull_struct {
    int edgeCount;
    Matrix_6e1d3589 edgeOrigin[6];
    Matrix_6e1d3589 edgeNormal[6];
};

struct VKGlobeRouteSplit {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct VKGlobeStylesheet;

struct VKGuidanceManeuverArrowMetrics {
    struct CGSize _field1;
    double _field2;
    double _field3;
    double _field4;
    struct CGSize _field5;
    double _field6;
    double _field7;
    double _field8;
    unsigned char _field9;
    double _field10;
    double _field11;
    double _field12;
    double _field13;
    double _field14;
    double _field15;
    double _field16;
    double _field17;
    double _field18;
    double _field19;
    double _field20;
    double _field21;
    double _field22;
    double _field23;
    double _field24;
    double _field25;
    _Bool _field26;
    double _field27;
    double _field28;
    double _field29;
    _Bool _field30;
    _Bool _field31;
};

struct VKIconStyleDescriptor {
    unsigned int _field1;
    float _field2;
    basic_string_23d93216 _field3;
    struct Style _field4;
    struct ExtraStyle _field5;
};

struct VKLabelNavArtworkCache {
    struct unique_ptr<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long>>, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long>>>> _field1;
    struct unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long>>, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long>>>> _field2;
    struct unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long>>, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long>>>> _field3;
    struct CGColor *_field4;
    struct CGColor *_field5;
    struct VKGuidanceManeuverArrowMetrics _field6;
};

struct VKLabelNavRouteRoadEdge {
    struct PolylineCoordinate _field1;
    struct PolylineCoordinate _field2;
    CDStruct_183601bc *_field3;
};

struct VKPerformanceTestResult_struct {
    char *_field1;
    float _field2[5];
};

struct VKRequestKey {
    struct {
        struct {
            double _field1;
            double _field2;
        } _field1;
        struct {
            double _field1;
            double _field2;
        } _field2;
    } _field1;
    long long _field2;
    struct CGSize _field3;
    id _field4;
    unsigned short _field5;
};

struct VKTileKey {
    unsigned int z;
    int x;
    int y;
    unsigned int pointSize;
};

struct VehicleState {
    _Bool _isParked;
};

struct Venue {
    unsigned long long _field1;
    unsigned long long _field2;
    struct vector<md::VenueBuilding, std::__1::allocator<md::VenueBuilding>> _field3;
    struct Polygon2<double> _field4;
    struct ConvexHull2<double> _field5;
    Mercator2_57ec32b6 _field6;
    basic_string_23d93216 _field7;
    basic_string_23d93216 _field8;
    struct optional<std::__1::basic_string<char>> _field9;
    struct optional<std::__1::basic_string<char>> _field10;
};

struct VenueBuilding {
    struct vector<md::VenueLevel, std::__1::allocator<md::VenueLevel>> _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    short _field6;
    Matrix_2bdd42a3 _field7;
    struct ConvexHull2<double> _field8;
};

struct VenueBuildingFeatureMarker;

struct VenueFeatureMarker;

struct VenueFloorGroup;

struct VenueLevel;

struct VenueLogic {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    unsigned short _field3;
    struct mutex _field4;
    struct vector<std::__1::shared_ptr<const md::Venue>, std::__1::allocator<std::__1::shared_ptr<const md::Venue>>> _field5;
    struct VenueLogicContext _field6;
    struct Venue *_field7;
    struct VenueBuilding *_field8;
    double _field9;
    unsigned long long _field10;
    struct unordered_map<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>>> _field11;
    struct VenueLogicDelegate *_field12;
    struct _retain_ptr<VKTimedAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field13;
    struct _retain_ptr<VKTimedAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> _field14;
    _Bool _field15;
    float _field16;
};

struct VenueLogicContext {
    CDUnknownFunctionPointerType *_field1;
    struct unordered_map<unsigned long long, std::__1::shared_ptr<const md::Venue>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<const md::Venue>>>> _field2;
    struct unordered_map<unsigned long long, short, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, short>>> _field3;
    unordered_set_bb7a56cc _field4;
    struct vector<unsigned long long, std::__1::allocator<unsigned long long>> _field5;
    struct Venue *_field6;
    float _field7;
    float _field8;
    _Bool _field9;
};

struct VenueLogicDelegate;

struct View;

struct View<double> {
    RigidTransform_271c3a39 _field1;
    Matrix_08d701e4 _field2;
    Matrix_08d701e4 _field3;
    double _field4;
    struct ViewSize _field5;
    int _field6;
};

struct ViewSize {
    unsigned short width;
    unsigned short height;
};

struct ViewTransform;

struct Viewport;

struct YFlipPass;

struct ZRange {
    unsigned char _field1;
    unsigned char _field2;
};

struct ZoomRange {
    float min;
    float max;
};

struct _GEOGenericContainer<md::GenericShieldCacheKey, VKShieldArtwork *, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> {
    struct mutex _lock;
    struct list<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>>> _list;
    struct unordered_map<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> _map;
    unsigned long long _maxCapacity;
    unsigned long long _maxCost;
    unsigned long long _currentCost;
    unsigned long long _currentCount;
};

struct _GEOGenericContainer<md::IconCacheKey, id, std::__1::hash<md::IconCacheKey>, std::__1::equal_to<md::IconCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> {
    struct mutex _lock;
    struct list<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>>> _list;
    struct unordered_map<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>, std::__1::hash<md::IconCacheKey>, std::__1::equal_to<md::IconCacheKey>, std::__1::allocator<std::__1::pair<const md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>>> _map;
    unsigned long long _maxCapacity;
    unsigned long long _maxCost;
    unsigned long long _currentCost;
    unsigned long long _currentCount;
};

struct _GEOGenericContainer<md::ShieldCacheKey, VKShieldArtwork *, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> {
    struct mutex _lock;
    struct list<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>>> _list;
    struct unordered_map<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> _map;
    unsigned long long _maxCapacity;
    unsigned long long _maxCost;
    unsigned long long _currentCost;
    unsigned long long _currentCount;
};

struct _GEOTileKey {
    unsigned int z:6;
    unsigned int x:26;
    unsigned int y:26;
    unsigned int type:6;
    unsigned int pixelSize:8;
    unsigned int textScale:8;
    unsigned int provider:8;
    unsigned int expires:1;
    unsigned int reserved1:7;
    unsigned char reserved2[4];
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
    struct __rep __value_;
};

struct __hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *>*> *_field1;
};

struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> *__next_;
};

struct __list_node_base<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> {
    struct __list_node_base<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> *__prev_;
    struct __list_node_base<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> *__next_;
};

struct __list_node_base<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> {
    struct __list_node_base<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> *__prev_;
    struct __list_node_base<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> *__next_;
};

struct __list_node_base<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> {
    struct __list_node_base<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> *__prev_;
    struct __list_node_base<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> *__next_;
};

struct __list_node_base<md::TransitDisplayConnection, void *> {
    struct __list_node_base<md::TransitDisplayConnection, void *> *__prev_;
    struct __list_node_base<md::TransitDisplayConnection, void *> *__next_;
};

struct __rep {
    union {
        struct __long {
            unsigned long long __cap_;
            unsigned long long __size_;
            char *__data_;
        } __l;
        struct __short {
            union {
                unsigned char __size_;
                char __lx;
            } ;
            char __data_[23];
        } __s;
        struct __raw {
            unsigned long long __words[3];
        } __r;
    } ;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct _fast_shared_ptr_control;

struct _release_objc;

struct _retain_objc;

struct _retain_ptr<CGImage *, geo::_retain_cf<CGImage *>, geo::_release_cf, geo::_hash_cf, geo::_equal_cf> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    struct CGImage *_obj;
    struct _retain_cf<CGImage *> _retain;
    struct _release_cf _release;
};

struct _retain_ptr<GEOResourceManifestConfiguration *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct _retain_objc _field3;
    struct _release_objc _field4;
};

struct _retain_ptr<VKLabelNavRoadLabel *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct _retain_objc _field3;
    struct _release_objc _field4;
};

struct _retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>;

struct _retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>;

struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    VKRouteContext *_obj;
    struct _retain_objc _retain;
    struct _release_objc _release;
};

struct _retain_ptr<VKSharedResources *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    VKSharedResources *_obj;
    struct _retain_objc _retain;
    struct _release_objc _release;
};

struct _retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>;

struct _retain_ptr<VKTimedAnimation *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct _retain_objc _field3;
    struct _release_objc _field4;
};

struct _retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>;

struct _retain_ptr<id<VKCustomFeatureAnnotation>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct _retain_objc _field3;
    struct _release_objc _field4;
};

struct _retain_ptr<id<VKCustomFeatureDataSource>, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_vptr$_retain_ptr;
    id _obj;
    struct _retain_objc _retain;
    struct _release_objc _release;
};

struct array<double, 4> {
    double __elems_[4];
};

struct array<gm::Matrix<double, 2, 1>, 2> {
    Matrix_2bdd42a3 _field1[2];
};

struct array<std::__1::unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext>>, 4> {
    struct unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext>> _field1[4];
};

struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, gss::Allocator>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, gss::Allocator>>::__rep, geo::StdAllocator<char, gss::Allocator>> {
        struct __rep _field1;
        struct StdAllocator<char, gss::Allocator> _field2;
    } _field1;
};

struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>::__rep, geo::StdAllocator<char, lhp::Allocator>> {
        struct __rep __value_;
        struct StdAllocator<char, lhp::Allocator> __value_;
    } __r_;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> __r_;
};

struct deque<std::__1::function<void ()>, std::__1::allocator<std::__1::function<void ()>>> {
    struct __split_buffer<std::__1::function<void ()>*, std::__1::allocator<std::__1::function<void ()>*>> {
        function_30b369b8 **__first_;
        function_30b369b8 **__begin_;
        function_30b369b8 **__end_;
        struct __compressed_pair<std::__1::function<void ()>**, std::__1::allocator<std::__1::function<void ()>*>> {
            function_30b369b8 **__value_;
        } __end_cap_;
    } __map_;
    unsigned long long __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::function<void ()>>> {
        unsigned long long __value_;
    } __size_;
};

struct fast_shared_ptr<md::RouteLineSection, std::allocator> {
    struct _fast_shared_ptr_control *_control;
};

struct fast_shared_ptr<md::unsynchronized_weak_interface_ptr<md::TransitNodeFeaturePool>, std::allocator> {
    struct _fast_shared_ptr_control *_field1;
};

struct function<bool (unsigned long long)> {
    struct type _field1;
    struct __base<bool (unsigned long long)> *_field2;
};

struct function<void ()> {
    struct type _field1;
    struct __base<void ()> *_field2;
};

struct list<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>>> {
    struct __list_node_base<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct list<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>>> {
    struct __list_node_base<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct list<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>>> {
    struct __list_node_base<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct list<md::TransitDisplayConnection, std::__1::allocator<md::TransitDisplayConnection>> {
    struct __list_node_base<md::TransitDisplayConnection, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::TransitDisplayConnection, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
};

struct map<PatternedLineKey, PatternedLineSetup, std::__1::less<PatternedLineKey>, std::__1::allocator<std::__1::pair<const PatternedLineKey, PatternedLineSetup>>> {
    struct __tree<std::__1::__value_type<PatternedLineKey, PatternedLineSetup>, std::__1::__map_value_compare<PatternedLineKey, std::__1::__value_type<PatternedLineKey, PatternedLineSetup>, std::__1::less<PatternedLineKey>, true>, std::__1::allocator<std::__1::__value_type<PatternedLineKey, PatternedLineSetup>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PatternedLineKey, PatternedLineSetup>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<PatternedLineKey, std::__1::__value_type<PatternedLineKey, PatternedLineSetup>, std::__1::less<PatternedLineKey>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, std::__1::allocator<std::__1::pair<VKPolylineOverlay *const, std::__1::weak_ptr<altitude::RouteLineData>>>> {
    struct __tree<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>, std::__1::less<VKPolylineOverlay *>, true>, std::__1::allocator<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>>, std::__1::less<VKPolylineOverlay *>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<VKTileKey, IncompleteTileData, bool (*)(const VKTileKey &, const VKTileKey &), std::__1::allocator<std::__1::pair<const VKTileKey, IncompleteTileData>>> {
    struct __tree<std::__1::__value_type<VKTileKey, IncompleteTileData>, std::__1::__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, IncompleteTileData>, bool (*)(const VKTileKey &, const VKTileKey &), false>, std::__1::allocator<std::__1::__value_type<VKTileKey, IncompleteTileData>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKTileKey, IncompleteTileData>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, IncompleteTileData>, bool (*)(const VKTileKey &, const VKTileKey &), false>> {
            unsigned long long _field1;
            struct __map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, IncompleteTileData>, bool (*)(const VKTileKey &, const VKTileKey &), false> {
                CDUnknownFunctionPointerType _field1;
            } _field2;
        } _field3;
    } _field1;
};

struct map<VKTileKey, VKTile *, bool (*)(const VKTileKey &, const VKTileKey &), std::__1::allocator<std::__1::pair<const VKTileKey, VKTile *>>> {
    struct __tree<std::__1::__value_type<VKTileKey, VKTile *>, std::__1::__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, VKTile *>, bool (*)(const VKTileKey &, const VKTileKey &), false>, std::__1::allocator<std::__1::__value_type<VKTileKey, VKTile *>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKTileKey, VKTile *>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, VKTile *>, bool (*)(const VKTileKey &, const VKTileKey &), false>> {
            unsigned long long _field1;
            struct __map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, VKTile *>, bool (*)(const VKTileKey &, const VKTileKey &), false> {
                CDUnknownFunctionPointerType _field1;
            } _field2;
        } _field3;
    } _field1;
};

struct map<VKTileKey, geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, bool (*)(const VKTileKey &, const VKTileKey &), std::__1::allocator<std::__1::pair<const VKTileKey, geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>> {
    struct __tree<std::__1::__value_type<VKTileKey, geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, bool (*)(const VKTileKey &, const VKTileKey &), false>, std::__1::allocator<std::__1::__value_type<VKTileKey, geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKTileKey, geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, bool (*)(const VKTileKey &, const VKTileKey &), false>> {
            unsigned long long _field1;
            struct __map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, bool (*)(const VKTileKey &, const VKTileKey &), false> {
                CDUnknownFunctionPointerType _field1;
            } _field2;
        } _field3;
    } _field1;
};

struct map<VKTileKey, md::LabelCustomFeatureProvider::TileInfo, md::LabelCustomFeatureProvider::TileKeyLess, geo::StdAllocator<std::__1::pair<const VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, lhp::Allocator>> {
    struct __tree<std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, std::__1::__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, md::LabelCustomFeatureProvider::TileKeyLess, true>, geo::StdAllocator<std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, lhp::Allocator>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, void *>, lhp::Allocator>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
            struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, void *>, lhp::Allocator> _field2;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKTileKey, std::__1::__value_type<VKTileKey, md::LabelCustomFeatureProvider::TileInfo>, md::LabelCustomFeatureProvider::TileKeyLess, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>>> {
    struct __tree<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, std::__1::__map_value_compare<_GEOTileKey, std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, GEOTileKeyComp, true>, std::__1::allocator<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<_GEOTileKey, std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, GEOTileKeyComp, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>, NSStringMapComparison, geo::StdAllocator<std::__1::pair<const geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, lhp::Allocator>> {
    struct __tree<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, std::__1::__map_value_compare<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, NSStringMapComparison, true>, geo::StdAllocator<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, lhp::Allocator>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, void *>, lhp::Allocator>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
            struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, void *>, lhp::Allocator> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<gss::StylesheetManager<gss::PropertyID>>>, NSStringMapComparison, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo, std::__1::less<id<VKCustomFeatureAnnotation>>, geo::StdAllocator<std::__1::pair<const id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, lhp::Allocator>> {
    struct __tree<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, std::__1::__map_value_compare<id<VKCustomFeatureAnnotation>, std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, std::__1::less<id<VKCustomFeatureAnnotation>>, true>, geo::StdAllocator<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, lhp::Allocator>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, void *>, lhp::Allocator>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
            struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, void *>, lhp::Allocator> _field2;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<id<VKCustomFeatureAnnotation>, std::__1::__value_type<id<VKCustomFeatureAnnotation>, md::LabelCustomFeatureProvider::FeatureInfo>, std::__1::less<id<VKCustomFeatureAnnotation>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<md::Anchor *, float, std::__1::less<md::Anchor *>, std::__1::allocator<std::__1::pair<md::Anchor *const, float>>> {
    struct __tree<std::__1::__value_type<md::Anchor *, float>, std::__1::__map_value_compare<md::Anchor *, std::__1::__value_type<md::Anchor *, float>, std::__1::less<md::Anchor *>, true>, std::__1::allocator<std::__1::__value_type<md::Anchor *, float>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::Anchor *, float>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<md::Anchor *, std::__1::__value_type<md::Anchor *, float>, std::__1::less<md::Anchor *>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>, std::__1::less<md::CommandBufferId>, std::__1::allocator<std::__1::pair<const md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>>> {
    struct __tree<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>, std::__1::less<md::CommandBufferId>, true>, std::__1::allocator<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>>>, std::__1::less<md::CommandBufferId>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>, md::LabelExternalRoadFeatureLess, geo::StdAllocator<std::__1::pair<const std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>>, lhp::Allocator>> {
    struct __tree<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>>, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>>, md::LabelExternalRoadFeatureLess, true>, geo::StdAllocator<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>>, lhp::Allocator>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, geo::StdAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>>, void *>, lhp::Allocator>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
            struct StdAllocator<std::__1::__tree_node<std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>>, void *>, lhp::Allocator> _field2;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::__value_type<std::__1::shared_ptr<md::LabelExternalRoadFeature>, std::__1::shared_ptr<md::RoadLabelFeature>>, md::LabelExternalRoadFeatureLess, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned int, md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>*, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>*>>> {
    struct __tree<std::__1::__value_type<unsigned int, md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>*>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>*>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>*>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>*>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>*>, std::__1::less<unsigned int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct multimap<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection>>>>> {
    struct __tree<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection>>>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection>>>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection>>>, std::__1::less<unsigned int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct mutex {
    struct _opaque_pthread_mutex_t {
        long long __sig;
        char __opaque[56];
    } __m_;
};

struct optional<float> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[4];
        float type;
    } _value;
};

struct optional<gss::IconStyle> {
    _Bool _hasValue;
    ValueUnion_42b55164 _value;
};

struct optional<gss::MapZoomLevel> {
    _Bool _hasValue;
    ValueUnion_42b55164 _value;
};

struct optional<md::MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo>> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[152];
        struct MeshSet<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh, ggl::BuildingFlatStroke::DefaultVbo> type;
    } _value;
};

struct optional<md::MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo>> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[152];
        struct MeshSet<ggl::PolygonBase::CompressedMeshMesh, ggl::PolygonBase::CompressedVbo> type;
    } _value;
};

struct optional<md::MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo>> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[152];
        struct MeshSet<ggl::PolygonCommonStroke::MeshMesh, ggl::PolygonCommonStroke::DefaultVbo> type;
    } _value;
};

struct optional<md::MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo>> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[152];
        struct MeshSet<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh, ggl::Venue3DStroke::HorizontalDefaultVbo> type;
    } _value;
};

struct optional<md::MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo>> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[152];
        struct MeshSet<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh, ggl::Venue3DStroke::VerticalDefaultVbo> type;
    } _value;
};

struct optional<md::MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo>> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[152];
        struct MeshSet<ggl::VenueWall::EndCapMesh, ggl::VenueWall::EndCapVbo> type;
    } _value;
};

struct optional<md::MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo>> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[152];
        struct MeshSet<ggl::VenueWall::MeshMesh, ggl::VenueWall::DefaultVbo> type;
    } _value;
};

struct optional<std::__1::basic_string<char>> {
    _Bool _field1;
    union ValueUnion {
        unsigned char _field1[24];
        basic_string_23d93216 _field2;
    } _field2;
};

struct pair<TransitLineWithLink, float>;

struct pair<VKBuildingHeightMap, unsigned long long>;

struct pair<bool, GEOFeatureStylePair>;

struct pair<unsigned short, unsigned int>;

struct pair<void *, unsigned long> {
    void *_field1;
    unsigned long long _field2;
};

struct read_write_lock {
    struct _opaque_pthread_rwlock_t {
        long long __sig;
        char __opaque[192];
    } _lock;
};

struct set<VKPolylineGroupOverlay *, std::__1::less<VKPolylineGroupOverlay *>, std::__1::allocator<VKPolylineGroupOverlay *>> {
    struct __tree<VKPolylineGroupOverlay *, std::__1::less<VKPolylineGroupOverlay *>, std::__1::allocator<VKPolylineGroupOverlay *>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<VKPolylineGroupOverlay *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<VKPolylineGroupOverlay *>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<geo::_retain_ptr<VKOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::less<geo::_retain_ptr<VKOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<geo::_retain_ptr<VKOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
    struct __tree<geo::_retain_ptr<VKOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::less<geo::_retain_ptr<VKOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<geo::_retain_ptr<VKOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<geo::_retain_ptr<VKOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<geo::_retain_ptr<VKOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::less<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
    struct __tree<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::less<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>, std::__1::allocator<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<gm::Box<double, 2>, md::MultiRectSetCompare, std::__1::allocator<gm::Box<double, 2>>> {
    struct __tree<gm::Box<double, 2>, md::MultiRectSetCompare, std::__1::allocator<gm::Box<double, 2>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<gm::Box<double, 2>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, md::MultiRectSetCompare> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<unsigned long long, std::__1::less<unsigned long long>, geo::StdAllocator<unsigned long long, lhp::Allocator>> {
    struct __tree<unsigned long long, std::__1::less<unsigned long long>, geo::StdAllocator<unsigned long long, lhp::Allocator>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, geo::StdAllocator<std::__1::__tree_node<unsigned long long, void *>, lhp::Allocator>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
            struct StdAllocator<std::__1::__tree_node<unsigned long long, void *>, lhp::Allocator> _field2;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<unsigned long long>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct shared_ptr<altitude::AnchorManager> {
    struct AnchorManager *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<altitude::GeoServicesLoadJob> {
    struct GeoServicesLoadJob *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<bool> {
    _Bool *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const ggl::TextureDataAbstract> {
    struct TextureDataAbstract *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<const md::GenericShieldStyleInfo> {
    struct GenericShieldStyleInfo *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<const md::TransitLineSharedResources> {
    struct TransitLineSharedResources *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const md::Venue>;

struct shared_ptr<ggl::BitmapDataBase> {
    struct BitmapDataBase *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>;

struct shared_ptr<ggl::Clut::Pos2DUVPipelineState> {
    struct Pos2DUVPipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::CommonLibrary> {
    struct CommonLibrary *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::Fog::Skyfog>> {
    struct ConstantDataTyped<ggl::Fog::Skyfog> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>> {
    struct ConstantDataTyped<ggl::Tile::View> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::ConstantDataTyped<ggl::TransitNode::Settings>> {
    struct ConstantDataTyped<ggl::TransitNode::Settings> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::DebugRenderer>;

struct shared_ptr<ggl::Device> {
    struct Device *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::FlyoverLibrary> {
    struct FlyoverLibrary *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::IndexData> {
    struct IndexData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::IndexDataTyped<unsigned short>> {
    struct IndexDataTyped<unsigned short> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::MetalDevice> {
    struct MetalDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::OGLDevice> {
    struct OGLDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::OptimizedTraffic::BasePipelineState> {
    struct BasePipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::PipelineState> {
    struct PipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh>;

struct shared_ptr<ggl::PolygonBase::MeshMesh> {
    struct MeshMesh *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::PolygonCommonStroke::MeshMesh>;

struct shared_ptr<ggl::RenderQueue> {
    struct RenderQueue *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::RenderTransaction> {
    struct RenderTransaction *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::SamplerState> {
    struct SamplerState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::Shader>;

struct shared_ptr<ggl::ShaderLibraryData> {
    struct ShaderLibraryData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::SolidRibbon::PipelineState> {
    struct PipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::SolidTraffic::BasePipelineState> {
    struct BasePipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::StandardLibrary> {
    struct StandardLibrary *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::Texture2D> {
    struct Texture2D *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<ggl::TextureData2D> {
    struct TextureData2D *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::TextureMesh::MeshMesh> {
    struct MeshMesh *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::TextureWithReverseAlpha::Pos2DUVPipelineState> {
    struct Pos2DUVPipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::Textured::Pos2DUVPipelineState> {
    struct Pos2DUVPipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::TrafficGlow::BasePipelineState> {
    struct BasePipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::TransitLineRibbon::BasePipelineState> {
    struct BasePipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::TransitLineRibbon::PatternedBasePipelineSetup> {
    struct PatternedBasePipelineSetup *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::TransitLineRibbon::PatternedBasePipelineState> {
    struct PatternedBasePipelineState *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>;

struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>;

struct shared_ptr<ggl::VenueWall::EndCapMesh>;

struct shared_ptr<ggl::VenueWall::MeshMesh>;

struct shared_ptr<ggl::VertexData>;

struct shared_ptr<gss::CartoStyle<gss::PropertyID>> {
    struct CartoStyle<gss::PropertyID> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<gss::StyleSheet<gss::PropertyID>> {
    struct StyleSheet<gss::PropertyID> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<gss::StylesheetManager<gss::PropertyID>> {
    struct StylesheetManager<gss::PropertyID> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> {
    struct StylesheetManager<gss::ScenePropertyID> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<gss::StylesheetQuery<gss::PropertyID>> {
    struct StylesheetQuery<gss::PropertyID> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::Anchor> {
    struct Anchor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::AnchorContext> {
    struct AnchorContext *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::CMercatorTerrainHeightCache> {
    struct CMercatorTerrainHeightCache *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::CoastlineGroup>;

struct shared_ptr<md::DashTexture> {
    struct DashTexture *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::DataOverrideManager> {
    struct DataOverrideManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::DebugTreeNode> {
    struct DebugTreeNode *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::FeatureMarker> {
    struct FeatureMarker *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::GlobeAdapterData> {
    struct GlobeAdapterData *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::GlobeOverlayContainer> {
    struct GlobeOverlayContainer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelClusterTree> {
    struct LabelClusterTree *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::LabelCreateExternalIconRequest>;

struct shared_ptr<md::LabelExternalPointFeature> {
    struct LabelExternalPointFeature *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelExternalRoadFeature>;

struct shared_ptr<md::LabelFeature>;

struct shared_ptr<md::LabelImageKey> {
    struct LabelImageKey *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::LabelManager> {
    struct LabelManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelMapTile> {
    struct LabelMapTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelMarker> {
    struct LabelMarker *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelScene> {
    struct LabelScene *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::LabelStyle> {
    struct LabelStyle *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelTile> {
    struct LabelTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::LabelTransitRoute> {
    struct LabelTransitRoute *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::LabelTransitRouteLine> {
    struct LabelTransitRouteLine *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::NavCurrentRoadSign> {
    struct NavCurrentRoadSign *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::NavLabel> {
    struct NavLabel *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::ObjectGroup>;

struct shared_ptr<md::RasterOverlayData> {
    struct RasterOverlayData *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::ResourceInfo> {
    struct ResourceInfo *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::StylesheetVendor> {
    struct StylesheetVendor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::TaskContext> {
    struct TaskContext *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::TrafficDynamicTile> {
    struct TrafficDynamicTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::TransitConnectedNode>;

struct shared_ptr<md::TransitInterTileMediator> {
    struct TransitInterTileMediator *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::TransitItemMarker> {
    struct TransitItemMarker *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::TransitNode>;

struct shared_ptr<md::TransitOrphanNode>;

struct shared_ptr<md::TransitParentNode>;

struct shared_ptr<md::VKGlobeStylesheet> {
    struct VKGlobeStylesheet *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<md::Venue>;

struct shared_ptr<md::VenueBuildingFeatureMarker> {
    struct VenueBuildingFeatureMarker *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::VenueFeatureMarker> {
    struct VenueFeatureMarker *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::ViewTransform> {
    struct ViewTransform *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<md::weak_interface_ptr<md::LabelExternalObjectsModerator>> {
    struct weak_interface_ptr<md::LabelExternalObjectsModerator> *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<zilch::TrafficSkeletonTile> {
    struct TrafficSkeletonTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct type {
    unsigned char _field1[32];
};

struct unique_ptr<(anonymous namespace)::CustomLandmarksContainer, std::__1::default_delete<(anonymous namespace)::CustomLandmarksContainer>> {
    struct __compressed_pair<(anonymous namespace)::CustomLandmarksContainer *, std::__1::default_delete<(anonymous namespace)::CustomLandmarksContainer>> {
        struct CustomLandmarksContainer *__value_;
    } __ptr_;
};

struct unique_ptr<(anonymous namespace)::YFlipPass, std::__1::default_delete<(anonymous namespace)::YFlipPass>> {
    struct __compressed_pair<(anonymous namespace)::YFlipPass *, std::__1::default_delete<(anonymous namespace)::YFlipPass>> {
        struct YFlipPass *__value_;
    } __ptr_;
};

struct unique_ptr<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long>>, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long>>>> {
    struct __compressed_pair<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long>>*, std::__1::default_delete<LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long>>>> {
        struct LRUCache<unsigned long, CGImage *, std::__1::hash<unsigned long>> *_field1;
    } _field1;
};

struct unique_ptr<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long>>, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long>>>> {
    struct __compressed_pair<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long>>*, std::__1::default_delete<LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long>>>> {
        struct LRUCache<unsigned long, VKRoadSignArtwork *, std::__1::hash<unsigned long>> *_field1;
    } _field1;
};

struct unique_ptr<geo::TaskQueue, std::__1::default_delete<geo::TaskQueue>> {
    struct __compressed_pair<geo::TaskQueue *, std::__1::default_delete<geo::TaskQueue>> {
        struct TaskQueue *_field1;
    } _field1;
};

struct unique_ptr<ggl::AlphaAtlas, std::__1::default_delete<ggl::AlphaAtlas>> {
    struct __compressed_pair<ggl::AlphaAtlas *, std::__1::default_delete<ggl::AlphaAtlas>> {
        struct AlphaAtlas *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::Clut::Pos2DUVPipelineSetup, std::__1::default_delete<ggl::Clut::Pos2DUVPipelineSetup>> {
    struct __compressed_pair<ggl::Clut::Pos2DUVPipelineSetup *, std::__1::default_delete<ggl::Clut::Pos2DUVPipelineSetup>> {
        struct Pos2DUVPipelineSetup *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>> {
    struct __compressed_pair<ggl::CommandBuffer *, std::__1::default_delete<ggl::CommandBuffer>> {
        struct CommandBuffer *_field1;
    } _field1;
};

struct unique_ptr<ggl::DataWrite<ggl::ColoredText::My>, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My>>> {
    struct __compressed_pair<ggl::DataWrite<ggl::ColoredText::My>*, std::__1::default_delete<ggl::DataWrite<ggl::ColoredText::My>>> {
        struct DataWrite<ggl::ColoredText::My> *_field1;
    } _field1;
};

struct unique_ptr<ggl::Debug::BaseMesh, std::__1::default_delete<ggl::Debug::BaseMesh>> {
    struct __compressed_pair<ggl::Debug::BaseMesh *, std::__1::default_delete<ggl::Debug::BaseMesh>> {
        struct BaseMesh *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::DebugPoints::BaseMesh, std::__1::default_delete<ggl::DebugPoints::BaseMesh>> {
    struct __compressed_pair<ggl::DebugPoints::BaseMesh *, std::__1::default_delete<ggl::DebugPoints::BaseMesh>> {
        struct BaseMesh *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::DistanceAtlas, std::__1::default_delete<ggl::DistanceAtlas>> {
    struct __compressed_pair<ggl::DistanceAtlas *, std::__1::default_delete<ggl::DistanceAtlas>> {
        struct DistanceAtlas *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::IOSurfaceTexture, std::__1::default_delete<ggl::IOSurfaceTexture>> {
    struct __compressed_pair<ggl::IOSurfaceTexture *, std::__1::default_delete<ggl::IOSurfaceTexture>> {
        struct IOSurfaceTexture *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::IsoAlphaAtlas, std::__1::default_delete<ggl::IsoAlphaAtlas>> {
    struct __compressed_pair<ggl::IsoAlphaAtlas *, std::__1::default_delete<ggl::IsoAlphaAtlas>> {
        struct IsoAlphaAtlas *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl>> {
    struct __compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl>> {
        struct LoaderImpl *_field1;
    } _field1;
};

struct unique_ptr<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingFacade::BuildingMesh>>> {
        MeshVendor_04441547 *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>>> {
        MeshVendor_96ac8e76 *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> {
    struct __compressed_pair<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>*, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>>> {
        MeshVendor_b901c95c *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::OGLContext, std::__1::default_delete<ggl::OGLContext>> {
    struct __compressed_pair<ggl::OGLContext *, std::__1::default_delete<ggl::OGLContext>> {
        struct OGLContext *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer>> {
    struct __compressed_pair<ggl::RenderBuffer *, std::__1::default_delete<ggl::RenderBuffer>> {
        struct RenderBuffer *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem>> {
    struct __compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem>> {
        struct RenderItem *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue>> {
    struct __compressed_pair<ggl::RenderQueue *, std::__1::default_delete<ggl::RenderQueue>> {
        struct RenderQueue *_field1;
    } _field1;
};

struct unique_ptr<ggl::RenderResourceFences, std::__1::default_delete<ggl::RenderResourceFences>> {
    struct __compressed_pair<ggl::RenderResourceFences *, std::__1::default_delete<ggl::RenderResourceFences>> {
        struct RenderResourceFences *_field1;
    } _field1;
};

struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState>> {
    struct __compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState>> {
        struct RenderState *_field1;
    } _field1;
};

struct unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget>> {
    struct __compressed_pair<ggl::RenderTarget *, std::__1::default_delete<ggl::RenderTarget>> {
        struct RenderTarget *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::Texture, std::__1::default_delete<ggl::Texture>> {
    struct __compressed_pair<ggl::Texture *, std::__1::default_delete<ggl::Texture>> {
        struct Texture *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D>> {
    struct __compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D>> {
        struct Texture2D *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup, std::__1::default_delete<ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup>> {
    struct __compressed_pair<ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup *, std::__1::default_delete<ggl::TextureWithReverseAlpha::Pos2DUVPipelineSetup>> {
        struct Pos2DUVPipelineSetup *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::Textured::Pos2DUVPipelineSetup, std::__1::default_delete<ggl::Textured::Pos2DUVPipelineSetup>> {
    struct __compressed_pair<ggl::Textured::Pos2DUVPipelineSetup *, std::__1::default_delete<ggl::Textured::Pos2DUVPipelineSetup>> {
        struct Pos2DUVPipelineSetup *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::TransitLineRibbon::BasePipelineSetup, std::__1::default_delete<ggl::TransitLineRibbon::BasePipelineSetup>> {
    struct __compressed_pair<ggl::TransitLineRibbon::BasePipelineSetup *, std::__1::default_delete<ggl::TransitLineRibbon::BasePipelineSetup>> {
        struct BasePipelineSetup *__value_;
    } __ptr_;
};

struct unique_ptr<ggl::TransitNode::BaseMesh, std::__1::default_delete<ggl::TransitNode::BaseMesh>> {
    struct __compressed_pair<ggl::TransitNode::BaseMesh *, std::__1::default_delete<ggl::TransitNode::BaseMesh>> {
        struct BaseMesh *_field1;
    } _field1;
};

struct unique_ptr<ggl::TransitNodeColorized::BasePipelineSetup, std::__1::default_delete<ggl::TransitNodeColorized::BasePipelineSetup>> {
    struct __compressed_pair<ggl::TransitNodeColorized::BasePipelineSetup *, std::__1::default_delete<ggl::TransitNodeColorized::BasePipelineSetup>> {
        struct BasePipelineSetup *_field1;
    } _field1;
};

struct unique_ptr<ggl::TransitNodeRGB::BasePipelineSetup, std::__1::default_delete<ggl::TransitNodeRGB::BasePipelineSetup>> {
    struct __compressed_pair<ggl::TransitNodeRGB::BasePipelineSetup *, std::__1::default_delete<ggl::TransitNodeRGB::BasePipelineSetup>> {
        struct BasePipelineSetup *_field1;
    } _field1;
};

struct unique_ptr<md::CasedTrafficLayer, std::__1::default_delete<md::CasedTrafficLayer>> {
    struct __compressed_pair<md::CasedTrafficLayer *, std::__1::default_delete<md::CasedTrafficLayer>> {
        struct CasedTrafficLayer *__value_;
    } __ptr_;
};

struct unique_ptr<md::DebugConsoleManager, std::__1::default_delete<md::DebugConsoleManager>> {
    struct __compressed_pair<md::DebugConsoleManager *, std::__1::default_delete<md::DebugConsoleManager>> {
        struct DebugConsoleManager *__value_;
    } __ptr_;
};

struct unique_ptr<md::Device, std::__1::default_delete<md::Device>> {
    struct __compressed_pair<md::Device *, std::__1::default_delete<md::Device>> {
        struct Device *__value_;
    } __ptr_;
};

struct unique_ptr<md::FlyoverPolylineOverlayCache, std::__1::default_delete<md::FlyoverPolylineOverlayCache>> {
    struct __compressed_pair<md::FlyoverPolylineOverlayCache *, std::__1::default_delete<md::FlyoverPolylineOverlayCache>> {
        struct FlyoverPolylineOverlayCache *__value_;
    } __ptr_;
};

struct unique_ptr<md::FontManager, std::__1::default_delete<md::FontManager>> {
    struct __compressed_pair<md::FontManager *, std::__1::default_delete<md::FontManager>> {
        struct FontManager *__value_;
    } __ptr_;
};

struct unique_ptr<md::GlobeAdapter, std::__1::default_delete<md::GlobeAdapter>> {
    struct __compressed_pair<md::GlobeAdapter *, std::__1::default_delete<md::GlobeAdapter>> {
        struct GlobeAdapter *__value_;
    } __ptr_;
};

struct unique_ptr<md::IconImage::BalloonMetrics, std::__1::default_delete<md::IconImage::BalloonMetrics>> {
    struct __compressed_pair<md::IconImage::BalloonMetrics *, std::__1::default_delete<md::IconImage::BalloonMetrics>> {
        struct BalloonMetrics *__value_;
    } __ptr_;
};

struct unique_ptr<md::IconImage::CircleMetrics, std::__1::default_delete<md::IconImage::CircleMetrics>> {
    struct __compressed_pair<md::IconImage::CircleMetrics *, std::__1::default_delete<md::IconImage::CircleMetrics>> {
        struct CircleMetrics *__value_;
    } __ptr_;
};

struct unique_ptr<md::LabelClusterProvider, std::__1::default_delete<md::LabelClusterProvider>> {
    struct __compressed_pair<md::LabelClusterProvider *, std::__1::default_delete<md::LabelClusterProvider>> {
        struct LabelClusterProvider *_field1;
    } _field1;
};

struct unique_ptr<md::LabelSettings, std::__1::default_delete<md::LabelSettings>> {
    struct __compressed_pair<md::LabelSettings *, std::__1::default_delete<md::LabelSettings>> {
        struct LabelSettings *_field1;
    } _field1;
};

struct unique_ptr<md::LabelSettingsData, std::__1::default_delete<md::LabelSettingsData>> {
    struct __compressed_pair<md::LabelSettingsData *, std::__1::default_delete<md::LabelSettingsData>> {
        struct LabelSettingsData *_field1;
    } _field1;
};

struct unique_ptr<md::LogicContext, std::__1::default_delete<md::LogicContext>> {
    struct __compressed_pair<md::LogicContext *, std::__1::default_delete<md::LogicContext>> {
        struct LogicContext *_field1;
    } _field1;
};

struct unique_ptr<md::MapEngine, std::__1::default_delete<md::MapEngine>> {
    struct __compressed_pair<md::MapEngine *, std::__1::default_delete<md::MapEngine>> {
        struct MapEngine *__value_;
    } __ptr_;
};

struct unique_ptr<md::NavLabelPart, std::__1::default_delete<md::NavLabelPart>> {
    struct __compressed_pair<md::NavLabelPart *, std::__1::default_delete<md::NavLabelPart>> {
        struct NavLabelPart *_field1;
    } _field1;
};

struct unique_ptr<md::PatternedLayer, std::__1::default_delete<md::PatternedLayer>> {
    struct __compressed_pair<md::PatternedLayer *, std::__1::default_delete<md::PatternedLayer>> {
        struct PatternedLayer *__value_;
    } __ptr_;
};

struct unique_ptr<md::PilledTrafficLayer, std::__1::default_delete<md::PilledTrafficLayer>> {
    struct __compressed_pair<md::PilledTrafficLayer *, std::__1::default_delete<md::PilledTrafficLayer>> {
        struct PilledTrafficLayer *__value_;
    } __ptr_;
};

struct unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue>> {
    struct __compressed_pair<md::RenderQueue *, std::__1::default_delete<md::RenderQueue>> {
        struct RenderQueue *__value_;
    } __ptr_;
};

struct unique_ptr<md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor>, std::__1::default_delete<md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor>>> {
    struct __compressed_pair<md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor>*, std::__1::default_delete<md::Ribbons::RibbonLayer<md::Ribbons::TransitRibbonDescriptor>>> {
        RibbonLayer_abf9b3d8 *__value_;
    } __ptr_;
};

struct unique_ptr<md::Ribbons::RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor>, std::__1::default_delete<md::Ribbons::RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor>>> {
    struct __compressed_pair<md::Ribbons::RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor>*, std::__1::default_delete<md::Ribbons::RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor>>> {
        RibbonLayer_99607768 *__value_;
    } __ptr_;
};

struct unique_ptr<md::RoadLayer, std::__1::default_delete<md::RoadLayer>> {
    struct __compressed_pair<md::RoadLayer *, std::__1::default_delete<md::RoadLayer>> {
        struct RoadLayer *__value_;
    } __ptr_;
};

struct unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources>> {
    struct __compressed_pair<md::SharedDeviceResources *, std::__1::default_delete<md::SharedDeviceResources>> {
        struct SharedDeviceResources *_field1;
    } _field1;
};

struct unique_ptr<md::SolidTrafficLayer, std::__1::default_delete<md::SolidTrafficLayer>> {
    struct __compressed_pair<md::SolidTrafficLayer *, std::__1::default_delete<md::SolidTrafficLayer>> {
        struct SolidTrafficLayer *__value_;
    } __ptr_;
};

struct unique_ptr<md::StyleTexture<md::TransitLineSegment::StylePixel>, std::__1::default_delete<md::StyleTexture<md::TransitLineSegment::StylePixel>>> {
    struct __compressed_pair<md::StyleTexture<md::TransitLineSegment::StylePixel>*, std::__1::default_delete<md::StyleTexture<md::TransitLineSegment::StylePixel>>> {
        struct StyleTexture<md::TransitLineSegment::StylePixel> *__value_;
    } __ptr_;
};

struct unique_ptr<md::TileSelectionProfile, std::__1::default_delete<md::TileSelectionProfile>> {
    struct __compressed_pair<md::TileSelectionProfile *, std::__1::default_delete<md::TileSelectionProfile>> {
        struct TileSelectionProfile *_field1;
    } _field1;
};

struct unique_ptr<md::TileSelector, std::__1::default_delete<md::TileSelector>> {
    struct __compressed_pair<md::TileSelector *, std::__1::default_delete<md::TileSelector>> {
        struct TileSelector *__value_;
    } __ptr_;
};

struct unique_ptr<md::TrafficSharedResources, std::__1::default_delete<md::TrafficSharedResources>> {
    struct __compressed_pair<md::TrafficSharedResources *, std::__1::default_delete<md::TrafficSharedResources>> {
        struct TrafficSharedResources *__value_;
    } __ptr_;
};

struct unique_ptr<md::TrafficStream, std::__1::default_delete<md::TrafficStream>> {
    struct __compressed_pair<md::TrafficStream *, std::__1::default_delete<md::TrafficStream>> {
        struct TrafficStream *__value_;
    } __ptr_;
};

struct unique_ptr<md::TransitJunctionManager, std::__1::default_delete<md::TransitJunctionManager>> {
    struct __compressed_pair<md::TransitJunctionManager *, std::__1::default_delete<md::TransitJunctionManager>> {
        struct TransitJunctionManager *__value_;
    } __ptr_;
};

struct unique_ptr<md::TransitNodeTextureAtlas, std::__1::default_delete<md::TransitNodeTextureAtlas>> {
    struct __compressed_pair<md::TransitNodeTextureAtlas *, std::__1::default_delete<md::TransitNodeTextureAtlas>> {
        struct TransitNodeTextureAtlas *_field1;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>*, lhp::Allocator>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>**, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>*, lhp::Allocator>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*> **_field1;
        struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>*, lhp::Allocator>> {
            struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>*, lhp::Allocator>> {
                unsigned long long _field1;
                struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>*, lhp::Allocator> _field2;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*, lhp::Allocator>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>**, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*, lhp::Allocator>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> **__value_;
        struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*, lhp::Allocator>> {
            struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*, lhp::Allocator>> {
                unsigned long long __value_;
                struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*, lhp::Allocator> __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>*, lhp::Allocator>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>**, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>*, lhp::Allocator>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*> **_field1;
        struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>*, lhp::Allocator>> {
            struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>*, lhp::Allocator>> {
                unsigned long long _field1;
                struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>*, lhp::Allocator> _field2;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>*, lhp::Allocator>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>**, std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>*, lhp::Allocator>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*> **_field1;
        struct __bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>*, lhp::Allocator>> {
            struct __compressed_pair<unsigned long, geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>*, lhp::Allocator>> {
                unsigned long long _field1;
                struct StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>*, lhp::Allocator> _field2;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*>> {
                unsigned long long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>, std::__1::hash<GEOGenericTileType>, std::__1::equal_to<GEOGenericTileType>, std::__1::allocator<std::__1::pair<const GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>>> {
    struct __hash_table<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::__unordered_map_hasher<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::hash<GEOGenericTileType>, true>, std::__1::__unordered_map_equal<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::equal_to<GEOGenericTileType>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::hash<GEOGenericTileType>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>>, std::__1::equal_to<GEOGenericTileType>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>, std::__1::hash<const GEOTransitLink *>, std::__1::equal_to<const GEOTransitLink *>, geo::StdAllocator<std::__1::pair<const GEOTransitLink *const, std::__1::weak_ptr<md::LabelExternalTransitLink>>, lhp::Allocator>> {
    struct __hash_table<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, std::__1::__unordered_map_hasher<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, std::__1::hash<const GEOTransitLink *>, true>, std::__1::__unordered_map_equal<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, std::__1::equal_to<const GEOTransitLink *>, true>, geo::StdAllocator<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, lhp::Allocator>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>*, lhp::Allocator>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*>, geo::StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>, lhp::Allocator>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>*> _field1;
            struct StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, void *>, lhp::Allocator> _field2;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, std::__1::hash<const GEOTransitLink *>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<const GEOTransitLink *, std::__1::__hash_value_type<const GEOTransitLink *, std::__1::weak_ptr<md::LabelExternalTransitLink>>, std::__1::equal_to<const GEOTransitLink *>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>, md::DashTextureCache::KeyHasher, std::__1::equal_to<md::DashTextureCache::Key>, std::__1::allocator<std::__1::pair<const md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, std::__1::__unordered_map_hasher<md::DashTextureCache::Key, std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, md::DashTextureCache::KeyHasher, true>, std::__1::__unordered_map_equal<md::DashTextureCache::Key, std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, std::__1::equal_to<md::DashTextureCache::Key>, true>, std::__1::allocator<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::DashTextureCache::Key, std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, md::DashTextureCache::KeyHasher, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::DashTextureCache::Key, std::__1::__hash_value_type<md::DashTextureCache::Key, std::__1::shared_ptr<md::DashTexture>>, std::__1::equal_to<md::DashTextureCache::Key>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::__unordered_map_hasher<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::hash<md::GenericShieldCacheKey>, true>, std::__1::__unordered_map_equal<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::equal_to<md::GenericShieldCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::hash<md::GenericShieldCacheKey>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::equal_to<md::GenericShieldCacheKey>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>, std::__1::hash<md::IconCacheKey>, std::__1::equal_to<md::IconCacheKey>, std::__1::allocator<std::__1::pair<const md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, std::__1::__unordered_map_hasher<md::IconCacheKey, std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, std::__1::hash<md::IconCacheKey>, true>, std::__1::__unordered_map_equal<md::IconCacheKey, std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, std::__1::equal_to<md::IconCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::IconCacheKey, std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, std::__1::hash<md::IconCacheKey>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::IconCacheKey, std::__1::__hash_value_type<md::IconCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::IconCacheKey, id, _value_ptr>, void *>>, std::__1::equal_to<md::IconCacheKey>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>, std::__1::hash<md::PatternedBatchKey>, std::__1::equal_to<md::PatternedBatchKey>, std::__1::allocator<std::__1::pair<const md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, std::__1::__unordered_map_hasher<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, std::__1::hash<md::PatternedBatchKey>, true>, std::__1::__unordered_map_equal<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, std::__1::equal_to<md::PatternedBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, std::__1::hash<md::PatternedBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, std::__1::equal_to<md::PatternedBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>, std::__1::hash<md::RoadBatchKey>, std::__1::equal_to<md::RoadBatchKey>, std::__1::allocator<std::__1::pair<const md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, std::__1::__unordered_map_hasher<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, std::__1::hash<md::RoadBatchKey>, true>, std::__1::__unordered_map_equal<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, std::__1::equal_to<md::RoadBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, std::__1::hash<md::RoadBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, std::__1::equal_to<md::RoadBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::__unordered_map_hasher<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::hash<md::ShieldCacheKey>, true>, std::__1::__unordered_map_equal<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::equal_to<md::ShieldCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::hash<md::ShieldCacheKey>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>>, std::__1::equal_to<md::ShieldCacheKey>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun, md::TrafficStream::SectionKeyHash, std::__1::equal_to<md::TrafficStream::SectionKey>, std::__1::allocator<std::__1::pair<const md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>>> {
    struct __hash_table<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, std::__1::__unordered_map_hasher<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, md::TrafficStream::SectionKeyHash, true>, std::__1::__unordered_map_equal<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, std::__1::equal_to<md::TrafficStream::SectionKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, md::TrafficStream::SectionKeyHash, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::TrafficStream::SectionKey, std::__1::__hash_value_type<md::TrafficStream::SectionKey, md::TrafficStream::TexelRun>, std::__1::equal_to<md::TrafficStream::SectionKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>>, geo::StdAllocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, lhp::Allocator>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>>, true>, geo::StdAllocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, lhp::Allocator>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*, lhp::Allocator>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>, geo::StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>, lhp::Allocator>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> __value_;
            struct StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>, lhp::Allocator> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>, md::LabelTransitSupport::TransitLineColorKeyHash, std::__1::equal_to<std::__1::pair<unsigned long long, bool>>, geo::StdAllocator<std::__1::pair<const std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, lhp::Allocator>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, md::LabelTransitSupport::TransitLineColorKeyHash, true>, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, std::__1::equal_to<std::__1::pair<unsigned long long, bool>>, true>, geo::StdAllocator<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, lhp::Allocator>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>*, lhp::Allocator>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*>, geo::StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>, lhp::Allocator>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>*> _field1;
            struct StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, void *>, lhp::Allocator> _field2;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, md::LabelTransitSupport::TransitLineColorKeyHash, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<unsigned long long, bool>, std::__1::__hash_value_type<std::__1::pair<unsigned long long, bool>, gm::FixedPointVector<uint8_t, 4>>, std::__1::equal_to<std::__1::pair<unsigned long long, bool>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>, std::__1::hash<SectionKey>, std::__1::equal_to<std::__1::pair<void *, unsigned long>>, std::__1::allocator<std::__1::pair<const std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::hash<SectionKey>, true>, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::equal_to<std::__1::pair<void *, unsigned long>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::hash<SectionKey>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge>>>, std::__1::equal_to<std::__1::pair<void *, unsigned long>>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, VKPolygonGroup *, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, VKPolygonGroup *>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, VKPolygonGroup *>, std::__1::equal_to<unsigned long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, md::PolygonRouteAttributes, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, md::PolygonRouteAttributes>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::equal_to<unsigned long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, short, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, short>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, short>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, short>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, short>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, short>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, short>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, short>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, short>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long long, std::__1::shared_ptr<const md::Venue>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<const md::Venue>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<const md::Venue>>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::shared_ptr<md::TransitNodeFeature>>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_set<md::TransitNode *, std::__1::hash<md::TransitNode *>, std::__1::equal_to<md::TransitNode *>, std::__1::allocator<md::TransitNode *>>>, std::__1::equal_to<unsigned long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long>>>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, geo::StdAllocator<std::__1::pair<const unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, lhp::Allocator>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, std::__1::equal_to<unsigned long long>, true>, geo::StdAllocator<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, lhp::Allocator>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>*, lhp::Allocator>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*>, geo::StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>, lhp::Allocator>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>*> _field1;
            struct StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, void *>, lhp::Allocator> _field2;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::weak_ptr<md::LabelExternalTransitNode>>, std::__1::equal_to<unsigned long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<TransitLineWithLink, TransitLineWithLinkHash, std::__1::equal_to<TransitLineWithLink>, std::__1::allocator<TransitLineWithLink>> {
    struct __hash_table<TransitLineWithLink, TransitLineWithLinkHash, std::__1::equal_to<TransitLineWithLink>, std::__1::allocator<TransitLineWithLink>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>, std::__1::allocator<std::__1::__hash_node<TransitLineWithLink, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, TransitLineWithLinkHash> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<TransitLineWithLink>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<std::__1::shared_ptr<md::LabelExternalIcon>, std::__1::hash<std::__1::shared_ptr<md::LabelExternalIcon>>, std::__1::equal_to<std::__1::shared_ptr<md::LabelExternalIcon>>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalIcon>>> {
    struct __hash_table<std::__1::shared_ptr<md::LabelExternalIcon>, std::__1::hash<std::__1::shared_ptr<md::LabelExternalIcon>>, std::__1::equal_to<std::__1::shared_ptr<md::LabelExternalIcon>>, std::__1::allocator<std::__1::shared_ptr<md::LabelExternalIcon>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::shared_ptr<md::LabelExternalIcon>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::hash<std::__1::shared_ptr<md::LabelExternalIcon>>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<std::__1::shared_ptr<md::LabelExternalIcon>>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> {
    struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<unsigned long long>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct vector<AdditionalRouteInfo, std::__1::allocator<AdditionalRouteInfo>> {
    struct AdditionalRouteInfo *__begin_;
    struct AdditionalRouteInfo *__end_;
    struct __compressed_pair<AdditionalRouteInfo *, std::__1::allocator<AdditionalRouteInfo>> {
        struct AdditionalRouteInfo *__value_;
    } __end_cap_;
};

struct vector<Edge, std::__1::allocator<Edge>> {
    struct Edge *_field1;
    struct Edge *_field2;
    struct __compressed_pair<Edge *, std::__1::allocator<Edge>> {
        struct Edge *_field1;
    } _field3;
};

struct vector<GEO3DBuildingFeature, std::__1::allocator<GEO3DBuildingFeature>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<GEO3DBuildingFeature *, std::__1::allocator<GEO3DBuildingFeature>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<GEOLocationCoordinate2D, std::__1::allocator<GEOLocationCoordinate2D>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<GEOLocationCoordinate2D *, std::__1::allocator<GEOLocationCoordinate2D>> {
        CDStruct_183601bc *__value_;
    } __end_cap_;
};

struct vector<LabelNavJunctionInfo, geo::StdAllocator<LabelNavJunctionInfo, lhp::Allocator>> {
    struct LabelNavJunctionInfo *__begin_;
    struct LabelNavJunctionInfo *__end_;
    struct __compressed_pair<LabelNavJunctionInfo *, geo::StdAllocator<LabelNavJunctionInfo, lhp::Allocator>> {
        struct LabelNavJunctionInfo *__value_;
        struct StdAllocator<LabelNavJunctionInfo, lhp::Allocator> __value_;
    } __end_cap_;
};

struct vector<RouteJunctionInfo, geo::StdAllocator<RouteJunctionInfo, lhp::Allocator>> {
    struct RouteJunctionInfo *_field1;
    struct RouteJunctionInfo *_field2;
    struct __compressed_pair<RouteJunctionInfo *, geo::StdAllocator<RouteJunctionInfo, lhp::Allocator>> {
        struct RouteJunctionInfo *_field1;
        struct StdAllocator<RouteJunctionInfo, lhp::Allocator> _field2;
    } _field3;
};

struct vector<RouteSegment, geo::StdAllocator<RouteSegment, lhp::Allocator>> {
    struct RouteSegment *__begin_;
    struct RouteSegment *__end_;
    struct __compressed_pair<RouteSegment *, geo::StdAllocator<RouteSegment, lhp::Allocator>> {
        struct RouteSegment *__value_;
        struct StdAllocator<RouteSegment, lhp::Allocator> __value_;
    } __end_cap_;
};

struct vector<VKLabelNavRoadLabel *, geo::StdAllocator<VKLabelNavRoadLabel *, lhp::Allocator>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<VKLabelNavRoadLabel **, geo::StdAllocator<VKLabelNavRoadLabel *, lhp::Allocator>> {
        id *__value_;
        struct StdAllocator<VKLabelNavRoadLabel *, lhp::Allocator> __value_;
    } __end_cap_;
};

struct vector<VKMapTile *, std::__1::allocator<VKMapTile *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<VKMapTile **, std::__1::allocator<VKMapTile *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<VKTile *, std::__1::allocator<VKTile *>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<VKTile **, std::__1::allocator<VKTile *>> {
        id *_field1;
    } _field3;
};

struct vector<VKTileKey, std::__1::allocator<VKTileKey>> {
    struct VKTileKey *__begin_;
    struct VKTileKey *__end_;
    struct __compressed_pair<VKTileKey *, std::__1::allocator<VKTileKey>> {
        struct VKTileKey *__value_;
    } __end_cap_;
};

struct vector<geo::Coordinate3D<Radians, double>, std::__1::allocator<geo::Coordinate3D<Radians, double>>> {
    Coordinate3D_bc242218 *__begin_;
    Coordinate3D_bc242218 *__end_;
    struct __compressed_pair<geo::Coordinate3D<Radians, double>*, std::__1::allocator<geo::Coordinate3D<Radians, double>>> {
        Coordinate3D_bc242218 *__value_;
    } __end_cap_;
};

struct vector<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
    struct _retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__begin_;
    struct _retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__end_;
    struct __compressed_pair<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>*, std::__1::allocator<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
        struct _retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__value_;
    } __end_cap_;
};

struct vector<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
    struct _retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__begin_;
    struct _retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__end_;
    struct __compressed_pair<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>*, std::__1::allocator<geo::_retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
        struct _retain_ptr<VKPolylineGroupOverlay *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__value_;
    } __end_cap_;
};

struct vector<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, geo::StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, lhp::Allocator>> {
    struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__begin_;
    struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__end_;
    struct __compressed_pair<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>*, geo::StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, lhp::Allocator>> {
        struct _retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__value_;
        struct StdAllocator<geo::_retain_ptr<VKRouteContext *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, lhp::Allocator> __value_;
    } __end_cap_;
};

struct vector<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
    struct _retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *_field1;
    struct _retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *_field2;
    struct __compressed_pair<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>*, std::__1::allocator<geo::_retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
        struct _retain_ptr<VKTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *_field1;
    } _field3;
};

struct vector<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
    struct _retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__begin_;
    struct _retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__end_;
    struct __compressed_pair<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>*, std::__1::allocator<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
        struct _retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__value_;
    } __end_cap_;
};

struct vector<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>>> {
    struct fast_shared_ptr<md::RouteLineSection, std::allocator> *__begin_;
    struct fast_shared_ptr<md::RouteLineSection, std::allocator> *__end_;
    struct __compressed_pair<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>*, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>>> {
        struct fast_shared_ptr<md::RouteLineSection, std::allocator> *__value_;
    } __end_cap_;
};

struct vector<ggl::Batcher, std::__1::allocator<ggl::Batcher>> {
    struct Batcher *__begin_;
    struct Batcher *__end_;
    struct __compressed_pair<ggl::Batcher *, std::__1::allocator<ggl::Batcher>> {
        struct Batcher *__value_;
    } __end_cap_;
};

struct vector<ggl::BuildingFacade::BuildingMesh *, geo::StdAllocator<ggl::BuildingFacade::BuildingMesh *, ggl::Allocator>> {
    struct BuildingMesh **_field1;
    struct BuildingMesh **_field2;
    struct __compressed_pair<ggl::BuildingFacade::BuildingMesh **, geo::StdAllocator<ggl::BuildingFacade::BuildingMesh *, ggl::Allocator>> {
        struct BuildingMesh **_field1;
        struct StdAllocator<ggl::BuildingFacade::BuildingMesh *, ggl::Allocator> _field2;
    } _field3;
};

struct vector<ggl::BuildingPointyRoof::BuildingMesh *, geo::StdAllocator<ggl::BuildingPointyRoof::BuildingMesh *, ggl::Allocator>> {
    struct BuildingMesh **_field1;
    struct BuildingMesh **_field2;
    struct __compressed_pair<ggl::BuildingPointyRoof::BuildingMesh **, geo::StdAllocator<ggl::BuildingPointyRoof::BuildingMesh *, ggl::Allocator>> {
        struct BuildingMesh **_field1;
        struct StdAllocator<ggl::BuildingPointyRoof::BuildingMesh *, ggl::Allocator> _field2;
    } _field3;
};

struct vector<ggl::CommandBuffer *, geo::StdAllocator<ggl::CommandBuffer *, ggl::Allocator>> {
    struct CommandBuffer **_field1;
    struct CommandBuffer **_field2;
    struct __compressed_pair<ggl::CommandBuffer **, geo::StdAllocator<ggl::CommandBuffer *, ggl::Allocator>> {
        struct CommandBuffer **_field1;
        struct StdAllocator<ggl::CommandBuffer *, ggl::Allocator> _field2;
    } _field3;
};

struct vector<ggl::ComputeQueue *, geo::StdAllocator<ggl::ComputeQueue *, ggl::Allocator>> {
    struct ComputeQueue **_field1;
    struct ComputeQueue **_field2;
    struct __compressed_pair<ggl::ComputeQueue **, geo::StdAllocator<ggl::ComputeQueue *, ggl::Allocator>> {
        struct ComputeQueue **_field1;
        struct StdAllocator<ggl::ComputeQueue *, ggl::Allocator> _field2;
    } _field3;
};

struct vector<ggl::ConstantDataElement, geo::StdAllocator<ggl::ConstantDataElement, ggl::Allocator>> {
    struct ConstantDataElement *_field1;
    struct ConstantDataElement *_field2;
    struct __compressed_pair<ggl::ConstantDataElement *, geo::StdAllocator<ggl::ConstantDataElement, ggl::Allocator>> {
        struct ConstantDataElement *_field1;
        struct StdAllocator<ggl::ConstantDataElement, ggl::Allocator> _field2;
    } _field3;
};

struct vector<ggl::OptimizedTraffic::BaseMesh *, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *>> {
    struct BaseMesh **_field1;
    struct BaseMesh **_field2;
    struct __compressed_pair<ggl::OptimizedTraffic::BaseMesh **, std::__1::allocator<ggl::OptimizedTraffic::BaseMesh *>> {
        struct BaseMesh **_field1;
    } _field3;
};

struct vector<ggl::PatternedRibbon::BaseMesh *, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *>> {
    struct BaseMesh **_field1;
    struct BaseMesh **_field2;
    struct __compressed_pair<ggl::PatternedRibbon::BaseMesh **, std::__1::allocator<ggl::PatternedRibbon::BaseMesh *>> {
        struct BaseMesh **_field1;
    } _field3;
};

struct vector<ggl::PrefilteredLine::PrefilteredLineMesh *, geo::StdAllocator<ggl::PrefilteredLine::PrefilteredLineMesh *, ggl::Allocator>> {
    struct PrefilteredLineMesh **_field1;
    struct PrefilteredLineMesh **_field2;
    struct __compressed_pair<ggl::PrefilteredLine::PrefilteredLineMesh **, geo::StdAllocator<ggl::PrefilteredLine::PrefilteredLineMesh *, ggl::Allocator>> {
        struct PrefilteredLineMesh **_field1;
        struct StdAllocator<ggl::PrefilteredLine::PrefilteredLineMesh *, ggl::Allocator> _field2;
    } _field3;
};

struct vector<ggl::RenderQueue::Pass, geo::StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator>> {
    struct Pass *_field1;
    struct Pass *_field2;
    struct __compressed_pair<ggl::RenderQueue::Pass *, geo::StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator>> {
        struct Pass *_field1;
        struct StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator> _field2;
    } _field3;
};

struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *>> {
    struct BaseMesh **_field1;
    struct BaseMesh **_field2;
    struct __compressed_pair<ggl::Ribbon::BaseMesh **, std::__1::allocator<ggl::Ribbon::BaseMesh *>> {
        struct BaseMesh **_field1;
    } _field3;
};

struct vector<ggl::ShaderLibrary::ComputeShaderEntry, geo::StdAllocator<ggl::ShaderLibrary::ComputeShaderEntry, ggl::Allocator>> {
    struct ComputeShaderEntry *_field1;
    struct ComputeShaderEntry *_field2;
    struct __compressed_pair<ggl::ShaderLibrary::ComputeShaderEntry *, geo::StdAllocator<ggl::ShaderLibrary::ComputeShaderEntry, ggl::Allocator>> {
        struct ComputeShaderEntry *_field1;
        struct StdAllocator<ggl::ShaderLibrary::ComputeShaderEntry, ggl::Allocator> _field2;
    } _field3;
};

struct vector<ggl::ShaderLibrary::FunctionEntry, geo::StdAllocator<ggl::ShaderLibrary::FunctionEntry, ggl::Allocator>> {
    struct FunctionEntry *_field1;
    struct FunctionEntry *_field2;
    struct __compressed_pair<ggl::ShaderLibrary::FunctionEntry *, geo::StdAllocator<ggl::ShaderLibrary::FunctionEntry, ggl::Allocator>> {
        struct FunctionEntry *_field1;
        struct StdAllocator<ggl::ShaderLibrary::FunctionEntry, ggl::Allocator> _field2;
    } _field3;
};

struct vector<ggl::ShaderLibrary::ShaderEntry, geo::StdAllocator<ggl::ShaderLibrary::ShaderEntry, ggl::Allocator>> {
    struct ShaderEntry *_field1;
    struct ShaderEntry *_field2;
    struct __compressed_pair<ggl::ShaderLibrary::ShaderEntry *, geo::StdAllocator<ggl::ShaderLibrary::ShaderEntry, ggl::Allocator>> {
        struct ShaderEntry *_field1;
        struct StdAllocator<ggl::ShaderLibrary::ShaderEntry, ggl::Allocator> _field2;
    } _field3;
};

struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator>> {
    struct Texture **_field1;
    struct Texture **_field2;
    struct __compressed_pair<ggl::Texture **, geo::StdAllocator<ggl::Texture *, ggl::Allocator>> {
        struct Texture **_field1;
        struct StdAllocator<ggl::Texture *, ggl::Allocator> _field2;
    } _field3;
};

struct vector<ggl::TrafficBase::BaseMesh *, std::__1::allocator<ggl::TrafficBase::BaseMesh *>> {
    struct BaseMesh **_field1;
    struct BaseMesh **_field2;
    struct __compressed_pair<ggl::TrafficBase::BaseMesh **, std::__1::allocator<ggl::TrafficBase::BaseMesh *>> {
        struct BaseMesh **_field1;
    } _field3;
};

struct vector<ggl::TransitLineRibbon::BaseMesh *, std::__1::allocator<ggl::TransitLineRibbon::BaseMesh *>> {
    struct BaseMesh **_field1;
    struct BaseMesh **_field2;
    struct __compressed_pair<ggl::TransitLineRibbon::BaseMesh **, std::__1::allocator<ggl::TransitLineRibbon::BaseMesh *>> {
        struct BaseMesh **_field1;
    } _field3;
};

struct vector<gm::Matrix<double, 2, 1>, geo::StdAllocator<gm::Matrix<double, 2, 1>, lhp::Allocator>> {
    Matrix_2bdd42a3 *__begin_;
    Matrix_2bdd42a3 *__end_;
    struct __compressed_pair<gm::Matrix<double, 2, 1>*, geo::StdAllocator<gm::Matrix<double, 2, 1>, lhp::Allocator>> {
        Matrix_2bdd42a3 *__value_;
        struct StdAllocator<gm::Matrix<double, 2, 1>, lhp::Allocator> __value_;
    } __end_cap_;
};

struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
    Matrix_2bdd42a3 *__begin_;
    Matrix_2bdd42a3 *__end_;
    struct __compressed_pair<gm::Matrix<double, 2, 1>*, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
        Matrix_2bdd42a3 *__value_;
    } __end_cap_;
};

struct vector<gm::Matrix<float, 2, 1>, std::__1::allocator<gm::Matrix<float, 2, 1>>> {
    Matrix_8746f91e *_field1;
    Matrix_8746f91e *_field2;
    struct __compressed_pair<gm::Matrix<float, 2, 1>*, std::__1::allocator<gm::Matrix<float, 2, 1>>> {
        Matrix_8746f91e *_field1;
    } _field3;
};

struct vector<gm::MultiRange<unsigned long>, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator>> {
    MultiRange_4bdc93a8 *_field1;
    MultiRange_4bdc93a8 *_field2;
    struct __compressed_pair<gm::MultiRange<unsigned long>*, geo::StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator>> {
        MultiRange_4bdc93a8 *_field1;
        struct StdAllocator<gm::MultiRange<unsigned long>, ggl::Allocator> _field2;
    } _field3;
};

struct vector<gm::Range<unsigned int>, std::__1::allocator<gm::Range<unsigned int>>> {
    struct Range<unsigned int> *_field1;
    struct Range<unsigned int> *_field2;
    struct __compressed_pair<gm::Range<unsigned int>*, std::__1::allocator<gm::Range<unsigned int>>> {
        struct Range<unsigned int> *_field1;
    } _field3;
};

struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long>>> {
    struct Range<unsigned long> *_field1;
    struct Range<unsigned long> *_field2;
    struct __compressed_pair<gm::Range<unsigned long>*, std::__1::allocator<gm::Range<unsigned long>>> {
        struct Range<unsigned long> *_field1;
    } _field3;
};

struct vector<gss::FeatureAttributePair, geo::StdAllocator<gss::FeatureAttributePair, gss::Allocator>> {
    struct FeatureAttributePair *__begin_;
    struct FeatureAttributePair *__end_;
    struct __compressed_pair<gss::FeatureAttributePair *, geo::StdAllocator<gss::FeatureAttributePair, gss::Allocator>> {
        struct FeatureAttributePair *__value_;
        struct StdAllocator<gss::FeatureAttributePair, gss::Allocator> __value_;
    } __end_cap_;
};

struct vector<md::CasedTrafficBatch *, std::__1::allocator<md::CasedTrafficBatch *>> {
    struct CasedTrafficBatch **_field1;
    struct CasedTrafficBatch **_field2;
    struct __compressed_pair<md::CasedTrafficBatch **, std::__1::allocator<md::CasedTrafficBatch *>> {
        struct CasedTrafficBatch **_field1;
    } _field3;
};

struct vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId>> {
    unsigned char *_field1;
    unsigned char *_field2;
    struct __compressed_pair<md::CommandBufferId *, std::__1::allocator<md::CommandBufferId>> {
        unsigned char *_field1;
    } _field3;
};

struct vector<md::IconImage::IconLayer, geo::StdAllocator<md::IconImage::IconLayer, lhp::Allocator>> {
    unsigned char *__begin_;
    unsigned char *__end_;
    struct __compressed_pair<md::IconImage::IconLayer *, geo::StdAllocator<md::IconImage::IconLayer, lhp::Allocator>> {
        unsigned char *__value_;
        struct StdAllocator<md::IconImage::IconLayer, lhp::Allocator> __value_;
    } __end_cap_;
};

struct vector<md::ManeuverArrowInfo, std::__1::allocator<md::ManeuverArrowInfo>> {
    struct ManeuverArrowInfo *__begin_;
    struct ManeuverArrowInfo *__end_;
    struct __compressed_pair<md::ManeuverArrowInfo *, std::__1::allocator<md::ManeuverArrowInfo>> {
        struct ManeuverArrowInfo *__value_;
    } __end_cap_;
};

struct vector<md::PatternedBatch *, std::__1::allocator<md::PatternedBatch *>> {
    struct PatternedBatch **_field1;
    struct PatternedBatch **_field2;
    struct __compressed_pair<md::PatternedBatch **, std::__1::allocator<md::PatternedBatch *>> {
        struct PatternedBatch **_field1;
    } _field3;
};

struct vector<md::PilledTrafficBatch *, std::__1::allocator<md::PilledTrafficBatch *>> {
    struct PilledTrafficBatch **_field1;
    struct PilledTrafficBatch **_field2;
    struct __compressed_pair<md::PilledTrafficBatch **, std::__1::allocator<md::PilledTrafficBatch *>> {
        struct PilledTrafficBatch **_field1;
    } _field3;
};

struct vector<md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>*, std::__1::allocator<md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>*>> {
    struct RibbonBatch<md::Ribbons::TransitRibbonDescriptor> **_field1;
    struct RibbonBatch<md::Ribbons::TransitRibbonDescriptor> **_field2;
    struct __compressed_pair<md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>**, std::__1::allocator<md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>*>> {
        struct RibbonBatch<md::Ribbons::TransitRibbonDescriptor> **_field1;
    } _field3;
};

struct vector<md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>*, std::__1::allocator<md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>*>> {
    struct RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor> **_field1;
    struct RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor> **_field2;
    struct __compressed_pair<md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>**, std::__1::allocator<md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>*>> {
        struct RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor> **_field1;
    } _field3;
};

struct vector<md::RoadBatch *, std::__1::allocator<md::RoadBatch *>> {
    struct RoadBatch **_field1;
    struct RoadBatch **_field2;
    struct __compressed_pair<md::RoadBatch **, std::__1::allocator<md::RoadBatch *>> {
        struct RoadBatch **_field1;
    } _field3;
};

struct vector<md::SolidTrafficBatch *, std::__1::allocator<md::SolidTrafficBatch *>> {
    struct SolidTrafficBatch **_field1;
    struct SolidTrafficBatch **_field2;
    struct __compressed_pair<md::SolidTrafficBatch **, std::__1::allocator<md::SolidTrafficBatch *>> {
        struct SolidTrafficBatch **_field1;
    } _field3;
};

struct vector<md::TileExclusionArea, std::__1::allocator<md::TileExclusionArea>> {
    struct TileExclusionArea *__begin_;
    struct TileExclusionArea *__end_;
    struct __compressed_pair<md::TileExclusionArea *, std::__1::allocator<md::TileExclusionArea>> {
        struct TileExclusionArea *__value_;
    } __end_cap_;
};

struct vector<md::TrafficSegment, std::__1::allocator<md::TrafficSegment>> {
    struct TrafficSegment *_field1;
    struct TrafficSegment *_field2;
    struct __compressed_pair<md::TrafficSegment *, std::__1::allocator<md::TrafficSegment>> {
        struct TrafficSegment *_field1;
    } _field3;
};

struct vector<md::TransitLine, std::__1::allocator<md::TransitLine>> {
    struct TransitLine *__begin_;
    struct TransitLine *__end_;
    struct __compressed_pair<md::TransitLine *, std::__1::allocator<md::TransitLine>> {
        struct TransitLine *__value_;
    } __end_cap_;
};

struct vector<md::TransitLink, std::__1::allocator<md::TransitLink>> {
    struct TransitLink *__begin_;
    struct TransitLink *__end_;
    struct __compressed_pair<md::TransitLink *, std::__1::allocator<md::TransitLink>> {
        struct TransitLink *__value_;
    } __end_cap_;
};

struct vector<md::VenueBuilding, std::__1::allocator<md::VenueBuilding>> {
    struct VenueBuilding *_field1;
    struct VenueBuilding *_field2;
    struct __compressed_pair<md::VenueBuilding *, std::__1::allocator<md::VenueBuilding>> {
        struct VenueBuilding *_field1;
    } _field3;
};

struct vector<md::VenueFloorGroup, std::__1::allocator<md::VenueFloorGroup>> {
    struct VenueFloorGroup *__begin_;
    struct VenueFloorGroup *__end_;
    struct __compressed_pair<md::VenueFloorGroup *, std::__1::allocator<md::VenueFloorGroup>> {
        struct VenueFloorGroup *__value_;
    } __end_cap_;
};

struct vector<md::VenueLevel, std::__1::allocator<md::VenueLevel>> {
    struct VenueLevel *_field1;
    struct VenueLevel *_field2;
    struct __compressed_pair<md::VenueLevel *, std::__1::allocator<md::VenueLevel>> {
        struct VenueLevel *_field1;
    } _field3;
};

struct vector<std::__1::pair<TransitLineWithLink, float>, std::__1::allocator<std::__1::pair<TransitLineWithLink, float>>> {
    struct pair<TransitLineWithLink, float> *_field1;
    struct pair<TransitLineWithLink, float> *_field2;
    struct __compressed_pair<std::__1::pair<TransitLineWithLink, float>*, std::__1::allocator<std::__1::pair<TransitLineWithLink, float>>> {
        struct pair<TransitLineWithLink, float> *_field1;
    } _field3;
};

struct vector<std::__1::pair<VKBuildingHeightMap, unsigned long long>, std::__1::allocator<std::__1::pair<VKBuildingHeightMap, unsigned long long>>> {
    struct pair<VKBuildingHeightMap, unsigned long long> *__begin_;
    struct pair<VKBuildingHeightMap, unsigned long long> *__end_;
    struct __compressed_pair<std::__1::pair<VKBuildingHeightMap, unsigned long long>*, std::__1::allocator<std::__1::pair<VKBuildingHeightMap, unsigned long long>>> {
        struct pair<VKBuildingHeightMap, unsigned long long> *__value_;
    } __end_cap_;
};

struct vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair>>> {
    struct pair<bool, GEOFeatureStylePair> *_field1;
    struct pair<bool, GEOFeatureStylePair> *_field2;
    struct __compressed_pair<std::__1::pair<bool, GEOFeatureStylePair>*, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair>>> {
        struct pair<bool, GEOFeatureStylePair> *_field1;
    } _field3;
};

struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> {
    struct pair<unsigned short, unsigned int> *__begin_;
    struct pair<unsigned short, unsigned int> *__end_;
    struct __compressed_pair<std::__1::pair<unsigned short, unsigned int>*, std::__1::allocator<std::__1::pair<unsigned short, unsigned int>>> {
        struct pair<unsigned short, unsigned int> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<const md::Venue>, std::__1::allocator<std::__1::shared_ptr<const md::Venue>>> {
    struct shared_ptr<const md::Venue> *_field1;
    struct shared_ptr<const md::Venue> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<const md::Venue>*, std::__1::allocator<std::__1::shared_ptr<const md::Venue>>> {
        struct shared_ptr<const md::Venue> *_field1;
    } _field3;
};

struct vector<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>> {
    struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *__begin_;
    struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>> {
        struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::DebugRenderer>, geo::StdAllocator<std::__1::shared_ptr<ggl::DebugRenderer>, ggl::Allocator>> {
    struct shared_ptr<ggl::DebugRenderer> *_field1;
    struct shared_ptr<ggl::DebugRenderer> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<ggl::DebugRenderer>*, geo::StdAllocator<std::__1::shared_ptr<ggl::DebugRenderer>, ggl::Allocator>> {
        struct shared_ptr<ggl::DebugRenderer> *_field1;
        struct StdAllocator<std::__1::shared_ptr<ggl::DebugRenderer>, ggl::Allocator> _field2;
    } _field3;
};

struct vector<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> {
    struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__begin_;
    struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> {
        struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>>> {
    struct shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *__begin_;
    struct shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>>> {
        struct shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::Shader>, geo::StdAllocator<std::__1::shared_ptr<ggl::Shader>, ggl::Allocator>> {
    struct shared_ptr<ggl::Shader> *_field1;
    struct shared_ptr<ggl::Shader> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Shader>*, geo::StdAllocator<std::__1::shared_ptr<ggl::Shader>, ggl::Allocator>> {
        struct shared_ptr<ggl::Shader> *_field1;
        struct StdAllocator<std::__1::shared_ptr<ggl::Shader>, ggl::Allocator> _field2;
    } _field3;
};

struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D>>> {
    shared_ptr_479d1306 *__begin_;
    shared_ptr_479d1306 *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D>*, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D>>> {
        shared_ptr_479d1306 *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>>> {
    struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *__begin_;
    struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>>> {
        struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>>> {
    struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *__begin_;
    struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>>> {
        struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>>> {
    struct shared_ptr<ggl::VenueWall::EndCapMesh> *__begin_;
    struct shared_ptr<ggl::VenueWall::EndCapMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>>> {
        struct shared_ptr<ggl::VenueWall::EndCapMesh> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>>> {
    struct shared_ptr<ggl::VenueWall::MeshMesh> *__begin_;
    struct shared_ptr<ggl::VenueWall::MeshMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>>> {
        struct shared_ptr<ggl::VenueWall::MeshMesh> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<ggl::VertexData>, geo::StdAllocator<std::__1::shared_ptr<ggl::VertexData>, ggl::Allocator>> {
    struct shared_ptr<ggl::VertexData> *_field1;
    struct shared_ptr<ggl::VertexData> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<ggl::VertexData>*, geo::StdAllocator<std::__1::shared_ptr<ggl::VertexData>, ggl::Allocator>> {
        struct shared_ptr<ggl::VertexData> *_field1;
        struct StdAllocator<std::__1::shared_ptr<ggl::VertexData>, ggl::Allocator> _field2;
    } _field3;
};

struct vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> {
    shared_ptr_c5d816ee *__begin_;
    shared_ptr_c5d816ee *__end_;
    struct __compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>*, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> {
        shared_ptr_c5d816ee *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::CoastlineGroup>, std::__1::allocator<std::__1::shared_ptr<md::CoastlineGroup>>> {
    struct shared_ptr<md::CoastlineGroup> *__begin_;
    struct shared_ptr<md::CoastlineGroup> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::CoastlineGroup>*, std::__1::allocator<std::__1::shared_ptr<md::CoastlineGroup>>> {
        struct shared_ptr<md::CoastlineGroup> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::DebugTreeNode>, std::__1::allocator<std::__1::shared_ptr<md::DebugTreeNode>>> {
    shared_ptr_eafb90f9 *__begin_;
    shared_ptr_eafb90f9 *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::DebugTreeNode>*, std::__1::allocator<std::__1::shared_ptr<md::DebugTreeNode>>> {
        shared_ptr_eafb90f9 *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::LabelCreateExternalIconRequest>, geo::StdAllocator<std::__1::shared_ptr<md::LabelCreateExternalIconRequest>, lhp::Allocator>> {
    struct shared_ptr<md::LabelCreateExternalIconRequest> *_field1;
    struct shared_ptr<md::LabelCreateExternalIconRequest> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::LabelCreateExternalIconRequest>*, geo::StdAllocator<std::__1::shared_ptr<md::LabelCreateExternalIconRequest>, lhp::Allocator>> {
        struct shared_ptr<md::LabelCreateExternalIconRequest> *_field1;
        struct StdAllocator<std::__1::shared_ptr<md::LabelCreateExternalIconRequest>, lhp::Allocator> _field2;
    } _field3;
};

struct vector<std::__1::shared_ptr<md::LabelExternalPointFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalPointFeature>, lhp::Allocator>> {
    shared_ptr_e9082761 *_field1;
    shared_ptr_e9082761 *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalPointFeature>*, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalPointFeature>, lhp::Allocator>> {
        shared_ptr_e9082761 *_field1;
        struct StdAllocator<std::__1::shared_ptr<md::LabelExternalPointFeature>, lhp::Allocator> _field2;
    } _field3;
};

struct vector<std::__1::shared_ptr<md::LabelExternalRoadFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>, lhp::Allocator>> {
    struct shared_ptr<md::LabelExternalRoadFeature> *_field1;
    struct shared_ptr<md::LabelExternalRoadFeature> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::LabelExternalRoadFeature>*, geo::StdAllocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>, lhp::Allocator>> {
        struct shared_ptr<md::LabelExternalRoadFeature> *_field1;
        struct StdAllocator<std::__1::shared_ptr<md::LabelExternalRoadFeature>, lhp::Allocator> _field2;
    } _field3;
};

struct vector<std::__1::shared_ptr<md::LabelFeature>, geo::StdAllocator<std::__1::shared_ptr<md::LabelFeature>, lhp::Allocator>> {
    struct shared_ptr<md::LabelFeature> *_field1;
    struct shared_ptr<md::LabelFeature> *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::LabelFeature>*, geo::StdAllocator<std::__1::shared_ptr<md::LabelFeature>, lhp::Allocator>> {
        struct shared_ptr<md::LabelFeature> *_field1;
        struct StdAllocator<std::__1::shared_ptr<md::LabelFeature>, lhp::Allocator> _field2;
    } _field3;
};

struct vector<std::__1::shared_ptr<md::LabelMapTile>, geo::StdAllocator<std::__1::shared_ptr<md::LabelMapTile>, lhp::Allocator>> {
    shared_ptr_d0281386 *_field1;
    shared_ptr_d0281386 *_field2;
    struct __compressed_pair<std::__1::shared_ptr<md::LabelMapTile>*, geo::StdAllocator<std::__1::shared_ptr<md::LabelMapTile>, lhp::Allocator>> {
        shared_ptr_d0281386 *_field1;
        struct StdAllocator<std::__1::shared_ptr<md::LabelMapTile>, lhp::Allocator> _field2;
    } _field3;
};

struct vector<std::__1::shared_ptr<md::NavLabel>, geo::StdAllocator<std::__1::shared_ptr<md::NavLabel>, lhp::Allocator>> {
    shared_ptr_93ff9d4a *__begin_;
    shared_ptr_93ff9d4a *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::NavLabel>*, geo::StdAllocator<std::__1::shared_ptr<md::NavLabel>, lhp::Allocator>> {
        shared_ptr_93ff9d4a *__value_;
        struct StdAllocator<std::__1::shared_ptr<md::NavLabel>, lhp::Allocator> __value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup>>> {
    struct shared_ptr<md::ObjectGroup> *__begin_;
    struct shared_ptr<md::ObjectGroup> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::ObjectGroup>*, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup>>> {
        struct shared_ptr<md::ObjectGroup> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::TransitConnectedNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitConnectedNode>>> {
    struct shared_ptr<md::TransitConnectedNode> *__begin_;
    struct shared_ptr<md::TransitConnectedNode> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::TransitConnectedNode>*, std::__1::allocator<std::__1::shared_ptr<md::TransitConnectedNode>>> {
        struct shared_ptr<md::TransitConnectedNode> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::TransitNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitNode>>> {
    struct shared_ptr<md::TransitNode> *__begin_;
    struct shared_ptr<md::TransitNode> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::TransitNode>*, std::__1::allocator<std::__1::shared_ptr<md::TransitNode>>> {
        struct shared_ptr<md::TransitNode> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::TransitOrphanNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitOrphanNode>>> {
    struct shared_ptr<md::TransitOrphanNode> *__begin_;
    struct shared_ptr<md::TransitOrphanNode> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::TransitOrphanNode>*, std::__1::allocator<std::__1::shared_ptr<md::TransitOrphanNode>>> {
        struct shared_ptr<md::TransitOrphanNode> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::TransitParentNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitParentNode>>> {
    struct shared_ptr<md::TransitParentNode> *__begin_;
    struct shared_ptr<md::TransitParentNode> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::TransitParentNode>*, std::__1::allocator<std::__1::shared_ptr<md::TransitParentNode>>> {
        struct shared_ptr<md::TransitParentNode> *__value_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<md::Venue>, std::__1::allocator<std::__1::shared_ptr<md::Venue>>> {
    struct shared_ptr<md::Venue> *__begin_;
    struct shared_ptr<md::Venue> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::Venue>*, std::__1::allocator<std::__1::shared_ptr<md::Venue>>> {
        struct shared_ptr<md::Venue> *__value_;
    } __end_cap_;
};

struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>>>;

struct vector<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>>>, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>>>>> {
    struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>>> *__begin_;
    struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>>> *__end_;
    struct __compressed_pair<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>>>*, std::__1::allocator<std::__1::vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>>>>> {
        struct vector<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>, std::__1::allocator<std::__1::vector<FeatureRange, std::__1::allocator<FeatureRange>>>> *__value_;
    } __end_cap_;
};

struct vector<unsigned int, std::__1::allocator<unsigned int>> {
    unsigned int *_field1;
    unsigned int *_field2;
    struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
        unsigned int *_field1;
    } _field3;
};

struct vector<unsigned long long, std::__1::allocator<unsigned long long>> {
    unsigned long long *_field1;
    unsigned long long *_field2;
    struct __compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long>> {
        unsigned long long *_field1;
    } _field3;
};

struct weak_interface_ptr<md::LabelExternalObjectsModerator>;

struct weak_ptr<md::GlobeOverlayContainer> {
    struct GlobeOverlayContainer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct weak_ptr<md::StylesheetVendor> {
    struct StylesheetVendor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

#if 0
// Names with conflicting types:
typedef struct {
    CDUnknownFunctionPointerType *_field1;
    struct DeviceVersion _field2;
    struct DeviceCapabilities _field3;
    struct DeviceAPIProperties _field4;
    int _field5;
    int _field6;
} Device_9226c869;

typedef struct {
    CDUnknownFunctionPointerType *_field1;
    Mercator3_40a88dec _field2;
    struct Coordinate2D<Degrees, double> _field3;
    id _field4;
} Anchor_16e7d7c9;

typedef struct {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<ggl::RenderQueue> _field2;
} RenderQueue_70f64fd3;

typedef struct {
    CDUnknownFunctionPointerType *_field1;
    shared_ptr_e963992e _field2;
    struct unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue>> _field3;
    struct RenderLayer *_field4[28];
    struct RenderLayer *_field5[66];
    struct RunLoopController *_field6;
    struct MapEngine *_field7;
} Renderer_3c643a9a;

typedef struct {
    int _field1;
    shared_ptr_807ec9ac _field2;
    struct unique_ptr<md::SharedDeviceResources, std::__1::default_delete<md::SharedDeviceResources>> _field3;
} Device_0f0703c5;

typedef struct {
    CDUnknownFunctionPointerType *_field1;
    struct Device *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    _Bool _field6;
    float _field7;
    struct vector<std::__1::shared_ptr<ggl::DebugRenderer>, geo::StdAllocator<std::__1::shared_ptr<ggl::DebugRenderer>, ggl::Allocator>> _field8;
    struct unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue>> _field9;
    struct shared_ptr<ggl::CommonLibrary> _field10;
    struct unique_ptr<ggl::RenderResourceFences, std::__1::default_delete<ggl::RenderResourceFences>> _field11;
    struct Texture2D *_field12;
    struct unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer>> _field13;
} Renderer_ddacdd1c;

typedef struct {
    struct vector<ggl::RenderQueue::Pass, geo::StdAllocator<ggl::RenderQueue::Pass, ggl::Allocator>> _field1;
    struct vector<ggl::ComputeQueue *, geo::StdAllocator<ggl::ComputeQueue *, ggl::Allocator>> _field2;
    struct vector<ggl::CommandBuffer *, geo::StdAllocator<ggl::CommandBuffer *, ggl::Allocator>> _field3;
    struct shared_ptr<ggl::RenderTransaction> _field4;
    struct vector<ggl::Texture *, geo::StdAllocator<ggl::Texture *, ggl::Allocator>> _field5;
} RenderQueue_efd5f737;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    id _field1;
    char *_field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned long long _field6;
    unsigned int _field7;
    unsigned long long _field8;
    char _field9;
    unsigned long long _field10;
    float _field11;
    unsigned long long _field12;
    id _field13;
    int _field14;
} CDStruct_e41bf108;

typedef struct {
    _Bool orthographic;
    double width;
    double height;
    double near;
    double far;
    double horizontalOffset;
} CDStruct_7a7719de;

typedef struct {
    unsigned char timePeriod;
    unsigned char overlayType;
    unsigned char applicationState;
    unsigned char searchResultsType;
    char mapHasLabels;
} CDStruct_51745937;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
} CDStruct_7523a67d;

typedef struct {
    unsigned int _field1;
    int _field2;
} CDStruct_1e94be47;

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    float *list;
    unsigned long long count;
    unsigned long long size;
} CDStruct_fae3dc92;

typedef struct {
    int *list;
    unsigned long long count;
    unsigned long long size;
} CDStruct_95bda58d;

typedef struct {
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
    unsigned int :1;
} CDStruct_a12fb154;

typedef struct {
    char borders;
    char folds;
    char angles;
    float minAngle;
    float maxAngle;
} CDStruct_671c6dd4;

typedef struct {
    char _field1;
} CDStruct_2920cfb7;

typedef struct {
    double leftCapWidth;
    double rightCapWidth;
    double leftPadding;
    double rightPadding;
} CDStruct_65fe6994;

typedef struct {
    double latitude;
    double longitude;
    double altitude;
} CDStruct_071ac149;

typedef struct {
    float _a;
    unsigned int _b;
    unsigned int _g;
    unsigned int _r;
} CDStruct_58ec0031;

typedef struct {
    float r;
    float g;
    float b;
    float a;
} CDStruct_83984b6f;

typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

typedef struct CDStruct_183601bc;

typedef struct {
    id _field1;
    unsigned int _field2;
    unsigned int _field3;
    struct _NSRange _field4;
    CDStruct_183601bc *_field5;
    CDStruct_183601bc *_field6;
    unsigned long long _field7;
    unsigned long long _field8;
    struct _NSRange _field9;
    struct _NSRange _field10;
    char _field11;
    struct _NSRange _field12;
    struct _NSRange _field13;
    struct _NSRange _field14[2];
    struct _NSRange _field15[2];
} CDStruct_e7ceca4d;

typedef struct {
    id _field1;
    struct PolylineCoordinate _field2;
    struct PolylineCoordinate _field3;
} CDStruct_2c837fe9;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    CDStruct_183601bc *_field3;
} CDStruct_3b01f0aa;

typedef struct {
    unsigned int _field1;
    float _field2;
    unsigned int _field3;
    unsigned int _field4;
    int _field5;
    CDStruct_a12fb154 _field6;
} CDStruct_e9f6a06b;

typedef struct {
    unsigned int _field1;
    int _field2;
    int _field3;
    float _field4;
    unsigned int _field5;
    CDStruct_a12fb154 _field6;
} CDStruct_033e8ed6;

typedef struct {
    unsigned int _field1;
    int _field2;
    long long _field3;
    unsigned long long _field4;
    double _field5;
    long long _field6;
    struct CVSMPTETime _field7;
    unsigned long long _field8;
    unsigned long long _field9;
} CDStruct_e50ab651;

typedef struct {
    CDStruct_183601bc *_field1;
    unsigned long long _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    CDStruct_183601bc *_field6;
    CDStruct_183601bc *_field7;
} CDStruct_91f75a7f;

typedef struct {
    CDStruct_e41bf108 _field1;
    unsigned char _field2;
    unsigned char _field3;
    unsigned char _field4;
    unsigned char _field5;
    unsigned int _field6;
    float _field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
} CDStruct_99ab1b21;

typedef struct {
    CDStruct_58ec0031 _color;
    float _offsetX;
    float _offsetY;
    float _size;
    struct {
        unsigned int offsetX:1;
        unsigned int offsetY:1;
    } _has;
} CDStruct_79d0722e;

typedef struct {
    CDStruct_58ec0031 _color;
    float _width;
} CDStruct_f43f0670;

typedef struct {
    CDStruct_83984b6f transitLineColor;
} CDStruct_b3fd5d76;

typedef struct {
    Matrix_6e1d3589 position;
    Matrix_6e1d3589 tangent;
    char tangentValid;
} CDStruct_d240144c;

typedef struct {
    Matrix_8746f91e _field1;
    Matrix_8746f91e _field2;
} CDStruct_5ae1f918;

typedef struct {
    CDStruct_e41bf108 _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    int _field4;
    int _field5;
    int _field6;
    unsigned long long _field7;
    unsigned long long _field8;
    union {
        struct {
            CDStruct_b2fbf00d _field1;
            CDStruct_b2fbf00d _field2;
        } _field1;
        CDStruct_83984b6f _field2;
    } _field9;
    CDStruct_183601bc *_field10;
    struct {
        unsigned short _field1[2];
        unsigned short _field2[2];
    } _field11;
    unsigned char _field12;
    char _field13;
    unsigned char _field14;
    char _field15;
    char _field16;
    unsigned char _field17;
    char _field18;
    unsigned char _field19;
    struct _NSRange _field20;
    char _field21;
    unsigned int _field22;
} CDStruct_5e424887;

typedef struct {
    CDStruct_5e424887 _field1;
    unsigned long long _field2;
    unsigned long long _field3;
    char _field4;
    char _field5;
} CDStruct_aced5902;

typedef struct {
    CDStruct_5e424887 _field1;
    CDStruct_b2fbf00d _field2;
    char _field3;
    char _field4;
    unsigned char _field5;
    unsigned long long _field6;
    unsigned long long _field7;
    CDStruct_b2fbf00d _field8;
    unsigned long long _field9;
} CDStruct_7c357ed0;

// Ambiguous groups
typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    double latitude;
    double longitude;
} CDStruct_2c43369c;

typedef struct {
    double x;
    double y;
} CDStruct_34734122;

typedef struct {
    struct {
        double _field1;
        double _field2;
    } _field1;
    struct {
        double _field1;
        double _field2;
    } _field2;
} CDStruct_90e2a262;

typedef struct Box<double, 2> {
    Matrix_2bdd42a3 _minimum;
    Matrix_2bdd42a3 _maximum;
} Box_3d7e3c2c;

typedef struct Box<float, 2> {
    Matrix_8746f91e _field1;
    Matrix_8746f91e _field2;
} Box_3fb92e00;

typedef struct Box<unsigned int, 2> {
    struct Matrix<unsigned int, 2, 1> _field1;
    struct Matrix<unsigned int, 2, 1> _field2;
} Box_55c4a776;

typedef struct CameraFrame<geo::Radians, double> {
    Coordinate3D_bc242218 _target;
    struct Unit<MeterUnitDescription, double> _distanceFromTarget;
    Unit_3d259e8a _pitch;
    Unit_3d259e8a _heading;
    Unit_3d259e8a _roll;
} CameraFrame_406dbd31;

typedef struct Coordinate3D<Radians, double> {
    Unit_3d259e8a latitude;
    Unit_3d259e8a longitude;
    struct Unit<MeterUnitDescription, double> altitude;
} Coordinate3D_bc242218;

typedef struct FixedPointVector<unsigned char, 4> {
    unsigned char _e[4];
} FixedPointVector_f041f768;

typedef struct Geocentric<double> {
    double _e[3];
} Geocentric_d8fde6f2;

typedef struct Matrix<double, 2, 1> {
    double _e[2];
} Matrix_2bdd42a3;

typedef struct Matrix<double, 3, 1> {
    double _e[3];
} Matrix_6e1d3589;

typedef struct Matrix<double, 4, 4> {
    double _e[16];
} Matrix_08d701e4;

typedef struct Matrix<float, 2, 1> {
    float _e[2];
} Matrix_8746f91e;

typedef struct Matrix<float, 3, 1> {
    float _e[3];
} Matrix_811b2232;

typedef struct Matrix<float, 4, 1> {
    float _e[4];
} Matrix_5173352a;

typedef struct Matrix<float, 4, 4> {
    float _e[16];
} Matrix_99e705ad;

typedef struct Matrix<int, 2, 1> {
    int _e[2];
} Matrix_443f5d51;

typedef struct Mercator2<double> {
    double _e[2];
} Mercator2_57ec32b6;

typedef struct Mercator3<double> {
    double _field1[3];
} Mercator3_40a88dec;

typedef struct MeshVendor<ggl::BuildingFacade::BuildingMesh> {
    struct vector<ggl::BuildingFacade::BuildingMesh *, geo::StdAllocator<ggl::BuildingFacade::BuildingMesh *, ggl::Allocator>> _field1;
    struct BuildingMesh *_field2;
} MeshVendor_04441547;

typedef struct MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> {
    struct vector<ggl::BuildingPointyRoof::BuildingMesh *, geo::StdAllocator<ggl::BuildingPointyRoof::BuildingMesh *, ggl::Allocator>> _field1;
    struct BuildingMesh *_field2;
} MeshVendor_96ac8e76;

typedef struct MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> {
    struct vector<ggl::PrefilteredLine::PrefilteredLineMesh *, geo::StdAllocator<ggl::PrefilteredLine::PrefilteredLineMesh *, ggl::Allocator>> _field1;
    struct PrefilteredLineMesh *_field2;
} MeshVendor_b901c95c;

typedef struct MultiRange<unsigned long> {
    struct vector<gm::Range<unsigned long>, std::__1::allocator<gm::Range<unsigned long>>> _field1;
} MultiRange_4bdc93a8;

typedef struct Quaternion<double> {
    Matrix_6e1d3589 _imaginary;
    double _scalar;
} Quaternion_febf9140;

typedef struct RibbonLayer<md::Ribbons::TransitRibbonDescriptor> {
    CDUnknownFunctionPointerType *_field1;
    struct vector<md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>*, std::__1::allocator<md::Ribbons::RibbonBatch<md::Ribbons::TransitRibbonDescriptor>*>> _field2;
    struct vector<ggl::TransitLineRibbon::BaseMesh *, std::__1::allocator<ggl::TransitLineRibbon::BaseMesh *>> _field3;
    struct RenderState *_field4[2];
} RibbonLayer_abf9b3d8;

typedef struct RibbonLayer<md::TransitDisplayConnectionRibbonDescriptor> {
    CDUnknownFunctionPointerType *_field1;
    struct vector<md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>*, std::__1::allocator<md::Ribbons::RibbonBatch<md::TransitDisplayConnectionRibbonDescriptor>*>> _field2;
    struct vector<ggl::Ribbon::BaseMesh *, std::__1::allocator<ggl::Ribbon::BaseMesh *>> _field3;
    struct RenderState *_field4[2];
} RibbonLayer_99607768;

typedef struct RigidTransform<double> {
    Quaternion_febf9140 _rotation;
    Matrix_6e1d3589 _translation;
} RigidTransform_271c3a39;

typedef struct Unit<DegreeUnitDescription, double> {
    double _value;
} Unit_57582783;

typedef struct Unit<RadianUnitDescription, double> {
    double _value;
} Unit_3d259e8a;

typedef struct View<double> {
    RigidTransform_271c3a39 _field1;
    Matrix_08d701e4 _field2;
    Matrix_08d701e4 _field3;
    double _field4;
    struct ViewSize _field5;
    int _field6;
} View_fc0baec4;

typedef struct _retain_ptr<VKLabelNavRoadLabel *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
    struct _retain_objc _field3;
    struct _release_objc _field4;
} _retain_ptr_86da96eb;

typedef struct array<gm::Matrix<double, 2, 1>, 2> {
    Matrix_2bdd42a3 _field1[2];
} array_39cc276d;

typedef struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, gss::Allocator>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, gss::Allocator>>::__rep, geo::StdAllocator<char, gss::Allocator>> {
        struct __rep _field1;
        struct StdAllocator<char, gss::Allocator> _field2;
    } _field1;
} basic_string_2821fe74;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> __r_;
} basic_string_23d93216;

typedef struct function<bool (unsigned long long)> {
    struct type _field1;
    struct __base<bool (unsigned long long)> *_field2;
} function_d674753c;

typedef struct function<void ()> {
    struct type _field1;
    struct __base<void ()> *_field2;
} function_30b369b8;

typedef struct list<md::TransitDisplayConnection, std::__1::allocator<md::TransitDisplayConnection>> {
    struct __list_node_base<md::TransitDisplayConnection, void *> __end_;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<md::TransitDisplayConnection, void *>>> {
        unsigned long long __value_;
    } __size_alloc_;
} list_547ec3e7;

typedef struct optional<float> {
    _Bool _hasValue;
    union ValueUnion {
        unsigned char data[4];
        float type;
    } _value;
} optional_44235073;

typedef struct pair<void *, unsigned long> {
    void *_field1;
    unsigned long long _field2;
} pair_1503616b;

typedef struct shared_ptr<altitude::GeoServicesLoadJob> {
    struct GeoServicesLoadJob *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_97fa0047;

typedef struct shared_ptr<const md::GenericShieldStyleInfo> {
    struct GenericShieldStyleInfo *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_f1f56723;

typedef struct shared_ptr<const md::TransitLineSharedResources> {
    struct TransitLineSharedResources *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_f4e206f4;

typedef struct shared_ptr<ggl::BitmapDataBase> {
    struct BitmapDataBase *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_fa6aa836;

typedef struct shared_ptr<ggl::Clut::Pos2DUVPipelineState> {
    struct Pos2DUVPipelineState *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_caa7afd8;

typedef struct shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View>> {
    struct ConstantDataTyped<ggl::Tile::View> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_696716c4;

typedef struct shared_ptr<ggl::Device> {
    struct Device *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_807ec9ac;

typedef struct shared_ptr<ggl::MetalDevice> {
    struct MetalDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_94286ce0;

typedef struct shared_ptr<ggl::OGLDevice> {
    struct OGLDevice *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_76161bec;

typedef struct shared_ptr<ggl::SamplerState> {
    struct SamplerState *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_cedd5232;

typedef struct shared_ptr<ggl::StandardLibrary> {
    struct StandardLibrary *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_1ddd16cb;

typedef struct shared_ptr<ggl::Texture2D> {
    struct Texture2D *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_479d1306;

typedef struct shared_ptr<ggl::TextureData2D> {
    struct TextureData2D *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_8bee8aae;

typedef struct shared_ptr<ggl::TextureWithReverseAlpha::Pos2DUVPipelineState> {
    struct Pos2DUVPipelineState *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_726d1291;

typedef struct shared_ptr<ggl::Textured::Pos2DUVPipelineState> {
    struct Pos2DUVPipelineState *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_74b38e53;

typedef struct shared_ptr<gss::CartoStyle<gss::PropertyID>> {
    struct CartoStyle<gss::PropertyID> *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_144c31f6;

typedef struct shared_ptr<gss::StyleSheet<gss::PropertyID>> {
    struct StyleSheet<gss::PropertyID> *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_664b6d77;

typedef struct shared_ptr<gss::StylesheetManager<gss::PropertyID>> {
    struct StylesheetManager<gss::PropertyID> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_a3c46825;

typedef struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID>> {
    struct StylesheetManager<gss::ScenePropertyID> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_c37d6e02;

typedef struct shared_ptr<gss::StylesheetQuery<gss::PropertyID>> {
    struct StylesheetQuery<gss::PropertyID> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_c5d816ee;

typedef struct shared_ptr<md::Anchor> {
    struct Anchor *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_2fc78ff4;

typedef struct shared_ptr<md::CMercatorTerrainHeightCache> {
    struct CMercatorTerrainHeightCache *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_f9615488;

typedef struct shared_ptr<md::DataOverrideManager> {
    struct DataOverrideManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_887a193f;

typedef struct shared_ptr<md::DebugTreeNode> {
    struct DebugTreeNode *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_eafb90f9;

typedef struct shared_ptr<md::FeatureMarker> {
    struct FeatureMarker *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_430519ce;

typedef struct shared_ptr<md::LabelClusterTree> {
    struct LabelClusterTree *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_e2fd4869;

typedef struct shared_ptr<md::LabelExternalPointFeature> {
    struct LabelExternalPointFeature *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_e9082761;

typedef struct shared_ptr<md::LabelImageKey> {
    struct LabelImageKey *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_85e81048;

typedef struct shared_ptr<md::LabelManager> {
    struct LabelManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_e1d4bd06;

typedef struct shared_ptr<md::LabelMapTile> {
    struct LabelMapTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_d0281386;

typedef struct shared_ptr<md::LabelMarker> {
    struct LabelMarker *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_2d33c5e4;

typedef struct shared_ptr<md::LabelTile> {
    struct LabelTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_702c344d;

typedef struct shared_ptr<md::NavLabel> {
    struct NavLabel *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_93ff9d4a;

typedef struct shared_ptr<md::ResourceInfo> {
    struct ResourceInfo *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_f269d513;

typedef struct shared_ptr<md::StylesheetVendor> {
    struct StylesheetVendor *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_dd2d1f5e;

typedef struct shared_ptr<md::TaskContext> {
    struct TaskContext *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_e963992e;

typedef struct shared_ptr<md::TrafficDynamicTile> {
    struct TrafficDynamicTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_c2d2f807;

typedef struct shared_ptr<md::TransitInterTileMediator> {
    struct TransitInterTileMediator *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_10302801;

typedef struct shared_ptr<md::TransitItemMarker> {
    struct TransitItemMarker *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_64d557d2;

typedef struct shared_ptr<md::VenueBuildingFeatureMarker> {
    struct VenueBuildingFeatureMarker *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_ec62a932;

typedef struct shared_ptr<md::VenueFeatureMarker> {
    struct VenueFeatureMarker *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_c500bfa8;

typedef struct shared_ptr<zilch::TrafficSkeletonTile> {
    struct TrafficSkeletonTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_7444c9fa;

typedef struct unique_ptr<md::TileSelectionProfile, std::__1::default_delete<md::TileSelectionProfile>> {
    struct __compressed_pair<md::TileSelectionProfile *, std::__1::default_delete<md::TileSelectionProfile>> {
        struct TileSelectionProfile *_field1;
    } _field1;
} unique_ptr_6bf34eb3;

typedef struct unordered_map<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>, std::__1::hash<md::PatternedBatchKey>, std::__1::equal_to<md::PatternedBatchKey>, std::__1::allocator<std::__1::pair<const md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, std::__1::__unordered_map_hasher<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, std::__1::hash<md::PatternedBatchKey>, true>, std::__1::__unordered_map_equal<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, std::__1::equal_to<md::PatternedBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, std::__1::hash<md::PatternedBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::PatternedBatchKey, std::__1::__hash_value_type<md::PatternedBatchKey, std::__1::vector<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::PatternedRibbon, std::__1::default_delete<md::PatternedRibbon>>>>>, std::__1::equal_to<md::PatternedBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_171a1194;

typedef struct unordered_map<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>, std::__1::hash<md::RoadBatchKey>, std::__1::equal_to<md::RoadBatchKey>, std::__1::allocator<std::__1::pair<const md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>>> {
    struct __hash_table<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, std::__1::__unordered_map_hasher<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, std::__1::hash<md::RoadBatchKey>, true>, std::__1::__unordered_map_equal<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, std::__1::equal_to<md::RoadBatchKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, std::__1::hash<md::RoadBatchKey>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<md::RoadBatchKey, std::__1::__hash_value_type<md::RoadBatchKey, std::__1::vector<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>, std::__1::allocator<std::__1::unique_ptr<md::RoadRibbon, std::__1::default_delete<md::RoadRibbon>>>>>, std::__1::equal_to<md::RoadBatchKey>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_59c55433;

typedef struct unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>>, geo::StdAllocator<std::__1::pair<const std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, lhp::Allocator>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>>, true>, geo::StdAllocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, lhp::Allocator>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*[], std::__1::__bucket_list_deallocator<geo::StdAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>*, lhp::Allocator>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*>, geo::StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>, lhp::Allocator>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>*> __value_;
            struct StdAllocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, void *>, lhp::Allocator> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>, std::__1::shared_ptr<NavRoadFeature>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator>>>, true>> {
            float __value_;
        } __p3_;
    } __table_;
} unordered_map_4d0b7b3a;

typedef struct unordered_map<unsigned long long, md::PolygonRouteAttributes, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, md::PolygonRouteAttributes>>> {
    struct __hash_table<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::hash<unsigned long long>, true>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, md::PolygonRouteAttributes>, std::__1::equal_to<unsigned long long>, true>> {
            float __value_;
        } __p3_;
    } __table_;
} unordered_map_aa0d84a8;

typedef struct unordered_set<TransitLineWithLink, TransitLineWithLinkHash, std::__1::equal_to<TransitLineWithLink>, std::__1::allocator<TransitLineWithLink>> {
    struct __hash_table<TransitLineWithLink, TransitLineWithLinkHash, std::__1::equal_to<TransitLineWithLink>, std::__1::allocator<TransitLineWithLink>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*>, std::__1::allocator<std::__1::__hash_node<TransitLineWithLink, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<TransitLineWithLink, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, TransitLineWithLinkHash> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::equal_to<TransitLineWithLink>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_set_e7be2da0;

typedef struct unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> {
    struct __hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *>*>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<unsigned long long, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<unsigned long long>> {
            unsigned long long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<unsigned long long>> {
            float __value_;
        } __p3_;
    } __table_;
} unordered_set_bb7a56cc;

typedef struct vector<Edge, std::__1::allocator<Edge>> {
    struct Edge *_field1;
    struct Edge *_field2;
    struct __compressed_pair<Edge *, std::__1::allocator<Edge>> {
        struct Edge *_field1;
    } _field3;
} vector_304c695f;

typedef struct vector<GEO3DBuildingFeature, std::__1::allocator<GEO3DBuildingFeature>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<GEO3DBuildingFeature *, std::__1::allocator<GEO3DBuildingFeature>> {
        CDStruct_183601bc *_field1;
    } _field3;
} vector_25c79282;

typedef struct vector<RouteJunctionInfo, geo::StdAllocator<RouteJunctionInfo, lhp::Allocator>> {
    struct RouteJunctionInfo *_field1;
    struct RouteJunctionInfo *_field2;
    struct __compressed_pair<RouteJunctionInfo *, geo::StdAllocator<RouteJunctionInfo, lhp::Allocator>> {
        struct RouteJunctionInfo *_field1;
        struct StdAllocator<RouteJunctionInfo, lhp::Allocator> _field2;
    } _field3;
} vector_34e67f61;

typedef struct vector<VKLabelNavRoadLabel *, geo::StdAllocator<VKLabelNavRoadLabel *, lhp::Allocator>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<VKLabelNavRoadLabel **, geo::StdAllocator<VKLabelNavRoadLabel *, lhp::Allocator>> {
        id *__value_;
        struct StdAllocator<VKLabelNavRoadLabel *, lhp::Allocator> __value_;
    } __end_cap_;
} vector_83fb13fb;

typedef struct vector<geo::Coordinate3D<Radians, double>, std::__1::allocator<geo::Coordinate3D<Radians, double>>> {
    Coordinate3D_bc242218 *__begin_;
    Coordinate3D_bc242218 *__end_;
    struct __compressed_pair<geo::Coordinate3D<Radians, double>*, std::__1::allocator<geo::Coordinate3D<Radians, double>>> {
        Coordinate3D_bc242218 *__value_;
    } __end_cap_;
} vector_36073df6;

typedef struct vector<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
    struct _retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__begin_;
    struct _retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__end_;
    struct __compressed_pair<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>*, std::__1::allocator<geo::_retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
        struct _retain_ptr<VKPolygonGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__value_;
    } __end_cap_;
} vector_5d257bd0;

typedef struct vector<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::allocator<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
    struct _retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__begin_;
    struct _retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__end_;
    struct __compressed_pair<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>*, std::__1::allocator<geo::_retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>>> {
        struct _retain_ptr<VKVenueGroup *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> *__value_;
    } __end_cap_;
} vector_d75ebb28;

typedef struct vector<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>>> {
    struct fast_shared_ptr<md::RouteLineSection, std::allocator> *__begin_;
    struct fast_shared_ptr<md::RouteLineSection, std::allocator> *__end_;
    struct __compressed_pair<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>*, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>>> {
        struct fast_shared_ptr<md::RouteLineSection, std::allocator> *__value_;
    } __end_cap_;
} vector_78427fd2;

typedef struct vector<gm::Matrix<double, 2, 1>, geo::StdAllocator<gm::Matrix<double, 2, 1>, lhp::Allocator>> {
    Matrix_2bdd42a3 *__begin_;
    Matrix_2bdd42a3 *__end_;
    struct __compressed_pair<gm::Matrix<double, 2, 1>*, geo::StdAllocator<gm::Matrix<double, 2, 1>, lhp::Allocator>> {
        Matrix_2bdd42a3 *__value_;
        struct StdAllocator<gm::Matrix<double, 2, 1>, lhp::Allocator> __value_;
    } __end_cap_;
} vector_2b358fc6;

typedef struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
    Matrix_2bdd42a3 *__begin_;
    Matrix_2bdd42a3 *__end_;
    struct __compressed_pair<gm::Matrix<double, 2, 1>*, std::__1::allocator<gm::Matrix<double, 2, 1>>> {
        Matrix_2bdd42a3 *__value_;
    } __end_cap_;
} vector_554e3200;

typedef struct vector<gm::Matrix<float, 2, 1>, std::__1::allocator<gm::Matrix<float, 2, 1>>> {
    Matrix_8746f91e *_field1;
    Matrix_8746f91e *_field2;
    struct __compressed_pair<gm::Matrix<float, 2, 1>*, std::__1::allocator<gm::Matrix<float, 2, 1>>> {
        Matrix_8746f91e *_field1;
    } _field3;
} vector_1a7ef145;

typedef struct vector<gm::Range<unsigned int>, std::__1::allocator<gm::Range<unsigned int>>> {
    struct Range<unsigned int> *_field1;
    struct Range<unsigned int> *_field2;
    struct __compressed_pair<gm::Range<unsigned int>*, std::__1::allocator<gm::Range<unsigned int>>> {
        struct Range<unsigned int> *_field1;
    } _field3;
} vector_488ed546;

typedef struct vector<md::TileExclusionArea, std::__1::allocator<md::TileExclusionArea>> {
    struct TileExclusionArea *__begin_;
    struct TileExclusionArea *__end_;
    struct __compressed_pair<md::TileExclusionArea *, std::__1::allocator<md::TileExclusionArea>> {
        struct TileExclusionArea *__value_;
    } __end_cap_;
} vector_6d9977eb;

typedef struct vector<md::TransitLine, std::__1::allocator<md::TransitLine>> {
    struct TransitLine *__begin_;
    struct TransitLine *__end_;
    struct __compressed_pair<md::TransitLine *, std::__1::allocator<md::TransitLine>> {
        struct TransitLine *__value_;
    } __end_cap_;
} vector_3755bd2c;

typedef struct vector<md::TransitLink, std::__1::allocator<md::TransitLink>> {
    struct TransitLink *__begin_;
    struct TransitLink *__end_;
    struct __compressed_pair<md::TransitLink *, std::__1::allocator<md::TransitLink>> {
        struct TransitLink *__value_;
    } __end_cap_;
} vector_23a0e42d;

typedef struct vector<md::VenueFloorGroup, std::__1::allocator<md::VenueFloorGroup>> {
    struct VenueFloorGroup *__begin_;
    struct VenueFloorGroup *__end_;
    struct __compressed_pair<md::VenueFloorGroup *, std::__1::allocator<md::VenueFloorGroup>> {
        struct VenueFloorGroup *__value_;
    } __end_cap_;
} vector_f7e56920;

typedef struct vector<std::__1::pair<TransitLineWithLink, float>, std::__1::allocator<std::__1::pair<TransitLineWithLink, float>>> {
    struct pair<TransitLineWithLink, float> *_field1;
    struct pair<TransitLineWithLink, float> *_field2;
    struct __compressed_pair<std::__1::pair<TransitLineWithLink, float>*, std::__1::allocator<std::__1::pair<TransitLineWithLink, float>>> {
        struct pair<TransitLineWithLink, float> *_field1;
    } _field3;
} vector_1e3b8d07;

typedef struct vector<std::__1::pair<bool, GEOFeatureStylePair>, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair>>> {
    struct pair<bool, GEOFeatureStylePair> *_field1;
    struct pair<bool, GEOFeatureStylePair> *_field2;
    struct __compressed_pair<std::__1::pair<bool, GEOFeatureStylePair>*, std::__1::allocator<std::__1::pair<bool, GEOFeatureStylePair>>> {
        struct pair<bool, GEOFeatureStylePair> *_field1;
    } _field3;
} vector_0496561e;

typedef struct vector<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>> {
    struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *__begin_;
    struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh>>> {
        struct shared_ptr<ggl::BuildingFlatStroke::BuildingFlatStrokeMesh> *__value_;
    } __end_cap_;
} vector_4080291d;

typedef struct vector<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> {
    struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__begin_;
    struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonBase::CompressedMeshMesh>>> {
        struct shared_ptr<ggl::PolygonBase::CompressedMeshMesh> *__value_;
    } __end_cap_;
} vector_74364602;

typedef struct vector<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>>> {
    struct shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *__begin_;
    struct shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonCommonStroke::MeshMesh>>> {
        struct shared_ptr<ggl::PolygonCommonStroke::MeshMesh> *__value_;
    } __end_cap_;
} vector_d473a3e0;

typedef struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D>>> {
    shared_ptr_479d1306 *__begin_;
    shared_ptr_479d1306 *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Texture2D>*, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D>>> {
        shared_ptr_479d1306 *__value_;
    } __end_cap_;
} vector_73877b71;

typedef struct vector<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>>> {
    struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *__begin_;
    struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh>>> {
        struct shared_ptr<ggl::Venue3DStroke::HorizontalVenue3DStrokeMesh> *__value_;
    } __end_cap_;
} vector_8c4a3c5e;

typedef struct vector<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>>> {
    struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *__begin_;
    struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh>>> {
        struct shared_ptr<ggl::Venue3DStroke::VerticalVenue3DStrokeMesh> *__value_;
    } __end_cap_;
} vector_5b05785e;

typedef struct vector<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>>> {
    struct shared_ptr<ggl::VenueWall::EndCapMesh> *__begin_;
    struct shared_ptr<ggl::VenueWall::EndCapMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::EndCapMesh>>> {
        struct shared_ptr<ggl::VenueWall::EndCapMesh> *__value_;
    } __end_cap_;
} vector_da5ada59;

typedef struct vector<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>>> {
    struct shared_ptr<ggl::VenueWall::MeshMesh> *__begin_;
    struct shared_ptr<ggl::VenueWall::MeshMesh> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>*, std::__1::allocator<std::__1::shared_ptr<ggl::VenueWall::MeshMesh>>> {
        struct shared_ptr<ggl::VenueWall::MeshMesh> *__value_;
    } __end_cap_;
} vector_e4fc2931;

typedef struct vector<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> {
    shared_ptr_c5d816ee *__begin_;
    shared_ptr_c5d816ee *__end_;
    struct __compressed_pair<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>*, std::__1::allocator<std::__1::shared_ptr<gss::StylesheetQuery<gss::PropertyID>>>> {
        shared_ptr_c5d816ee *__value_;
    } __end_cap_;
} vector_b346fa92;

typedef struct vector<std::__1::shared_ptr<md::CoastlineGroup>, std::__1::allocator<std::__1::shared_ptr<md::CoastlineGroup>>> {
    struct shared_ptr<md::CoastlineGroup> *__begin_;
    struct shared_ptr<md::CoastlineGroup> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::CoastlineGroup>*, std::__1::allocator<std::__1::shared_ptr<md::CoastlineGroup>>> {
        struct shared_ptr<md::CoastlineGroup> *__value_;
    } __end_cap_;
} vector_018386b3;

typedef struct vector<std::__1::shared_ptr<md::NavLabel>, geo::StdAllocator<std::__1::shared_ptr<md::NavLabel>, lhp::Allocator>> {
    shared_ptr_93ff9d4a *__begin_;
    shared_ptr_93ff9d4a *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::NavLabel>*, geo::StdAllocator<std::__1::shared_ptr<md::NavLabel>, lhp::Allocator>> {
        shared_ptr_93ff9d4a *__value_;
        struct StdAllocator<std::__1::shared_ptr<md::NavLabel>, lhp::Allocator> __value_;
    } __end_cap_;
} vector_1ad5c848;

typedef struct vector<std::__1::shared_ptr<md::ObjectGroup>, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup>>> {
    struct shared_ptr<md::ObjectGroup> *__begin_;
    struct shared_ptr<md::ObjectGroup> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::ObjectGroup>*, std::__1::allocator<std::__1::shared_ptr<md::ObjectGroup>>> {
        struct shared_ptr<md::ObjectGroup> *__value_;
    } __end_cap_;
} vector_defea32f;

typedef struct vector<std::__1::shared_ptr<md::TransitNode>, std::__1::allocator<std::__1::shared_ptr<md::TransitNode>>> {
    struct shared_ptr<md::TransitNode> *__begin_;
    struct shared_ptr<md::TransitNode> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::TransitNode>*, std::__1::allocator<std::__1::shared_ptr<md::TransitNode>>> {
        struct shared_ptr<md::TransitNode> *__value_;
    } __end_cap_;
} vector_90cb47b2;

typedef struct vector<std::__1::shared_ptr<md::Venue>, std::__1::allocator<std::__1::shared_ptr<md::Venue>>> {
    struct shared_ptr<md::Venue> *__begin_;
    struct shared_ptr<md::Venue> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<md::Venue>*, std::__1::allocator<std::__1::shared_ptr<md::Venue>>> {
        struct shared_ptr<md::Venue> *__value_;
    } __end_cap_;
} vector_746328be;

typedef struct weak_ptr<md::GlobeOverlayContainer> {
    struct GlobeOverlayContainer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} weak_ptr_96fca551;

#pragma mark Named Unions

#if 0
// Names with conflicting types:
typedef union {
    unsigned char data[1];
    unsigned char type;
} ValueUnion_42b55164;

#endif

