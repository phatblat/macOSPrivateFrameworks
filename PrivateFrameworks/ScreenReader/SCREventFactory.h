//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class NSCharacterSet, NSMutableDictionary, NSMutableSet, NSSet, NSString, SCRBezelServicesManager, SCRCIndexMap, SCRCTargetSelectorTimer, SCRCUserDefaults, SCREvent, SCREventCapsLockDetector, SCRGestureFactory, SCRKeyboardKey, SCROutputManager, SCRWorkspace;

__attribute__((visibility("hidden")))
@interface SCREventFactory : NSObject
{
    unsigned long long _modifierMask;
    unsigned int _lastCGSModifierFlags;
    SCRCUserDefaults *_keyboardDomain;
    SCRCTargetSelectorTimer *_keyRepeatTimer;
    SCREvent *_keyRepeatEvent;
    SCRCTargetSelectorTimer *_modifierKeyTimer;
    long long _eventTag;
    SCRKeyboardKey *_escapeKey;
    double _lastKeyPressTime;
    NSSet *_repeatCommands;
    SCRCIndexMap *_repeatInfo;
    SCRCTargetSelectorTimer *_commandsTimer;
    int _hotKeyDownCount;
    unsigned int _cgsConnection;
    struct ProcessSerialNumber _keyboardPSN;
    unsigned long long _kbCommanderModifierKey;
    unsigned long long _fastSearchModifierKey;
    struct __CFMachPort *_eventTap;
    unsigned long long _eventTapReconnectCount;
    double _eventTapLastReconnect;
    struct __CGEventTapProxy *_eventTapProxy;
    SCRCTargetSelectorTimer *_invertedTKeyTimer;
    unsigned long long _invertedTStateMask;
    unsigned long long _lastRepeatedMask;
    unsigned long long _invertedTLastDownState;
    SCRCTargetSelectorTimer *_invertedTArrowRepostTimer;
    NSCharacterSet *_invertedTValidLetters;
    BOOL _alreadyToggledQuickNav;
    BOOL _quickNavSingleLetterEnabled;
    NSString *_lastITCommand;
    NSMutableSet *_downKeySet;
    struct __IOHIDEventSystemClient *_client;
    struct __IOHIDServiceClient *_service;
    struct {
        long long lastState;
        char isTrackpadCommanderEnabled;
        unsigned long long continuityHash;
        long long continuityZone;
        double continuityDistance;
        double continuityThreshold;
        unsigned long long repeatHash;
        unsigned long long pressRepeatHash;
        struct CGPoint trackingLocation;
        double lastEventTime;
        double lastCommandTime;
        double lastClickTime;
        double lastCursorUpdateTime;
        char isCursorHidden;
        char snarfingEvents;
        struct CGPoint cursorLocation;
        char tapDragEnabled;
        double tapDragStartTime;
        unsigned long long mouseDownCount;
        char mouseDownIsRight;
        unsigned long long fingerCount;
        unsigned long long tapCount;
        long long axisDirection;
        char isControlled;
        char isCommanded;
        long long rotorSoundZone;
        char requireUp;
        char onlySpeakWhenTouching;
        char isInPassthruTouchMode;
        struct CGPoint passthruTouchStartPoint;
    } _gesture;
    SCRCTargetSelectorTimer *_mouseDownTimer;
    SCRCIndexMap *_uniCharToVirtualKeysMap;
    struct {
        unsigned int controlOnly:1;
        unsigned int eventCaptureEnabled:1;
        unsigned int fastSearchEnabled:1;
        unsigned int invalid:1;
        unsigned int kbCommanderEnabled:1;
        unsigned int kbCommanderTracking:1;
        unsigned int keyboardPassthruEnabled:1;
        unsigned int modalSessionEnabled:1;
        unsigned int nonArrowQuickNavEnabled:1;
        unsigned int numPadCommanderEnabled:1;
        unsigned int quickNavOverridesSelectionEvents:1;
        unsigned int speakAfterTextInsertionEnabled:1;
        unsigned int vocFollowsKeyWindow:1;
        unsigned int itCommanderEnabled:1;
        unsigned int itCommanderCaptureEnabled:1;
        unsigned int itCommanderTemporarilyDisabled:1;
    } _flags;
    struct __CFRunLoopSource *_eventTapSource;
    NSMutableDictionary *_trackpadGestureFactories;
    SCRGestureFactory *_currentGestureFactory;
    NSString *_lastCommandKey;
    NSString *_lastGestureKey;
    NSString *_tapDragCommand;
    BOOL _voiceOverKeysLocked;
    BOOL __isControlAndOptionPressed;
    BOOL _isSecureInputEnabled;
    BOOL _isProcessingTrackpadCommanderGesture;
    BOOL _screenSaverEnabled;
    BOOL __isVOModifierTemporarilyUnlocked;
    unsigned char __initializationState;
    BOOL _modifierDelayElapsed;
    long long __keysToUseForVOModifier;
    SCREventCapsLockDetector *__capsLockDetector;
    SCRBezelServicesManager *_bezelServicesManager;
    long long __syntheticEscapeKeyState;
    SCROutputManager *__outputManager;
    SCRWorkspace *__workspaceDelegate;
    unsigned long long __trackpadCommanderControlOptionOnHash;
    unsigned long long __trackpadCommanderControlOptionOffHash;
    unsigned long long __trackpadCommanderCapsLockOnHash;
    unsigned long long __trackpadCommanderCapsLockOffHash;
    SCRCUserDefaults *__userDefaults;
}

+ (BOOL)isSecurityApprovedEvent:(struct __CGEvent *)arg1;
+ (void)initialize;
@property(readonly, nonatomic) SCRCUserDefaults *_userDefaults; // @synthesize _userDefaults=__userDefaults;
@property(nonatomic, setter=_setTrackpadCommanderCapsLockOffHash:) unsigned long long _trackpadCommanderCapsLockOffHash; // @synthesize _trackpadCommanderCapsLockOffHash=__trackpadCommanderCapsLockOffHash;
@property(nonatomic, setter=_setTrackpadCommanderCapsLockOnHash:) unsigned long long _trackpadCommanderCapsLockOnHash; // @synthesize _trackpadCommanderCapsLockOnHash=__trackpadCommanderCapsLockOnHash;
@property(nonatomic, setter=_setTrackpadCommanderControlOptionOffHash:) unsigned long long _trackpadCommanderControlOptionOffHash; // @synthesize _trackpadCommanderControlOptionOffHash=__trackpadCommanderControlOptionOffHash;
@property(nonatomic, setter=_setTrackpadCommanderControlOptionOnHash:) unsigned long long _trackpadCommanderControlOptionOnHash; // @synthesize _trackpadCommanderControlOptionOnHash=__trackpadCommanderControlOptionOnHash;
@property(readonly, nonatomic) __weak SCRWorkspace *_workspaceDelegate; // @synthesize _workspaceDelegate=__workspaceDelegate;
@property(nonatomic) BOOL modifierDelayElapsed; // @synthesize modifierDelayElapsed=_modifierDelayElapsed;
@property(nonatomic, setter=_setInitializationState:) unsigned char _initializationState; // @synthesize _initializationState=__initializationState;
@property(readonly, nonatomic) SCROutputManager *_outputManager; // @synthesize _outputManager=__outputManager;
@property(nonatomic) long long _syntheticEscapeKeyState; // @synthesize _syntheticEscapeKeyState=__syntheticEscapeKeyState;
@property(nonatomic, setter=_setVOModifierTemporarilyUnlocked:) BOOL _isVOModifierTemporarilyUnlocked; // @synthesize _isVOModifierTemporarilyUnlocked=__isVOModifierTemporarilyUnlocked;
@property(nonatomic) BOOL screenSaverEnabled; // @synthesize screenSaverEnabled=_screenSaverEnabled;
@property(nonatomic) BOOL isProcessingTrackpadCommanderGesture; // @synthesize isProcessingTrackpadCommanderGesture=_isProcessingTrackpadCommanderGesture;
@property(readonly, nonatomic) BOOL isSecureInputEnabled; // @synthesize isSecureInputEnabled=_isSecureInputEnabled;
@property(readonly, nonatomic) SCRBezelServicesManager *bezelServicesManager; // @synthesize bezelServicesManager=_bezelServicesManager;
@property(retain, nonatomic) NSString *_lastITCommand; // @synthesize _lastITCommand;
@property(retain, nonatomic, setter=_setCapsLockDetector:) SCREventCapsLockDetector *_capsLockDetector; // @synthesize _capsLockDetector=__capsLockDetector;
@property(nonatomic, setter=_setControlAndOptionPressed:) BOOL _isControlAndOptionPressed; // @synthesize _isControlAndOptionPressed=__isControlAndOptionPressed;
@property(nonatomic, setter=_setKeysToUseForVOModifier:) long long _keysToUseForVOModifier; // @synthesize _keysToUseForVOModifier=__keysToUseForVOModifier;
- (void).cxx_destruct;
- (void)postKeyboardKeyIgnoringEventTap:(unsigned short)arg1 isDown:(BOOL)arg2;
- (void)_delayedHandleEvent:(id)arg1;
- (void)processKeyString:(id)arg1 withModifierMask:(unsigned long long)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_processKeyString:(id)arg1 withModifierMask:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_processModifierMask:(unsigned long long)arg1 modifierFlags:(unsigned long long *)arg2 down:(BOOL)arg3;
- (void)processVirtualKey:(unsigned short)arg1 withModifierMask:(unsigned long long)arg2;
- (void)_processVirtualKey:(id)arg1 withModifierMask:(id)arg2;
- (void)clearModifierState;
- (void)updateCapsLockModifierMask;
- (void)setEventCaptureEnabled:(BOOL)arg1;
- (void)_manageModifierAlternatesWithMask:(unsigned long long)arg1 event:(struct __CGEvent *)arg2 wasDown:(BOOL)arg3 areDown:(BOOL)arg4;
- (void)clearApplicationModifiers;
- (void)_updateKeyboardCommanderTrackingState;
- (void)_handleEvent:(struct __CGEvent *)arg1;
- (struct __CGEvent *)_handleTapEvent:(struct __CGEvent *)arg1 type:(unsigned int)arg2 withProxy:(struct __CGEventTapProxy *)arg3;
- (BOOL)_handleInvertedTArrowEvent:(struct __CGEvent *)arg1;
- (BOOL)_handleInvertedTNonArrowEvent:(struct __CGEvent *)arg1;
- (BOOL)_handleInvertedTEvent:(struct __CGEvent *)arg1;
@property(nonatomic) BOOL quickNavOverridesSelectionEvents;
@property(nonatomic) BOOL nonArrowQuickNavEnabled; // @dynamic nonArrowQuickNavEnabled;
@property(nonatomic) BOOL quickNavTemporarilyDisabled; // @dynamic quickNavTemporarilyDisabled;
- (void)_handleInvertedTCommanderPress;
- (BOOL)_dispatchInvertedTCommand:(id)arg1;
- (void)_handleInvertedTDownArrowRepostPress:(id)arg1;
- (void)_updateBrailleQuickNavSetting;
- (void)_updateInvertedTCommanderPreferences;
- (id)_invertedTCommands;
- (BOOL)invertedTCommanderCaptureEnabled;
- (void)setInvertedTCommanderCaptureEnabled:(BOOL)arg1;
- (id)_uniCharToVirtualKeysMap;
- (BOOL)_handleTimeMachineNumPadEvent:(struct __CGEvent *)arg1;
- (unsigned long long)_fetchAvailableModifiers:(struct __CGEvent *)arg1;
- (void)_updateTextCursorFeedbackOption;
- (void)_handleOptionRightArrow;
- (BOOL)_handleKeyboardCommanderEvent:(struct __CGEvent *)arg1 eventType:(unsigned int)arg2;
- (BOOL)_handleFastSearchEvent:(struct __CGEvent *)arg1;
- (void)_handleKeyUp:(struct __CGEvent *)arg1;
- (void)_handleFinalKeyRepeat;
- (void)_processRegularKey:(id)arg1 commands:(id)arg2 info:(id)arg3 repeating:(BOOL)arg4 originallyFromCommander:(BOOL)arg5;
- (void)_processCommands:(id)arg1 withInfo:(id)arg2 isDown:(BOOL)arg3 isRepeating:(BOOL)arg4;
- (void)_cancelCommands;
- (void)processCommand:(id)arg1 withInfo:(id)arg2;
- (void)processKey:(id)arg1 withInfo:(id)arg2;
- (void)_repeatCommands;
- (void)_modifierKeyPressed;
- (void)_handleModifierKeyPressed;
- (void)_workspaceDidChange;
- (void)_delayedWorkspaceDidChange;
- (BOOL)isModalSessionEnabled;
- (void)setIsModalSessionEnabled:(BOOL)arg1;
- (long long)eventTag;
- (void)setEventTag:(long long)arg1;
- (void)_setSecureInputEnabled:(BOOL)arg1;
- (void)_updateSecureInputState;
- (void)updateSecureInputState;
- (BOOL)numPadCommanderEnabled;
- (void)setNumPadCommanderEnabled:(BOOL)arg1;
- (void)_setNumPadCommanderEngineEnabled:(BOOL)arg1;
- (void)_updateNumPadCommanderEnabled;
- (BOOL)keyboardPassthruEnabled;
- (void)setKeyboardPassThruEnabled:(BOOL)arg1;
- (BOOL)_shouldCapture;
- (BOOL)_isVOLocked;
@property(nonatomic) BOOL voiceOverKeysLocked; // @synthesize voiceOverKeysLocked=_voiceOverKeysLocked;
- (void)_updateEventCaptureFromCapsLockDetector;
- (void)_updateCapsLockDetection;
- (void)_updateKeysToUseForVOModifier;
- (void)_observeValueForKeyPath:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_handleHIDDetectionNotification:(id)arg1;
- (void)_updateKeyboardCommanderPreferences;
- (void)_updateFastSearchPreferences;
@property(readonly, nonatomic) BOOL keyboardCommanderEnabled; // @dynamic keyboardCommanderEnabled;
@property(readonly, nonatomic) BOOL _isVOModifierPressed;
- (void)setupEventTap;
- (void)_setEventListenMasksForKeyboard:(BOOL)arg1 mouse:(BOOL)arg2;
- (void)_initializeModifierState;
- (void)invalidate;
- (void)completeInitialization;
- (id)initWithWorkspaceDelegate:(id)arg1 userDefaults:(id)arg2 outputManager:(id)arg3;
- (void)_postProcessEventForFactory:(id)arg1;
- (BOOL)_handleGestureCommanderEvent:(struct __CGEvent *)arg1;
- (BOOL)_shouldCaptureSystemGesture:(struct __CGEvent *)arg1;
- (void)gestureGutterUpCallbackWithFactory:(id)arg1;
- (void)gestureTrackingCallbackWithFactory:(id)arg1;
- (void)gestureTappingCallbackWithFactory:(id)arg1;
- (void)gestureSplitTappingCallbackWithFactory:(id)arg1;
- (BOOL)shouldBlockSplitTapGestureWithFactory:(id)arg1;
- (void)_processPreCommand;
- (void)_processTrackWithFactory:(id)arg1;
- (void)_processForFactory:(id)arg1 gestureString:(id)arg2 directionString:(id)arg3 countString:(id)arg4 argument:(id)arg5 continuous:(BOOL)arg6 resetCursor:(BOOL)arg7;
- (id)_gestureCommander;
- (BOOL)_processPressEventWithGestureString:(id)arg1 failSilently:(BOOL)arg2 modifierMask:(unsigned long long)arg3 ignoreHelp:(BOOL)arg4;
- (void)_processMouseDown;
- (void)_processPassthruTouchStart:(BOOL)arg1;
- (void)_processIdle;
- (BOOL)_handleGestureEvent:(struct __CGEvent **)arg1 type:(unsigned int)arg2;
- (BOOL)isCapturingGestureEvents;
- (void)_showCursor;
- (void)updateMouseCursorState;
- (void)_hideCursor;
- (void)_invalidateTrackpads;
- (void)_updateTrackpads:(id)arg1;
- (void)_issueDisconnectSound;
- (void)_updateGestureSpeeds;
- (BOOL)isOnOffTrackPadCommanderGesture:(unsigned long long)arg1;
- (void)_initializeTrackpads;
- (BOOL)trackpadEnabledForDeviceIdentifier:(unsigned long long)arg1;
- (void)setTrackpadEnabled:(BOOL)arg1 forDeviceIdentifier:(unsigned long long)arg2;
- (void)_enableTrackpadsFromPreferences:(BOOL)arg1;
- (unsigned int)_trackpadDisabledEventMask;
- (unsigned int)_trackpadEnabledEventMask;
- (void)_invalidateEventTap;
- (void)_setupEventTapWithEvents:(unsigned int)arg1;
- (BOOL)_registerForCGEvents;

@end

