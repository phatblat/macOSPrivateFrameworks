//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "SUUpdateClient.h"

@class NSArray, NSError, NSLock, NSObject<OS_dispatch_queue>, NSString, NSURLCredential, NSXPCConnection, SUPowerSourceMonitor;

@interface SUAppStoreUpdateController : NSObject <SUUpdateClient>
{
    NSXPCConnection *_conn;
    NSLock *_connectionLock;
    NSArray *_currentUpdates;
    NSArray *_currentMajorUpdates;
    NSArray *_queuedUpdates;
    NSObject<OS_dispatch_queue> *_q;
    BOOL _requireACPower;
    BOOL _deferredUpdatesExist;
    SUPowerSourceMonitor *_powerMonitor;
    NSObject<OS_dispatch_queue> *_scanAndSessionQ;
    NSError *_lastCantStartError;
    struct AuthorizationOpaqueRef *_authRef;
    BOOL _didSendAuth;
    BOOL _destroyAuthRef;
    BOOL _serviceInterrupted;
    long long _numServiceInterruptionsDetected;
    NSObject<OS_dispatch_queue> *_authQueue;
    NSLock *_statusTimerLock;
    NSObject<OS_dispatch_queue> *_initialAvailableUpdatesQueryQueue;
    BOOL _isSystemAppleInternal;
    BOOL _shouldRegisterBundleURLWithLaunchServices;
    NSURLCredential *_sharedURLCredential;
}

+ (id)_errorWithCode:(long long)arg1 userInfo:(id)arg2 underlyingError:(id)arg3;
+ (id)keyPathsForValuesAffectingCanStartUpdate;
+ (id)sharedUpdateController;
@property BOOL shouldRegisterBundleURLWithLaunchServices; // @synthesize shouldRegisterBundleURLWithLaunchServices=_shouldRegisterBundleURLWithLaunchServices;
@property(retain) NSURLCredential *sharedURLCredential; // @synthesize sharedURLCredential=_sharedURLCredential;
@property(readonly) BOOL deferredUpdatesExist; // @synthesize deferredUpdatesExist=_deferredUpdatesExist;
@property BOOL requireACPower; // @synthesize requireACPower=_requireACPower;
- (void)installedBundlesToRegisterWithLaunchServices:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)updatesQueuedForLaterDidChange;
- (void)hiddenUpdatesDidChange;
- (void)catalogURLDidChange;
- (void)authChallengeWasReceived:(id)arg1 handled:(char *)arg2;
- (id)_lookupURLCredentialsFromUserKeychain:(id)arg1;
- (void)installStateDidChange:(id)arg1 forUpdateWithProductKey:(id)arg2;
- (void)availableUpdatesDidChange;
- (BOOL)resetIgnoredUpdates;
- (BOOL)hasIgnoredUpdates;
- (id)_ignoredUpdateKeys;
- (BOOL)ignoreUpdate:(id)arg1;
- (BOOL)registerRequestsToInstallAfterPostLogoutUpdates:(id)arg1 error:(id *)arg2;
- (void)cancelOperation:(id)arg1;
- (BOOL)_clearUserSideStashCredentials;
- (BOOL)_shouldStashLoginCredentialsForUpdates:(id)arg1;
- (id)updatesToBeInstalledLater;
- (BOOL)removeAllUpdatesFromInstallLater;
- (BOOL)installUpdatesLater:(id)arg1;
- (id)updatesToBeInstalledAfterLogout;
- (BOOL)installUpdatesAfterNextLogout:(id)arg1 restartingNow:(BOOL)arg2 nowIsLater:(BOOL)arg3;
- (BOOL)installUpdatesAfterNextLogout:(id)arg1 restartingNow:(BOOL)arg2;
- (id)startDownloadingPostLogoutUpdates:(id)arg1 notifyOn:(id)arg2 progress:(CDUnknownBlockType)arg3 finish:(CDUnknownBlockType)arg4;
- (BOOL)isDownloadRequiredForPostLogoutUpdates:(id)arg1;
- (id)startInstallingUpdates:(id)arg1 notifyOn:(id)arg2 progress:(CDUnknownBlockType)arg3 finish:(CDUnknownBlockType)arg4;
- (id)startInstallingUpdates:(id)arg1 notifyOn:(id)arg2 usingForeground:(BOOL)arg3 progress:(CDUnknownBlockType)arg4 finish:(CDUnknownBlockType)arg5;
- (id)_dictFromUpdateStatus:(id)arg1;
- (id)_startSessionForUpdates:(id)arg1 withInstall:(BOOL)arg2 usingForeground:(BOOL)arg3 notifyOn:(id)arg4 progress:(CDUnknownBlockType)arg5 finish:(CDUnknownBlockType)arg6;
- (BOOL)_authorizeIfNeeded:(BOOL)arg1;
- (id)applicationIdentifiersToCloseForUpdates:(id)arg1;
- (unsigned long long)diskSpaceRequiredForUpdates:(id)arg1;
- (long long)actionRequiredForUpdates:(id)arg1;
- (BOOL)_hasIAUpdate:(id)arg1;
- (id)_updatesFromProductKeys:(id)arg1;
- (id)_productKeysFromUpdates:(id)arg1;
- (id)installedUpdateJournalPrunedAndSorted;
- (id)installedUpdateJournal;
- (id)systemConfiguredCatalogURL;
- (BOOL)isEVProtected;
- (BOOL)isDefaultCatalog;
- (BOOL)isSeedCatalog;
- (int)catalogTrustLevel;
- (id)catalogURL;
- (id)catalogHostName;
- (void)_retrieveCatalogInformationWithCompletionHandler:(CDUnknownBlockType)arg1;
- (id)startScanningForUpdatesIncludingPrerelease:(BOOL)arg1 rampedUnseen:(BOOL)arg2 evenIfUnchanged:(BOOL)arg3 notifyOn:(id)arg4 progress:(CDUnknownBlockType)arg5 finish:(CDUnknownBlockType)arg6;
- (void)availableUpdatesMatchingPredicate:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (id)_shortDescriptionOfUpdates:(id)arg1;
- (void)_queryForAvailableUpdatesWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)_setAvailableUpdatesAndNotify:(id)arg1 withMajorOSUpdates:(id)arg2 currentStatus:(id)arg3 deferredUpdatesChanged:(BOOL)arg4;
- (void)blockUntilInitialAvailableUpdatesPopulated;
- (void)fetchMajorProductForUpdate:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;
- (id)latestQualifyingMajorOSUpdate;
- (id)availableMajorOSUpdates;
- (id)availableUpdates;
- (void)_updateCanStartUpdate:(id)arg1;
- (BOOL)canStartUpdateReturningError:(id *)arg1;
@property(readonly) BOOL canStartUpdate;
- (BOOL)setAuthorization:(struct AuthorizationOpaqueRef *)arg1;
- (void)_softwareUpdateDaemonStarted:(id)arg1;
- (id)synchronousRemoteObjectProxyWithErrorHandler:(CDUnknownBlockType)arg1;
- (id)remoteObjectProxyWithErrorHandler:(CDUnknownBlockType)arg1;
- (id)_connection;
- (void)dealloc;
- (id)init;
- (void)cancelUpdatesForProductKeys:(id)arg1;
- (id)dictFromUpdateStatus:(id)arg1;
- (id)combinedStatusForProductKeys:(id)arg1;
- (id)productKeysInActiveForegroundTransactions;
- (BOOL)installQueuedUpdatesAfterNextLogoutRestartingNow:(BOOL)arg1;
- (id)startDownloadingPostLogoutQueuedUpdatesAndNotifyOn:(id)arg1 progress:(CDUnknownBlockType)arg2 finish:(CDUnknownBlockType)arg3;
- (BOOL)isDownloadRequiredForPostLogoutQueuedUpdates;
- (id)startInstallingQueuedUpdatesAndNotifyOn:(id)arg1 progress:(CDUnknownBlockType)arg2 finish:(CDUnknownBlockType)arg3;
- (id)applicationIdentifiersToCloseForQueuedUpdates;
- (unsigned long long)diskSpaceRequiredForQueuedUpdates;
- (long long)actionRequiredForQueuedUpdates;
- (id)_queuedProductKeys;
- (id)queuedUpdates;
- (BOOL)dequeueUpdate:(id)arg1;
- (BOOL)enqueueUpdate:(id)arg1;
- (void)_setQueuedUpdatesAndNotify:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

